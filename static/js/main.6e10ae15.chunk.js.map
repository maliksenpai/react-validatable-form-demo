{"version":3,"sources":["components/BodyWrapper.js","components/NavSidebar.js","components/Homepage.js","components/ExampleUsageWrapper.js","components/ValidationResult.js","components/CurrentRulesInfo.js","components/rules/RuleRequired.js","constants/Constants.js","components/rules/RuleNumber.js","components/rules/RuleLength.js","constants/Data.js","components/rules/RuleListSize.js","components/rules/RuleDate.js","components/rules/RuleEmail.js","components/rules/RuleUrl.js","components/rules/RuleIban.js","components/rules/RuleCustomOnHook.js","components/rules/RuleCustomOnProvider.js","components/FormSubmitResult.js","components/advanced/AdvancedHideBeforeSubmit.js","components/advanced/AdvancedShowAfterBlur.js","components/advanced/AdvancedFocusToErrorAfterSubmit.js","components/customizations/CustomMessage.js","components/customizations/CustomTranslations.js","components/advanced/AdvancedSubComponent.js","components/advanced/AdvancedValidateComplexForms.js","components/advanced/AdvancedValidateLists.js","components/customizations/CustomConditionalRules.js","components/rules/RuleRegex.js","components/advanced/AdvancedFocusToErrorOnListAfterSubmit.js","components/advanced/AdvancedValidateListOfObjects.js","components/getting-started/Installation.js","components/getting-started/Usage.js","components/customizations/CustomApplyToNulls.js","components/customizations/CustomElementFocusHandler.js","components/rules/RuleUnique.js","components/rules/RuleEquality.js","components/examples/ExamplePureUsage.js","components/examples/ExampleMuiUsage.js","components/examples/ExamplePrimeReact.js","components/examples/ExampleReactBootstrap.js","components/examples/ExampleSetFormData.js","components/examples/ExampleSetPathValue.js","components/examples/ExampleSetFormDataAndRules.js","components/examples/ExampleFormData.js","components/ApiInfo.js","components/CodeAccordion.js","components/api/ApiUseValidatableForm.js","components/api/ApiReactValidatableFormProvider.js","components/api/ApiRules.js","components/api/ApiRule.js","components/Settings.js","components/api/ApiPath.js","components/examples/ExampleValidationError.js","components/examples/ExampleSetRules.js","components/examples/ExampleUnsetPathValue.js","components/examples/ExampleValidationErrorOriginalResult.js","components/Routes.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["BodyWrapper","children","className","allMenuItems","title","itemId","subNav","keywords","NavSidebar","menuIsHidden","onMenuItemSelect","history","useHistory","location","useLocation","useState","searchInput","setSearchInput","firstPathname","setFirstPathname","useEffect","pathname","onItemSelect","includes","push","filteredMenuItems","JSON","parse","stringify","filter","m","result","searchInputUpper","toUpperCase","length","subsList","i","subEl","replaceAll","k","navigations","map","fm","itemWithSubItems","isActiveGroupElement","activeItemId","onSelect","items","menuStatus","onClick","TextField","label","InputProps","endAdornment","InputAdornment","position","Search","value","onChange","e","target","Homepage","to","ExampleUsageWrapper","props","urlsJsx","codeUrl","urls","Array","isArray","url","pageCodeUrl","href","rel","wrapperClassName","header","ValidationResult","isValid","imgSrc","process","validationResultText","src","alt","stringifyWithFunction","obj","placeholder","fns","json","key","RegExp","source","replace","shift","CurrentRulesInfo","currentRules","Accordion","AccordionSummary","expandIcon","id","AccordionDetails","initialFormData","rules","path","ruleSet","rule","RuleRequired","useValidatableForm","validationError","formData","setPathValue","error","get","helperText","type","ruleOptions","numberRule","dependantPaths","val","ruleOption","comparisonValue","RuleNumber","setRules","setCurrentRules","setRuleOption","isFunc","setIsFunc","onlyIntegers","setOnlyIntegers","updateRules","funcParam","ruleParam","onlyIntegersParam","newRules","newRuleSet","newRule","splice","join","Autocomplete","event","newValue","handleRuleOptionChange","options","disableClearable","renderInput","params","disabled","FormGroup","FormControlLabel","control","Checkbox","checked","lengthRule","RuleLength","listSizeRule","slice","RuleListSize","multiple","today","Date","defaultComparisonValue","yesterday","setDate","getDate","dateRule","RuleDate","withTime","setWithTime","withTimeParam","PickerComponent","DateTimePicker","DesktopDatePicker","pickerFormat","inputFormat","RuleEmail","RuleUrl","RuleIban","ruleParams","RuleCustomOnHook","RuleCustomOnProvider","FormSubmitResult","textVal1","textVal2","val3","textVal4","checkVal","greaterThanOrEqualTo","equalTo","AdvancedHideBeforeSubmit","hideBeforeSubmit","setFormIsSubmitted","resetForm","dialogOpen","setDialogOpen","Button","variant","Dialog","open","onClose","DialogTitle","AdvancedShowAfterBlur","showAfterBlur","setPathIsBlurred","onBlur","AdvancedFocusToErrorAfterSubmit","focusToErrorAfterSubmit","val1","val2","greaterThan","customMessage","errorParams","CustomMessage","CustomTranslations","AdvancedSubComponent","disableSubkey2","index","disableAllSubkey2Rule","listChild","disableSubkey2Rule","listPath","subRules","disableIf","elementId","applyToNulls","AdvancedValidateComplexForms","nextId","setNextId","listChildJsx","lc","newListChild","el","handleDeleteElement","handleAddElement","style","marginLeft","AdvancedValidateLists","ind","enableIf","CustomConditionalRules","regex","RuleRegex","AdvancedFocusToErrorOnListAfterSubmit","AdvancedValidateListOfObjects","width","npmCommand","yarnCommand","Installation","npmCopied","setNpmCopied","yarnCopied","setYarnCopied","Tooltip","placement","navigator","clipboard","writeText","setTimeout","Usage","openSettingsDialog","CustomApplyToNulls","myCustomElementFocusHandler","element","document","getElementById","grantParentElement","parentElement","classList","add","focus","remove","console","warn","CustomElementFocusHandler","elementFocusHandler","RuleUnique","listOfObjectsChild","subkey1","listOfObjectsChildJsx","newListOfObjectsChild","handleDeleteObjectElement","handleAddObjectElement","RuleEquality","FormControl","FormHelperText","ExamplePureUsage","getValue","getError","htmlFor","op","alert","ExampleMuiUsage","primeReactElementsFocusHandler","tagName","inputNodes","getElementsByTagName","ExamplePrimeReact","visible","modal","onHide","onMaskClick","draggable","resizable","ExampleReactBootstrap","Form","Group","controlId","Label","Control","isInvalid","Feedback","Select","ExampleSetFormData","setFormData","formFilledState","setFormFilledState","numVal","selectVal","ExampleSetPathValue","rules2","rules3","ExampleSetFormDataAndRules","setFormDataAndRules","ExampleFormData","ApiInfo","apiInfoListJsx","apiInfoList","api","apiLabel","apiDesc","desc","apiIndent","indent","leftIndentStyle","paddingLeft","borderTop","CodeAccordion","code","hookParametersApiInfoList","returnValuesApiInfoList","ApiUseValidatableForm","providerParametersApiInfoList","ApiReactValidatableFormProvider","rulesParametersApiInfoList","ApiRules","ruleParametersApiInfoList","ApiRule","Settings","versionInfo","ApiPath","ExampleValidationError","ExampleSetRules","ExampleUnsetPathValue","unsetPathValue","ExampleValidationErrorOriginalResult","validationErrorOriginalResult","Routes","onOutsideClick","exact","customRules","myCustomRule","defaultSettings","lang","translationsEnabled","customDateFormatterFunctionEnabled","customDateWithTimeFormatterFunctionEnabled","customElementFocusHandlerEnabled","customTranslations","en","required","de","customDateFormatterFunction","dateParam","d","getMonth","getFullYear","customDateWithTimeFormatterFunction","getHours","getMinutes","defaultLangOptions","Main","isMobile","useMediaQuery","currentSettings","setCurrentSettings","settingsDialogOpen","setSettingsDialogOpen","setMenuIsHidden","handleSettingChange","newSettings","translations","dateFormatterFunction","dateWithTimeFormatterFunction","currentLangOptions","customElementFocusHandler","log","dialogContent","IconButton","App","state","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","LocalizationProvider","dateAdapter","AdapterDateFns"],"mappings":"0qBAUeA,EARK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OACI,qBAAKC,UAAU,wBAAf,SACI,sBAAMA,UAAU,sBAAhB,SAAuCD,O,oDCG7CE,EAAe,CACjB,CACIC,MAAO,kBACPC,OAAQ,SACRC,OAAQ,CACJ,CACIF,MAAO,eACPC,OAAQ,gCACRE,SAAU,CAAC,MAAO,SAEtB,CACIH,MAAO,QACPC,OAAQ,yBACRE,SAAU,CAAC,+BAAgC,yBAIvD,CACIH,MAAO,QACPC,OAAQ,SACRC,OAAQ,CACJ,CACIF,MAAO,WACPC,OAAQ,mBAEZ,CACID,MAAO,SACPC,OAAQ,gBACRE,SAAU,CAAC,iBAEf,CACIH,MAAO,SACPC,OAAQ,iBAEZ,CACID,MAAO,WACPC,OAAQ,oBAEZ,CACID,MAAO,OACPC,OAAQ,cACRE,SAAU,CAAC,OAAQ,aAEvB,CACIH,MAAO,QACPC,OAAQ,gBAEZ,CACID,MAAO,MACPC,OAAQ,cAEZ,CACID,MAAO,OACPC,OAAQ,eAEZ,CACID,MAAO,WACPC,OAAQ,mBAEZ,CACID,MAAO,QACPC,OAAQ,gBAEZ,CACID,MAAO,SACPC,OAAQ,iBAEZ,CACID,MAAO,iBACPC,OAAQ,yBAEZ,CACID,MAAO,qBACPC,OAAQ,+BAIpB,CACID,MAAO,oBACPC,OAAQ,SACRC,OAAQ,CACJ,CACIF,MAAO,iBACPC,OAAQ,4BAEZ,CACID,MAAO,qBACPC,OAAQ,+BACRE,SAAU,CAAC,cAEf,CACIH,MAAO,kBACPC,OAAQ,4BACRE,SAAU,CAAC,cAEf,CACIH,MAAO,8BACPC,OAAQ,yCAEZ,CACID,MAAO,sCACPC,OAAQ,iDAEZ,CACID,MAAO,2BACPC,OAAQ,sCAEZ,CACID,MAAO,yBACPC,OAAQ,sCAIpB,CACID,MAAO,iBACPC,OAAQ,SACRC,OAAQ,CACJ,CACIF,MAAO,iBACPC,OAAQ,kCAEZ,CACID,MAAO,sBACPC,OAAQ,gCAEZ,CACID,MAAO,oBACPC,OAAQ,oCACRE,SAAU,CAAC,YAAa,aAE5B,CACIH,MAAO,iBACPC,OAAQ,kCAEZ,CACID,MAAO,wBACPC,OAAQ,kDAIpB,CACID,MAAO,iBACPC,OAAQ,SACRC,OAAQ,CACJ,CACIF,MAAO,wBACPC,OAAQ,kBAEZ,CACID,MAAO,iBACPC,OAAQ,gBACRE,SAAU,CAAC,aAAc,gBAE7B,CACIH,MAAO,wBACPC,OAAQ,yBAEZ,CACID,MAAO,6BACPC,OAAQ,6BAEZ,CACID,MAAO,cACPC,OAAQ,2BAEZ,CACID,MAAO,eACPC,OAAQ,4BAEZ,CACID,MAAO,iBACPC,OAAQ,8BAEZ,CACID,MAAO,WACPC,OAAQ,uBAEZ,CACID,MAAO,sBACPC,OAAQ,qCAEZ,CACID,MAAO,WACPC,OAAQ,uBAEZ,CACID,MAAO,kBACPC,OAAQ,8BAEZ,CACID,MAAO,gCACPC,OAAQ,gDAIpB,CACID,MAAO,MACPC,OAAQ,SACRC,OAAQ,CACJ,CACIF,MAAO,+BACPC,OAAQ,uCACRE,SAAU,CACN,OACA,cACA,eACA,wBACA,gCACA,mBACA,gBACA,0BACA,wBAGR,CACIH,MAAO,qBACPC,OAAQ,4BACRE,SAAU,CACN,QACA,kBACA,mBACA,gBACA,0BACA,sBACA,UACA,kBACA,gCACA,eACA,iBACA,qBACA,mBACA,cACA,WACA,sBACA,YACA,WACA,WACA,2BAGR,CACIH,MAAO,QACPC,OAAQ,aACRE,SAAU,CACN,OACA,WACA,UACA,YACA,gBACA,iBACA,0BACA,aAGR,CACIH,MAAO,OACPC,OAAQ,YACRE,SAAU,CACN,UACA,WACA,oBACA,cACA,uBACA,aACA,eACA,WACA,eACA,YACA,WACA,kBAGR,CACIH,MAAO,kBACPC,OAAQ,YACRE,SAAU,CAAC,SAAU,OAAQ,gBAMhCC,EAAa,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,iBACjCC,EAAUC,cACVC,EAAWC,cACjB,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA0CF,mBAAS,MAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEAC,qBAAU,WACNH,EAAe,IACW,MAAtBJ,EAASQ,SACTF,EAAiB,iCAEjBA,EAAiBN,EAASQ,YAE/B,CAACR,IAEJ,IAKMS,EAAe,SAAC,GAAgB,IAAdjB,EAAa,EAAbA,OAChBA,EAAOkB,SAAS,MAAQV,EAASQ,WAAahB,IAC9CM,EAAQa,KAAKnB,GACbK,MAIJe,EAAoBC,KAAKC,MAAMD,KAAKE,UAAUzB,IAC9Ca,IACAS,EAAoBA,EAAkBI,QAAO,SAACC,GAC1C,IAAIC,GAAS,EACTC,EAAmBhB,EAAYiB,cACnC,GAAIH,EAAExB,QAAUwB,EAAExB,OAAO4B,OAAS,EAAG,CAEjC,IADA,IAAIC,EAAW,GACNC,EAAI,EAAGA,EAAIN,EAAExB,OAAO4B,OAAQE,IAAK,CACtC,IAAMC,EAAQP,EAAExB,OAAO8B,GACjB7B,EAAW8B,EAAM9B,UAAY,IAE/B8B,EAAMjC,MAAM6B,cAAcV,SAASS,IACnCK,EAAMjC,MAAMkC,WAAW,MAAO,IAAIL,cAAcV,SAASS,IACzDzB,EAASsB,QAAO,SAACU,GAAD,OAAOA,EAAEN,cAAcV,SAASS,MAAmBE,OAAS,KAE5EC,EAASX,KAAKa,GACdN,GAAS,GAGbI,GAAYA,EAASD,OAAS,IAC9BJ,EAAExB,OAAS6B,GAGnB,OAAOJ,MAIf,IAAMS,EAAcf,EAAkBgB,KAAI,SAACC,GACvC,IAAMC,EAAmBlB,EAAkBI,QAAO,SAACC,GAAD,OAAOA,EAAEzB,SAAWqC,EAAGrC,UACnEuC,EAAuBD,EAAiB,GAAGrC,OAAOuB,QAAO,SAACC,GAAD,OAAOA,EAAEzB,SAAWa,KAAegB,OAAS,EACvGW,EAAe3B,EAInB,OAHK0B,GAAwB5B,IACzB6B,EAAeH,EAAGrC,QAGlB,cAAC,aAAD,CAA4BwC,aAAcA,EAAcC,SAAUxB,EAAcyB,MAAOJ,GAAtED,EAAGrC,WAItB2C,EAAavC,EAAe,iBAAmB,eAErD,OACI,mCACI,sBACIP,UAAS,UAAK8C,EAAL,mLAAkM,0BAD/M,UAGI,qBAAK9C,UAAU,gEAAgE+C,QA1DvE,WAChBtC,EAAQa,KAAK,KACbd,KAwDQ,SACI,sBAAMR,UAAU,wCAAhB,sCAGJ,qBAAKA,UAAU,+CAAf,SACI,cAACgD,EAAA,EAAD,CACIhD,UAAU,oBACViD,MAAM,SACNC,WAAY,CACRC,aACI,cAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,SACI,cAACC,EAAA,EAAD,OAIZC,MAAOzC,EACP0C,SAAU,SAACC,GAAD,OAAO1C,EAAe0C,EAAEC,OAAOH,YAGhDjB,QCvXFqB,EAJE,WACb,OAAO,cAAC,IAAD,CAAUC,GAAG,mC,wBCkCTC,G,OAjCa,SAACC,GACzB,IAAIC,EAAU,KAEd,GAAID,EAAME,QAAS,CACf,IAAIC,EAAO,GACPC,MAAMC,QAAQL,EAAME,SACpBC,EAAI,YAAOH,EAAME,SAEjBC,EAAK3C,KAAKwC,EAAME,SAEpBD,EAAUE,EAAK1B,KAAI,SAAC6B,GAChB,IAAMC,EAbI,uEAa0BD,EACpC,OACI,sBAAgBpE,UAAU,kBAA1B,SACI,mBAAGsE,KAAMD,EAAaX,OAAO,SAASa,IAAI,aAA1C,6BADOH,MASvB,IAAMI,EAAmBV,EAAMU,kBAAoB,0BAEnD,OACI,sBAAKxE,UAAWwE,EAAhB,UACI,sBAAMxE,UAAU,YAAhB,SAA6B8D,EAAMW,SAClCV,EACD,qBAAK/D,UAAU,iBAAf,SAAiC8D,EAAM/D,gBCRpC2E,G,OAtBU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpBC,EAASC,gCACTC,EAAuB,GAS3B,OARIH,GACAC,GAAU,YACVE,EAAuB,UAEvBF,GAAU,cACVE,EAAuB,WAIvB,sBAAK9E,UAAW,sBAAhB,UACI,uDACA,qBAAK+E,IAAKH,EAAQI,IAAI,mBAAmBhF,UAAW,yBACpD,sBAAMA,UAAW2E,EAAU,8BAAgC,2BAA3D,SACKG,S,sDCZXG,EAAwB,SAACC,GAC3B,IAAIC,EAAc,sBACdC,EAAM,GACNC,EAAO7D,KAAKE,UACZwD,GACA,SAAUI,EAAK/B,GACX,MAAqB,oBAAVA,GACP6B,EAAI9D,KAAKiC,GACF4B,GAEP5B,aAAiBgC,QACjBH,EAAI9D,KAAK,IAAMiC,EAAMiC,OAAS,KACvBL,GAEJ5B,IAEX,GAKJ,OAHA8B,EAAOA,EAAKI,QAAQ,IAAIF,OAAO,IAAMJ,EAAc,IAAK,MAAM,WAC1D,OAAOC,EAAIM,YAoBJC,EAfU,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,aAA6C,IAA/BnB,cAA+B,MAAtB,gBAAsB,EACrE,OACI,qBAAKzE,UAAW,qBAAhB,SACI,eAAC6F,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAkBC,WAAY,cAAC,IAAD,IAAoB,gBAAc,kBAAkBC,GAAG,iBAArF,SACI,sBAAMhG,UAAW,mBAAjB,SAAsCyE,MAE1C,cAACwB,EAAA,EAAD,UACI,sBAAMjG,UAAW,oBAAjB,SAAuCiF,EAAsBW,aC/B3EM,EAAkB,GAElBC,EAAQ,CAAC,CAAEC,KAAM,MAAOC,QAAS,CAAC,CAAEC,KAAM,eA8BjCC,EA5BM,WACjB,MAA6DC,YAAmB,CAC5EL,QACAD,oBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAK5C,OACI,eAAC,EAAD,CAAqBlC,OAAO,WAAWT,QAAQ,mCAA/C,UACI,oBAAGhE,UAAU,gBAAb,UACI,yCADJ,sCACsD,0CADtD,KACwE,qCADxE,KACqF,6CADrF,MAC4G,IACxG,4CAFJ,OAIA,8BACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,OAC9BK,WAAYD,IAAIJ,EAAiB,QAAU,IAC3CxD,MAAM,MACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,QAAU,GAC/BlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,MAAOlD,EAAEC,OAAOH,YAGtD,cAAC,EAAD,CAAkBoB,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,Q,SClC/Ba,EAAc,CACvB,UACA,WACA,oBACA,cACA,uBACA,cCQEC,EAAa,CAAEX,KAAM,UAC3BW,EAAWD,EAAY,IAFQ,EAG/B,IAAMb,EAAQ,CAAC,CAAEC,KAAM,MAAOC,QAAS,CAAC,WAAYY,GAAaC,eAAgB,CAAC,qBAC5EhB,EAAkB,CACpBiB,IAAK,EACLC,WAAYJ,EAAY,GACxBK,gBAP2B,GA8HhBC,EApHI,WACf,MAAuEd,YAAmB,CACtFL,QACAD,oBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAAcY,EAA1D,EAA0DA,SAI1D,EAAwC1G,mBAASsF,GAAjD,mBAAOP,EAAP,KAAqB4B,EAArB,KACA,EAAoC3G,mBAASmG,EAAY,IAAzD,mBAAOI,EAAP,KAAmBK,EAAnB,KACA,EAA4B5G,oBAAS,GAArC,mBAAO6G,EAAP,KAAeC,EAAf,KACA,EAAwC9G,oBAAS,GAAjD,mBAAO+G,EAAP,KAAqBC,EAArB,KAEMC,EAAc,SAACC,EAAWC,EAAWC,GACvC,IAAMC,EAAW1G,KAAKC,MAAMD,KAAKE,UAAUyE,IACrCgC,EAAU,YAAOD,EAAS,GAAG7B,SAC7B+B,EAAU,CAAE9B,KAAM,UACpB0B,IAEII,EAAQJ,GADRD,EACqB,SAACrB,GAAD,OAAcA,EAAQ,iBA1B5B,GA+BnBuB,IACAG,EAAO,cAAmB,GAE9BD,EAAWE,OAAO,EAAG,EAAGD,GACxBF,EAAS,GAAG7B,QAAU8B,EACtBX,EAAgBU,GAChBX,EAASW,IAkBb,OACI,eAAC,EAAD,CAAqBzD,OAAO,SAAST,QAAQ,iCAA7C,UACI,oBAAGhE,UAAU,gBAAb,UACI,uCADJ,yDACuE,6CADvE,mEAEiD,4BAAIgH,EAAYsB,KAAK,QAFtE,4EAKA,sBAAKtI,UAAU,gBAAf,UACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,OAC9BK,WAAYD,IAAIJ,EAAiB,QAAU,IAC3CxD,MAAM,MACN8D,KAAK,SACLxD,MAAOsD,IAAIH,EAAU,OACrBlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,MAAOlD,EAAEC,OAAOH,UAGlD,cAACgF,EAAA,EAAD,CACIvI,UAAU,sBACVuD,MAAO6D,EACP5D,SAAU,SAACgF,EAAOC,IA9BH,SAACA,GAC5BX,EAAYJ,EAAQe,EAAUb,GAC9BH,EAAcgB,GA6BEC,CAAuBD,IAE3BE,QAAS3B,EACT4B,kBAAkB,EAClBC,YAAa,SAACC,GAAD,OAAY,cAAC9F,EAAA,EAAD,2BAAe8F,GAAf,IAAuB7F,MAAM,mBAEzDyE,EACG,cAAC1E,EAAA,EAAD,CACIhD,UAAU,sBACViD,MAAM,kBACN8D,KAAK,SACLxD,MAAOsD,IAAIH,EAAU,mBACrBlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,kBAAmBlD,EAAEC,OAAOH,UAG9D,cAACP,EAAA,EAAD,CACI+F,UAAU,EACV/I,UAAU,sBACViD,MAAM,kBACN8D,KAAK,SACLxD,MAhGO,EAiGPC,SAAU,eAGlB,cAACwF,EAAA,EAAD,CAAWhJ,UAAW,kBAAtB,SACI,cAACiJ,EAAA,EAAD,CACIC,QAAS,cAACC,EAAA,EAAD,CAAUC,QAAS1B,EAAQlE,SAAU,SAACC,GAAD,OA9DzCgF,EA8DgEhF,EAAEC,OAAO0F,QA7D9FtB,EAAYW,EAAUrB,EAAYQ,QAClCD,EAAUc,GAFU,IAACA,KA+DLxF,MAAM,qBAIlB,qBAAKjD,UAAU,gBAAf,SACI,cAACgJ,EAAA,EAAD,CAAWhJ,UAAW,kBAAtB,SACI,cAACiJ,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIC,QAASxB,EACTpE,SAAU,SAACC,GAAD,OA/DJgF,EA+DoChF,EAAEC,OAAO0F,QA9D3EtB,EAAYJ,EAAQN,EAAYqB,QAChCZ,EAAgBY,GAFa,IAACA,KAkEdxF,MAAM,qBAIlB,cAAC,EAAD,CAAkB0B,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcA,QCxHtCyD,EAAa,CAAE/C,KAAM,UAC3B+C,EAAWrC,EAAY,IAFQ,EAG/B,IAAMb,EAAQ,CAAC,CAAEC,KAAM,MAAOC,QAAS,CAAC,WAAYgD,GAAanC,eAAgB,CAAC,qBAC5EhB,GAAkB,CACpBiB,IAAK,KACLC,WAAYJ,EAAY,GACxBK,gBAP2B,GAqGhBiC,GA3FI,WACf,MAAuE9C,YAAmB,CACtFL,QACAD,qBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAAcY,EAA1D,EAA0DA,SAI1D,EAAwC1G,mBAASsF,GAAjD,mBAAOP,EAAP,KAAqB4B,EAArB,KACA,EAAoC3G,mBAASmG,EAAY,IAAzD,mBAAOI,EAAP,KAAmBK,EAAnB,KACA,EAA4B5G,oBAAS,GAArC,mBAAO6G,EAAP,KAAeC,EAAf,KAEMG,EAAc,SAACC,EAAWC,GAC5B,IAAME,EAAW1G,KAAKC,MAAMD,KAAKE,UAAUyE,IACrCgC,EAAU,YAAOD,EAAS,GAAG7B,SAC7B+B,EAAU,CAAE9B,KAAM,UAEpB8B,EAAQJ,GADRD,EACqB,SAACrB,GAAD,OAAcA,EAAQ,iBAxBxB,EA4BvByB,EAAWE,OAAO,EAAG,EAAGD,GACxBF,EAAS,GAAG7B,QAAU8B,EACtBX,EAAgBU,GAChBX,EAASW,IAab,OACI,eAAC,EAAD,CAAqBzD,OAAO,SAAST,QAAQ,iCAA7C,UACI,oBAAGhE,UAAU,gBAAb,UACI,uCADJ,wCACsD,4BAAIgH,EAAYsB,KAAK,QAD3E,4EAIA,sBAAKtI,UAAU,gBAAf,UACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,OAC9BK,WAAYD,IAAIJ,EAAiB,QAAU,IAC3CxD,MAAM,MACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,OACrBlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,MAAOlD,EAAEC,OAAOH,UAGlD,cAACgF,EAAA,EAAD,CACIvI,UAAU,sBACVuD,MAAO6D,EACP5D,SAAU,SAACgF,EAAOC,IAxBH,SAACA,GAC5BX,EAAYJ,EAAQe,GACpBhB,EAAcgB,GAuBEC,CAAuBD,IAE3BE,QAAS3B,EACT4B,kBAAkB,EAClBC,YAAa,SAACC,GAAD,OAAY,cAAC9F,EAAA,EAAD,2BAAe8F,GAAf,IAAuB7F,MAAM,mBAEzDyE,EACG,cAAC1E,EAAA,EAAD,CACIhD,UAAU,sBACViD,MAAM,kBACN8D,KAAK,SACLxD,MAAOsD,IAAIH,EAAU,mBACrBlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,kBAAmBlD,EAAEC,OAAOH,UAG9D,cAACP,EAAA,EAAD,CACI+F,UAAU,EACV/I,UAAU,sBACViD,MAAM,kBACN8D,KAAK,SACLxD,MApFO,EAqFPC,SAAU,eAGlB,cAACwF,EAAA,EAAD,CAAWhJ,UAAW,kBAAtB,SACI,cAACiJ,EAAA,EAAD,CACIC,QAAS,cAACC,EAAA,EAAD,CAAUC,QAAS1B,EAAQlE,SAAU,SAACC,GAAD,OAxDzCgF,EAwDgEhF,EAAEC,OAAO0F,QAvD9FtB,EAAYW,EAAUrB,QACtBO,EAAUc,GAFU,IAACA,KAyDLxF,MAAM,qBAIlB,cAAC,EAAD,CAAkB0B,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcA,QC7G/B+C,GAAU,CAAC,OAAQ,SAAU,gBAAiB,gBAAiB,SAAU,YAAa,cCe7FY,GAAe,CAAEjD,KAAM,YAC7BiD,GAAavC,EAAY,IAFM,EAG/B,IAAMb,GAAQ,CAAC,CAAEC,KAAM,MAAOC,QAAS,CAAC,WAAYkD,IAAerC,eAAgB,CAAC,qBAC9EhB,GAAkB,CACpBiB,IAAK,YAAIwB,IAASa,MAAM,EAAG,GAC3BpC,WAAYJ,EAAY,GACxBK,gBAP2B,GA6GhBoC,GAnGM,WACjB,MAAuEjD,YAAmB,CACtFL,SACAD,qBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAAcY,EAA1D,EAA0DA,SAI1D,EAAwC1G,mBAASsF,IAAjD,mBAAOP,EAAP,KAAqB4B,EAArB,KACA,EAAoC3G,mBAASmG,EAAY,IAAzD,mBAAOI,EAAP,KAAmBK,EAAnB,KACA,EAA4B5G,oBAAS,GAArC,mBAAO6G,EAAP,KAAeC,EAAf,KAEMG,EAAc,SAACC,EAAWC,GAC5B,IAAME,EAAW1G,KAAKC,MAAMD,KAAKE,UAAUyE,KACrCgC,EAAU,YAAOD,EAAS,GAAG7B,SAC7B+B,EAAU,CAAE9B,KAAM,YAEpB8B,EAAQJ,GADRD,EACqB,SAACrB,GAAD,OAAcA,EAAQ,iBAxBxB,EA4BvByB,EAAWE,OAAO,EAAG,EAAGD,GACxBF,EAAS,GAAG7B,QAAU8B,EACtBX,EAAgBU,GAChBX,EAASW,IAab,OACI,eAAC,EAAD,CAAqBzD,OAAO,WAAWT,QAAQ,mCAA/C,UACI,oBAAGhE,UAAU,gBAAb,UACI,yCADJ,wCACwD,4BAAIgH,EAAYsB,KAAK,QAD7E,4EAIA,sBAAKtI,UAAU,gBAAf,UACI,cAACuI,EAAA,EAAD,CACImB,UAAQ,EACRnG,MAAOsD,IAAIH,EAAU,OACrBlD,SAAU,SAACgF,EAAOC,GACd9B,EAAa,MAAO8B,IAExBE,QAASA,GACTE,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAASH,EAAgBU,IACzBL,WAAYL,EAAgBU,KAAO,IACnClE,MAAM,gBAKlB,cAACsF,EAAA,EAAD,CACIvI,UAAU,sBACVuD,MAAO6D,EACP5D,SAAU,SAACgF,EAAOC,IAhCH,SAACA,GAC5BX,EAAYJ,EAAQe,GACpBhB,EAAcgB,GA+BEC,CAAuBD,IAE3BE,QAAS3B,EACT4B,kBAAkB,EAClBC,YAAa,SAACC,GAAD,OAAY,cAAC9F,EAAA,EAAD,2BAAe8F,GAAf,IAAuB7F,MAAM,mBAEzDyE,EACG,cAAC1E,EAAA,EAAD,CACIhD,UAAU,sBACViD,MAAM,kBACN8D,KAAK,SACLxD,MAAOsD,IAAIH,EAAU,mBACrBlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,kBAAmBlD,EAAEC,OAAOH,UAG9D,cAACP,EAAA,EAAD,CACI+F,UAAU,EACV/I,UAAU,sBACViD,MAAM,kBACN8D,KAAK,SACLxD,MA5FO,EA6FPC,SAAU,eAGlB,cAACwF,EAAA,EAAD,CAAWhJ,UAAW,kBAAtB,SACI,cAACiJ,EAAA,EAAD,CACIC,QAAS,cAACC,EAAA,EAAD,CAAUC,QAAS1B,EAAQlE,SAAU,SAACC,GAAD,OAhEzCgF,EAgEgEhF,EAAEC,OAAO0F,QA/D9FtB,EAAYW,EAAUrB,QACtBO,EAAUc,GAFU,IAACA,KAiELxF,MAAM,qBAIlB,cAAC,EAAD,CAAkB0B,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcA,Q,oBCvGtC+D,GAAQ,IAAIC,KACZC,GAAyBF,GAC3BG,GAAY,IAAIF,KACpBE,GAAUC,QAAQD,GAAUE,UAAY,GACxC,IAAMC,GAAW,CAAE3D,KAAM,QACzB2D,GAASjD,EAAY,IAAM6C,GAC3B,IAAM1D,GAAQ,CAAC,CAAEC,KAAM,MAAOC,QAAS,CAAC,WAAY4D,IAAW/C,eAAgB,CAAC,qBAC1EhB,GAAkB,CACpBiB,IAAK2C,GACL1C,WAAYJ,EAAY,GACxBK,gBAAiBwC,IA4HNK,GAzHE,WACb,MAAuE1D,YAAmB,CACtFL,SACAD,qBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAAcY,EAA1D,EAA0DA,SAI1D,EAAwC1G,mBAASsF,IAAjD,mBAAOP,EAAP,KAAqB4B,EAArB,KACA,EAAoC3G,mBAASmG,EAAY,IAAzD,mBAAOI,EAAP,KAAmBK,EAAnB,KACA,EAA4B5G,oBAAS,GAArC,mBAAO6G,EAAP,KAAeC,EAAf,KACA,EAAgC9G,oBAAS,GAAzC,mBAAOsJ,EAAP,KAAiBC,EAAjB,KAEMtC,EAAc,SAACC,EAAWC,EAAWqC,GACvC,IAAMnC,EAAW1G,KAAKC,MAAMD,KAAKE,UAAUyE,KACrCgC,EAAU,YAAOD,EAAS,GAAG7B,SAC7B+B,EAAU,CAAE9B,KAAM,QACpB0B,IAEII,EAAQJ,GADRD,EACqB,SAACrB,GAAD,OAAcA,EAAQ,iBAEtBmD,IAGzBQ,IACAjC,EAAO,UAAe,GAE1BD,EAAWE,OAAO,EAAG,EAAGD,GACxBF,EAAS,GAAG7B,QAAU8B,EACtBX,EAAgBU,GAChBX,EAASW,IAkBPoC,EAAkBH,EAAWI,KAAiBC,KAC9CC,EAAeN,EAAW,KAAO,aAEvC,OACI,eAAC,EAAD,CAAqB1F,OAAO,OAAOT,QAAQ,+BAA3C,UACI,oBAAGhE,UAAU,gBAAb,UACI,qCADJ,uDACmE,yCADnE,0DAEqC,4BAAIgH,EAAYsB,KAAK,QAF1D,4EAKA,sBAAKtI,UAAU,gBAAf,UACI,cAACsK,EAAD,CACIrH,MAAM,MACNyH,YAAaD,EACblH,MAAOsD,IAAIH,EAAU,OACrBlD,SAAU,SAAC2D,GAAD,OAASR,EAAa,MAAOQ,IACvC0B,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAASC,IAAIJ,EAAiB,OAC9BK,WAAYD,IAAIJ,EAAiB,QAAU,UAKvD,cAAC8B,EAAA,EAAD,CACIvI,UAAU,sBACVuD,MAAO6D,EACP5D,SAAU,SAACgF,EAAOC,IAtCH,SAACA,GAC5BX,EAAYJ,EAAQe,EAAU0B,GAC9B1C,EAAcgB,GAqCEC,CAAuBD,IAE3BE,QAAS3B,EACT4B,kBAAkB,EAClBC,YAAa,SAACC,GAAD,OAAY,cAAC9F,EAAA,EAAD,2BAAe8F,GAAf,IAAuB7F,MAAM,mBAEzDyE,EACG,cAAC4C,EAAD,CACIrH,MAAM,kBACNyH,YAAaD,EACblH,MAAOsD,IAAIH,EAAU,mBACrBlD,SAAU,SAAC2D,GAAD,OAASR,EAAa,kBAAmBQ,IACnD0B,YAAa,SAACC,GAAD,OAAY,cAAC9F,EAAA,EAAD,aAAWhD,UAAU,2BAA8B8I,OAGhF,cAACwB,EAAD,CACIvB,UAAU,EACV9F,MAAM,kBACNyH,YAAaD,EACblH,MAAOoG,GACPnG,SAAU,aACVqF,YAAa,SAACC,GAAD,OAAY,cAAC9F,EAAA,EAAD,aAAWhD,UAAU,2BAA8B8I,OAGpF,cAACE,EAAA,EAAD,CAAWhJ,UAAW,kBAAtB,SACI,cAACiJ,EAAA,EAAD,CACIC,QAAS,cAACC,EAAA,EAAD,CAAUC,QAAS1B,EAAQlE,SAAU,SAACC,GAAD,OAtEzCgF,EAsEgEhF,EAAEC,OAAO0F,QArE9FtB,EAAYW,EAAUrB,EAAY+C,QAClCxC,EAAUc,GAFU,IAACA,KAuELxF,MAAM,qBAIlB,qBAAKjD,UAAU,gBAAf,SACI,cAACgJ,EAAA,EAAD,CAAWhJ,UAAW,kBAAtB,SACI,cAACiJ,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CAAUC,QAASe,EAAU3G,SAAU,SAACC,GAAD,OArEjCgF,EAqE6DhF,EAAEC,OAAO0F,QApEhGtB,EAAYJ,EAAQN,EAAYqB,QAChC2B,EAAY3B,GAFa,IAACA,KAuEVxF,MAAM,iBAIlB,cAAC,EAAD,CAAkB0B,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcA,QCzItCM,GAAkB,CACpBiB,IAAK,MAGHhB,GAAQ,CAAC,CAAEC,KAAM,MAAOC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,YA6BvDqE,GA3BG,WACd,MAA6DnE,YAAmB,CAC5EL,SACAD,qBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAK5C,OACI,eAAC,EAAD,CAAqBlC,OAAO,QAAQT,QAAQ,gCAA5C,UACI,oBAAGhE,UAAU,gBAAb,UACI,sCADJ,uDAGA,8BACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,OAC9BK,WAAYD,IAAIJ,EAAiB,QAAU,IAC3CxD,MAAM,MACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,QAAU,GAC/BlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,MAAOlD,EAAEC,OAAOH,YAGtD,cAAC,EAAD,CAAkBoB,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,SC5BtCD,GAAkB,CACpBiB,IAAK,MAGHhB,GAAQ,CAAC,CAAEC,KAAM,MAAOC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,UA6BvDsE,GA3BC,WACZ,MAA6DpE,YAAmB,CAC5EL,SACAD,qBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAK5C,OACI,eAAC,EAAD,CAAqBlC,OAAO,MAAMT,QAAQ,8BAA1C,UACI,oBAAGhE,UAAU,gBAAb,UACI,oCADJ,qDAGA,8BACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,OAC9BK,WAAYD,IAAIJ,EAAiB,QAAU,IAC3CxD,MAAM,MACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,QAAU,GAC/BlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,MAAOlD,EAAEC,OAAOH,YAGtD,cAAC,EAAD,CAAkBoB,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,SC5BtCD,GAAkB,CACpBiB,IAAK,MAGHhB,GAAQ,CAAC,CAAEC,KAAM,MAAOC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,WA6BvDuE,GA3BE,WACb,MAA6DrE,YAAmB,CAC5EL,SACAD,qBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAK5C,OACI,eAAC,EAAD,CAAqBlC,OAAO,OAAOT,QAAQ,+BAA3C,UACI,oBAAGhE,UAAU,gBAAb,UACI,qCADJ,sDAGA,8BACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,OAC9BK,WAAYD,IAAIJ,EAAiB,QAAU,IAC3CxD,MAAM,MACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,QAAU,GAC/BlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,MAAOlD,EAAEC,OAAOH,YAGtD,cAAC,EAAD,CAAkBoB,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,SC5BtCD,GAAkB,CACpBiB,IAAK,MAWHhB,GAAQ,CAAC,CAAEC,KAAM,MAAOC,QAAS,CAAC,WAAY,CAAEC,KARnC,SAACwE,GAChB,IAAQvH,EAAUuH,EAAVvH,MACR,OAAIA,KAAWA,EAAMlC,SAAS,MAAQkC,EAAMvB,OAAS,GAC1C,+EAEJ,UA8BI+I,GAzBU,WACrB,MAA6DvE,YAAmB,CAC5EL,SACAD,qBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAK5C,OACI,eAAC,EAAD,CAAqBlC,OAAO,2BAA2BT,QAAQ,uCAA/D,UACI,mBAAGhE,UAAU,gBAAb,uFACA,8BACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,OAC9BK,WAAYD,IAAIJ,EAAiB,QAAU,IAC3CxD,MAAM,MACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,QAAU,GAC/BlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,MAAOlD,EAAEC,OAAOH,YAGtD,cAAC,EAAD,CAAkBoB,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,SCjCtCD,GAAkB,CACpBiB,IAAK,KAGHhB,GAAQ,CAAC,CAAEC,KAAM,MAAOC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,mBAoCvD0E,GAlCc,WACzB,MAA6DxE,YAAmB,CAC5EL,SACAD,qBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAK5C,OACI,eAAC,EAAD,CACIlC,OAAO,qBACPT,QAAS,CAAC,2CAA4C,sBAF1D,UAII,oBAAGhE,UAAU,gBAAb,oEAC4D,IACxD,cAAC,IAAD,CAAMA,UAAU,aAAa4D,GAAG,uCAAhC,0CAEQ,IAJZ,6DAOA,8BACI,cAACZ,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,OAC9BK,WAAYD,IAAIJ,EAAiB,QAAU,IAC3CxD,MAAM,MACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,QAAU,GAC/BlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,MAAOlD,EAAEC,OAAOH,YAGtD,cAAC,EAAD,CAAkBoB,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,S,UCzCtClB,I,OAAwB,SAACC,GAC3B,IAAIC,EAAc,sBACdC,EAAM,GACNC,EAAO7D,KAAKE,UACZwD,GACA,SAAUI,EAAK/B,GACX,MAAqB,oBAAVA,GACP6B,EAAI9D,KAAKiC,GACF4B,GAEJ5B,IAEX,GAKJ,OAHA8B,EAAOA,EAAKI,QAAQ,IAAIF,OAAO,IAAMJ,EAAc,IAAK,MAAM,WAC1D,OAAOC,EAAIM,aAaJuF,GARU,SAAC,GAAkB,IAAhBvE,EAAe,EAAfA,SACxB,OACI,8BACI,sBAAM1G,UAAW,iBAAjB,SAAoCiF,GAAsByB,QCbhER,GAAkB,CACpBgF,SAAU,GACVC,SAAU,GACVC,KAAM,GACNC,SAAU,GACVC,UAAU,GAGRnF,GAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,KAC5F,CAAEnF,KAAM,OAAQC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,WAAYkF,QAAS,KAC7E,CAAEpF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,UAsFjDmF,GAnFkB,WAC7B,MAA4FjF,YAAmB,CAC3GL,SACAD,mBACAwF,kBAAkB,IAHd/G,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAAcgF,EAA1D,EAA0DA,mBAAoBC,EAA9E,EAA8EA,UAK9E,EAAoC/K,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KASA,OACI,eAAC,EAAD,CAAqBrH,OAAO,mBAAmBT,QAAQ,kDAAvD,UACI,oBAAGhE,UAAU,gBAAb,UACI,iDADJ,uDAC+E,qDAA4B,IAD3G,8EAE+E,4CAF/E,gBAIA,gCACI,sBAAKA,UAAW,YAAhB,UACI,cAACgD,EAAA,EAAD,CACI4D,QAASH,EAAgByE,SACzBpE,WAAYL,EAAgByE,UAAY,IACxCjI,MAAM,gBACN8D,KAAK,OACLxD,MAAOmD,EAASwE,SAChB1H,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,UAEvD,cAACP,EAAA,EAAD,CACI4D,QAASH,EAAgB0E,SACzBrE,WAAYL,EAAgB0E,UAAY,IACxClI,MAAM,yBACN8D,KAAK,OACLxD,MAAOmD,EAASyE,SAChB3H,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,UAEvD,cAACgF,EAAA,EAAD,CACImB,UAAQ,EACRnG,MAAOmD,EAAS0E,KAChB5H,SAAU,SAACgF,EAAOC,GACd9B,EAAa,OAAQ8B,IAEzBE,QAASA,GACTE,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAASH,EAAgB2E,KACzBtE,WAAYL,EAAgB2E,MAAQ,IACpCnI,MAAM,4BAIlB,cAACD,EAAA,EAAD,CACI4D,QAASH,EAAgB4E,SACzBvE,WAAYL,EAAgB4E,UAAY,IACxCpI,MAAM,iBACN8D,KAAK,OACLxD,MAAOmD,EAAS2E,SAChB7H,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,aAG3D,gCACI,cAACwI,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WAxDlD4I,KAEtBG,GAAc,IAsDN,yBAGA,cAACC,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,kBAAM6I,KAAtE,2BAIJ,cAAC,EAAD,CAAkBjH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,QAEpC,eAAC8F,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WC3FtCR,GAAkB,GAElBC,GAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,KAC5F,CAAEnF,KAAM,OAAQC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,WAAYkF,QAAS,KAC7E,CAAEpF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,UAwGjD+F,GArGe,WAC1B,MAQI7F,YAAmB,CACnBL,SACAD,mBACAwF,kBAAkB,EAClBY,eAAe,IAXf3H,EADJ,EACIA,QACA8B,EAFJ,EAEIA,gBACAC,EAHJ,EAGIA,SACAC,EAJJ,EAIIA,aACAgF,EALJ,EAKIA,mBACAY,EANJ,EAMIA,iBACAX,EAPJ,EAOIA,UAOJ,EAAoC/K,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KASA,OACI,eAAC,EAAD,CAAqBrH,OAAO,gBAAgBT,QAAQ,+CAApD,UACI,oBAAGhE,UAAU,gBAAb,UACI,8CADJ,8DACoF,IAChF,uDAFJ,8EAE6G,IACzG,4CAHJ,gBAKA,gCACI,sBAAKA,UAAW,YAAhB,UACI,cAACgD,EAAA,EAAD,CACIgD,GAAI,WACJY,QAASC,IAAIJ,EAAiB,YAC9BK,WAAYD,IAAIJ,EAAiB,aAAe,IAChDxD,MAAM,gBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,aAAe,GACpClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,eAEnC,cAACvJ,EAAA,EAAD,CACIgD,GAAI,WACJY,QAASC,IAAIJ,EAAiB,YAC9BK,WAAYD,IAAIJ,EAAiB,aAAe,IAChDxD,MAAM,yBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,aAAe,GACpClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,eAEnC,cAAChE,EAAA,EAAD,CACIvC,GAAI,OACJ0D,UAAQ,EACRnG,MAAOsD,IAAIH,EAAU,SAAW,GAChClD,SAAU,SAACgF,EAAOC,GACd9B,EAAa,OAAQ8B,IAEzB+D,OAAQ,kBAAMD,EAAiB,SAC/B5D,QAASA,GACTE,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,IAC5CxD,MAAM,4BAIlB,cAACD,EAAA,EAAD,CACIgD,GAAI,WACJY,QAASC,IAAIJ,EAAiB,YAC9BK,WAAYD,IAAIJ,EAAiB,aAAe,IAChDxD,MAAM,iBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,aAAe,GACpClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,kBAGvC,gCACI,cAACR,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WAjElD4I,KAEtBG,GAAc,IA+DN,yBAGA,cAACC,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,kBAAM6I,KAAtE,2BAIJ,cAAC,EAAD,CAAkBjH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,QAEpC,eAAC8F,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WCxGtCR,GAAkB,CACpBgF,SAAU,GACVC,SAAU,GACVC,KAAM,GACNC,SAAU,GACVC,UAAU,GAGRnF,GAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CACIF,KAAM,WACNC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,KAE5E,CAAEnF,KAAM,OAAQC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,WAAYkF,QAAS,KAC7E,CAAEpF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,UAyGjDmG,GAtGyB,WACpC,MAOIjG,YAAmB,CACnBL,SACAD,mBACAwF,kBAAkB,EAClBY,eAAe,EACfI,yBAAyB,IAXzB/H,EADJ,EACIA,QACA8B,EAFJ,EAEIA,gBACAC,EAHJ,EAGIA,SACAC,EAJJ,EAIIA,aACAgF,EALJ,EAKIA,mBACAY,EANJ,EAMIA,iBAQJ,EAAoC1L,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KASA,OACI,eAAC,EAAD,CACIrH,OAAO,0BACPT,QAAQ,yDAFZ,UAII,oBAAGhE,UAAU,gBAAb,UACI,wDADJ,gIAE2D,qCAF3D,sFAGoD,qCAHpD,uDAIc,0CAJd,oCAMA,gCACI,sBAAKA,UAAW,YAAhB,UACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,YAC9BK,WAAYD,IAAIJ,EAAiB,aAAe,IAChDxD,MAAM,gBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,YACrBlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,aAEP,cAAChD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,YAC9BK,WAAYD,IAAIJ,EAAiB,aAAe,IAChDxD,MAAM,yBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,YACrBlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,aAEP,cAACuC,EAAA,EAAD,CACImB,UAAQ,EACRnG,MAAOsD,IAAIH,EAAU,QACrBlD,SAAU,SAACgF,EAAOC,GACd9B,EAAa,OAAQ8B,IAEzB+D,OAAQ,kBAAMD,EAAiB,SAC/B5D,QAASA,GACTE,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,IAC5CxD,MAAM,0BAGd+C,GAAG,SAEP,cAAChD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,YAC9BK,WAAYD,IAAIJ,EAAiB,aAAe,IAChDxD,MAAM,iBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,YACrBlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,gBAGX,8BACI,cAAC+F,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WArElD4I,KAEtBG,GAAc,IAmEN,2BAIJ,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,QAEpC,eAAC8F,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WCzHtCR,GAAkB,CACpByG,KAAM,IACNC,KAAM,IACNtB,UAAU,GAURnF,GAAQ,CACV,CACIC,KAAM,OACNC,QAAS,CACL,WACA,CACIC,KAAM,SACNuG,YAAa,EACbC,cAAe,2FAI3B,CAAE1G,KAAM,OAAQC,QAAS,CAAC,WAAY,CAAEC,KAAM,SAAUkF,QAAS,EAAGsB,cAnB9C,SAACC,GACvB,OAAIA,EAAYxJ,MAAQwJ,EAAY1F,gBAC1B,iCAAN,OAAwC0F,EAAY1F,gBAApD,2BAAsF0F,EAAYxJ,MAAlG,gCAEE,iCAAN,OAAwCwJ,EAAY1F,gBAApD,2BAAsF0F,EAAYxJ,MAAlG,kCAyDWyJ,GAvCO,WAClB,MAA6DxG,YAAmB,CAC5EL,SACAD,qBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAK5C,OACI,eAAC,EAAD,CAAqBlC,OAAO,gBAAgBT,QAAQ,6CAApD,UACI,oBAAGhE,UAAU,gBAAb,6EACoE,8CADpE,yBAGA,gCACI,8BACI,cAACgD,EAAA,EAAD,CACI4D,QAASH,EAAgBkG,KACzB7F,WAAYL,EAAgBkG,MAAQ,IACpC1J,MAAM,iCACN8D,KAAK,OACLxD,MAAOmD,EAASiG,KAChBnJ,SAAU,SAACC,GAAD,OAAOkD,EAAa,OAAQlD,EAAEC,OAAOH,YAGvD,8BACI,cAACP,EAAA,EAAD,CACI4D,QAASH,EAAgBmG,KACzB9F,WAAYL,EAAgBmG,MAAQ,IACpC3J,MAAM,mCACN8D,KAAK,OACLxD,MAAOmD,EAASkG,KAChBpJ,SAAU,SAACC,GAAD,OAAOkD,EAAa,OAAQlD,EAAEC,OAAOH,YAGvD,cAAC,EAAD,CAAkBoB,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,YC5D1CD,GAAkB,CACpByG,KAAM,GACNC,KAAM,GACNtB,UAAU,GAGRnF,GAAQ,CACV,CAAEC,KAAM,OAAQC,QAAS,CAAC,WAAY,CAAEC,KAAM,SAAUuG,YAAa,KACrE,CAAEzG,KAAM,OAAQC,QAAS,CAAC,WAAY,CAAEC,KAAM,SAAUkF,QAAS,MAiDtDyB,GA9CY,WACvB,MAA6DzG,YAAmB,CAC5EL,SACAD,qBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAK5C,OACI,eAAC,EAAD,CACIlC,OAAO,eACPT,QAAS,CAAC,kDAAmD,sBAFjE,UAII,oBAAGhE,UAAU,gBAAb,wFAC+E,6CAD/E,YAC4G,IACxG,cAAC,IAAD,CAAMA,UAAU,aAAa4D,GAAG,uCAAhC,0CAFJ,OAOA,gCACI,8BACI,cAACZ,EAAA,EAAD,CACI4D,QAASH,EAAgBkG,KACzB7F,WAAYL,EAAgBkG,MAAQ,IACpC1J,MAAM,sCACN8D,KAAK,OACLxD,MAAOmD,EAASiG,KAChBnJ,SAAU,SAACC,GAAD,OAAOkD,EAAa,OAAQlD,EAAEC,OAAOH,YAGvD,8BACI,cAACP,EAAA,EAAD,CACI4D,QAASH,EAAgBmG,KACzB9F,WAAYL,EAAgBmG,MAAQ,IACpC3J,MAAM,kCACN8D,KAAK,OACLxD,MAAOmD,EAASkG,KAChBpJ,SAAU,SAACC,GAAD,OAAOkD,EAAa,OAAQlD,EAAEC,OAAOH,YAGvD,cAAC,EAAD,CAAkBoB,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,Y,wCCzBjC+G,GA9Bc,SAACpJ,GAC1B,IAAQ2C,EAA8D3C,EAA9D2C,gBAAiBC,EAA6C5C,EAA7C4C,SAAUC,EAAmC7C,EAAnC6C,aAAc4F,EAAqBzI,EAArByI,iBACjD,OACI,8BACI,sBAAKvM,UAAW,YAAhB,UACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,wBAC9BK,WAAYD,IAAIJ,EAAiB,yBAA2B,IAC5DxD,MAAM,uBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,yBAA2B,GAChDlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,uBAAwBlD,EAAEC,OAAOH,QAC/DiJ,OAAQ,kBAAMD,EAAiB,yBAC/BvG,GAAG,yBAEP,cAAChD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,wBAC9BK,WAAYD,IAAIJ,EAAiB,yBAA2B,IAC5DxD,MAAM,uBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,yBAA2B,GAChDlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,uBAAwBlD,EAAEC,OAAOH,QAC/DiJ,OAAQ,kBAAMD,EAAiB,yBAC/BvG,GAAG,+BCXjBmH,GAAiB,SAACzG,EAAU0G,GAC9B,OAAO1G,EAAS2G,uBAAyB3G,EAAS4G,UAAUF,GAAOG,oBAGjEpH,GAAQ,CACV,CAAEC,KAAM,SAAUC,QAAS,CAAC,aAC5B,CAAED,KAAM,SAAUC,QAAS,CAAC,aAC5B,CAAED,KAAM,mBAAoBC,QAAS,CAAC,aACtC,CAAED,KAAM,mBAAoBC,QAAS,CAAC,aACtC,CACImH,SAAU,YACVC,SAAU,CACN,CACIrH,KAAM,UACNC,QAAS,CAAC,WAAY,CAAEC,KAAM,SAAUuG,YAAa,KAEzD,CACIzG,KAAM,UACNC,QAAS,CACL,CACIC,KAAM,WACNoH,UAAWP,IAEf,CACI7G,KAAM,SACNuG,YAAa,EACba,UAAWP,OAK3BjG,eAAgB,CAAC,0BAErB,CACId,KAAM,YACNC,QAAS,CACL,CAAEC,KAAM,WAAYwG,cAAe,iCACnC,CAAExG,KAAM,WAAYuG,YAAa,IAErCc,UAAW,yBAEf,CAAEvH,KAAM,iBAAkBC,QAAS,CAAC,aACpC,CAAED,KAAM,iBAAkBC,QAAS,CAAC,CAAEC,KAAM,SAAUuG,YAAa,EAAGe,cAAc,KACpF,CAAExH,KAAM,uBAAwBC,QAAS,CAAC,aAC1C,CAAED,KAAM,uBAAwBC,QAAS,CAAC,cAwM/BwH,GArMsB,WACjC,MAOIrH,YAAmB,CACnBL,SACAuF,kBAAkB,EAClBY,eAAe,EACfI,yBAAyB,IAVzB/H,EADJ,EACIA,QACA8B,EAFJ,EAEIA,gBACAC,EAHJ,EAGIA,SACAC,EAJJ,EAIIA,aACAgF,EALJ,EAKIA,mBACAY,EANJ,EAMIA,iBAOJ,EAA4B1L,mBAAS,GAArC,mBAAOiN,EAAP,KAAeC,EAAf,KACA,EAAoClN,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KAqBIkC,EAAe,KA0CnB,OAxCItH,EAAS4G,WAAa5G,EAAS4G,UAAUtL,OAAS,IAClDgM,EAAetH,EAAS4G,UAAU/K,KAAI,SAAC0L,EAAIb,GACvC,OACI,sBAAiBpN,UAAU,eAA3B,UACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAD,oBAA+B2G,EAA/B,cACZtG,WAAYD,IAAIJ,EAAD,oBAA+B2G,EAA/B,eAAoD,IACnEnK,MAAM,qBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAD,oBAAwB0G,EAAxB,eAA6C,GACvD5J,SAAU,SAACC,GAAD,OAAOkD,EAAa,aAAD,OAAcyG,EAAd,aAAgC3J,EAAEC,OAAOH,QACtEiJ,OAAQ,kBAAMD,EAAiB,aAAD,OAAca,EAAd,eAC9BpH,GAAE,oBAAeoH,EAAf,eAEN,cAACpK,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAD,oBAA+B2G,EAA/B,cACZtG,WAAYD,IAAIJ,EAAD,oBAA+B2G,EAA/B,eAAoD,IACnEnK,MAAM,qBACN8D,KAAK,SACLxD,MAAOsD,IAAIH,EAAD,oBAAwB0G,EAAxB,eAA6C,GACvD5J,SAAU,SAACC,GAAD,OAAOkD,EAAa,aAAD,OAAcyG,EAAd,aAAgC3J,EAAEC,OAAOH,QACtEiJ,OAAQ,kBAAMD,EAAiB,aAAD,OAAca,EAAd,eAC9BpH,GAAE,oBAAeoH,EAAf,eAnBV,UAuBQ,cAACjE,EAAA,EAAD,CACIC,QAASvC,IAAIH,EAAD,oBAAwB0G,EAAxB,2BAAwD,EACpE5J,SAAU,SAACC,GAAD,OAAOkD,EAAa,aAAD,OAAcyG,EAAd,wBAA2C3J,EAAEC,OAAO0F,YAGzF,eAAC2C,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,kBAtCpD,SAACiD,GACzB,IAAMkI,EAAexH,EAAS4G,UAAU3L,QAAO,SAACwM,GAAD,OAAQA,EAAGnI,KAAOA,KACjEW,EAAa,YAAauH,GAoCwDE,CAAoBH,EAAGjI,KAA7F,UACI,sBAAMhG,UAAU,wBAAhB,4BACA,cAAC,KAAD,CAAYA,UAAU,+BA9BpBiO,EAAGjI,QAsCrB,eAAC,EAAD,CACIvB,OAAO,yBACPT,QAAS,CACL,sDACA,+CAJR,UAOI,oBAAGhE,UAAU,gBAAb,UACI,uDADJ,6GAIA,gCACI,sBAAKA,UAAW,YAAhB,UACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,UAC9BK,WAAYD,IAAIJ,EAAiB,WAAa,IAC9CxD,MAAM,SACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,WAAa,GAClClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,SAAUlD,EAAEC,OAAOH,QACjDiJ,OAAQ,kBAAMD,EAAiB,WAC/BvG,GAAG,WAEP,cAAChD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,UAC9BK,WAAYD,IAAIJ,EAAiB,WAAa,IAC9CxD,MAAM,SACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,WAAa,GAClClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,SAAUlD,EAAEC,OAAOH,QACjDiJ,OAAQ,kBAAMD,EAAiB,WAC/BvG,GAAG,WAEP,cAAChD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,oBAC9BK,WAAYD,IAAIJ,EAAiB,qBAAuB,IACxDxD,MAAM,mBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,qBAAuB,GAC5ClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,mBAAoBlD,EAAEC,OAAOH,QAC3DiJ,OAAQ,kBAAMD,EAAiB,qBAC/BvG,GAAG,qBAEP,cAAChD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,oBAC9BK,WAAYD,IAAIJ,EAAiB,qBAAuB,IACxDxD,MAAM,mBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,qBAAuB,GAC5ClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,mBAAoBlD,EAAEC,OAAOH,QAC3DiJ,OAAQ,kBAAMD,EAAiB,qBAC/BvG,GAAG,wBAGX,gCACI,eAAC+F,GAAA,EAAD,CACI/L,UAAU,cACVgM,QAAQ,YACRjJ,QAAS,kBAjHJ,WACrB,IAAMmL,EAAexH,EAAS4G,UAAT,YAAyB5G,EAAS4G,WAAa,GACpEY,EAAa5M,KAAK,CAAE0E,GAAI8H,IACxBC,EAAUD,EAAS,GACnBnH,EAAa,YAAauH,GA6GKG,IACfrI,GAAI,wBAJR,UAMI,sBAAMhG,UAAU,wBAAhB,6BACA,cAAC,KAAD,CAASA,UAAU,6BAEvB,sBAAMsO,MAAO,CAAEC,WAAY,IAA3B,sCAEI,cAACpF,EAAA,EAAD,CACIC,QAASvC,IAAIH,EAAD,2BAAuC,EACnDlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,wBAAyBlD,EAAEC,OAAO0F,eAI5E,qBAAKpJ,UAAW,uBAAhB,SAAyCgO,IACzC,qBAAKhO,UAAW,gBAAhB,SAAkC6G,IAAIJ,EAAiB,eACvD,sBAAKzG,UAAW,YAAhB,UACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,kBAC9BK,WAAYD,IAAIJ,EAAiB,mBAAqB,IACtDxD,MAAM,iBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,mBAAqB,GAC1ClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,iBAAkBlD,EAAEC,OAAOH,QACzDiJ,OAAQ,kBAAMD,EAAiB,mBAC/BvG,GAAG,mBAEP,cAAChD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,kBAC9BK,WAAYD,IAAIJ,EAAiB,mBAAqB,IACtDxD,MAAM,iBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,mBAAqB,GAC1ClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,iBAAkBlD,EAAEC,OAAOH,QACzDiJ,OAAQ,kBAAMD,EAAiB,mBAC/BvG,GAAG,sBAGX,cAAC,GAAD,CACIS,gBAAiBA,EACjBC,SAAUA,EACVC,aAAcA,EACd4F,iBAAkBA,IAEtB,8BACI,cAACR,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WApKlD4I,KAEtBG,GAAc,IAkKN,2BAIJ,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,QAEpC,eAAC8F,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WC/OtCP,GAAQ,CACV,CAAEC,KAAM,YAAaC,QAAS,CAAC,WAAY,CAAEC,KAAM,WAAYuG,YAAa,KAC5E,CACIW,SAAU,YACVnH,QAAS,CAAC,WAAY,CAAEC,KAAM,SAAUuG,YAAa,MAsF9C2B,GAlFe,WAC1B,MAAiFhI,YAAmB,CAChGL,SACAD,gBAAiB,CAAEoH,UAAW,CAAC,OAF3B3I,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAAcgF,EAA1D,EAA0DA,mBAI1D,EAAoC9K,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KASIkC,EAAe,KAkCnB,OArBItH,EAAS4G,WAAa5G,EAAS4G,UAAUtL,OAAS,IAClDgM,EAAetH,EAAS4G,UAAU/K,KAAI,SAAC0L,EAAIb,GACvC,OACI,gCACI,cAACpK,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAD,oBAA+B2G,EAA/B,MACZtG,WAAYD,IAAIJ,EAAD,oBAA+B2G,EAA/B,OAA4C,IAC3DnK,MAAM,qBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAD,oBAAwB0G,EAAxB,OAAqC,GAC/C5J,SAAU,SAACC,GAAD,OAAOkD,EAAa,aAAD,OAAcyG,EAAd,KAAwB3J,EAAEC,OAAOH,UAElE,eAACwI,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,kBAjBpD,SAACqK,GACzB,IAAMc,EAAexH,EAAS4G,UAAU3L,QAAO,SAACwM,EAAIM,GAAL,OAAaA,IAAQrB,KACpEzG,EAAa,YAAauH,GAewDE,CAAoBhB,IAA1F,UACI,sBAAMpN,UAAU,wBAAhB,4BACA,cAAC,KAAD,CAAYA,UAAU,+BAXpBoN,OAmBlB,eAAC,EAAD,CAAqB3I,OAAO,iBAAiBT,QAAQ,+CAArD,UACI,oBAAGhE,UAAU,gBAAb,sDAC8C,IAC1C,cAAC,IAAD,CAAMA,UAAU,aAAa4D,GAAG,YAAhC,sBAEQ,IAJZ,UAOA,gCACI,8BACI,eAACmI,GAAA,EAAD,CAAQ/L,UAAU,cAAcgM,QAAQ,YAAYjJ,QAAS,kBA3CpD,WACrB,IAAMmL,EAAY,YAAOxH,EAAS4G,WAClCY,EAAa5M,KAAK,IAClBqF,EAAa,YAAauH,GAwCqDG,IAAnE,UACI,sBAAMrO,UAAU,wBAAhB,6BACA,cAAC,KAAD,CAASA,UAAU,+BAG3B,qBAAKA,UAAW,gBAAhB,SAAkCgO,IAClC,qBAAKhO,UAAW,gBAAhB,SAAkC6G,IAAIJ,EAAiB,eACvD,8BACI,cAACsF,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WA3DlD4I,KAEtBG,GAAc,IAyDN,2BAIJ,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,QAEpC,eAAC8F,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WCxFtCR,GAAkB,GAElBC,GAAQ,CACV,CACIC,KAAM,OACNC,QAAS,CACL,CACIC,KAAM,WACNoH,UAAW,SAAChH,GAAD,OAAcA,EAAQ,mBAGzCQ,eAAgB,CAAC,oBAErB,CACId,KAAM,OACNC,QAAS,CACL,CACIC,KAAM,WACNoI,SAAU,SAAChI,GAAD,OAAcA,EAAQ,kBAGxCQ,eAAgB,CAAC,oBAqEVyH,GAjEgB,WAC3B,MAA6DnI,YAAmB,CAC5EL,SACAD,qBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAK5C,OACI,eAAC,EAAD,CACIlC,OAAO,uBACPT,QAAS,sDAFb,UAII,oBAAGhE,UAAU,gBAAb,gEACuD,0CADvD,kFAEuD,yCAFvD,6BAIA,gCACI,sBAAKA,UAAW,qBAAhB,UACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,IAC5CxD,MAAM,OACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,SAAW,GAChClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,OAAQlD,EAAEC,OAAOH,UAEnD,cAACyF,EAAA,EAAD,CAAWhJ,UAAW,kBAAtB,SACI,cAACiJ,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIC,QAASvC,IAAIH,EAAU,qBAAsB,EAC7ClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,kBAAmBlD,EAAEC,OAAO0F,YAGlEnG,MAAM,2BAIlB,sBAAKjD,UAAW,qBAAhB,UACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,IAC5CxD,MAAM,OACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,SAAW,GAChClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,OAAQlD,EAAEC,OAAOH,UAEnD,cAACyF,EAAA,EAAD,CAAWhJ,UAAW,kBAAtB,SACI,cAACiJ,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIC,QAASvC,IAAIH,EAAU,oBAAqB,EAC5ClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,iBAAkBlD,EAAEC,OAAO0F,YAGjEnG,MAAM,0BAIlB,cAAC,EAAD,CAAkB0B,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,YCvF1CD,GAAkB,CACpBiB,IAAK,KACLyF,KAAM,MAGJzG,GAAQ,CACV,CAAEC,KAAM,MAAOC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,QAASsI,MAAO,UACvE,CAAExI,KAAM,OAAQC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,QAASsI,MAAO,aAmD7DC,GAhDG,WACd,MAA6DrI,YAAmB,CAC5EL,SACAD,qBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAK5C,OACI,eAAC,EAAD,CAAqBlC,OAAO,QAAQT,QAAQ,gCAA5C,UACI,oBAAGhE,UAAU,gBAAb,UACI,sCADJ,uEACqF,IACjF,mBACIA,UAAU,iBACVsE,KAAM,oFACNZ,OAAO,SACPa,IAAI,aAJR,mBAFJ,OAYA,gCACI,cAACvB,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,OAC9BK,WAAYD,IAAIJ,EAAiB,QAAU,IAC3CxD,MAAM,MACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,QAAU,GAC/BlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,MAAOlD,EAAEC,OAAOH,UAElD,sBAAMvD,UAAU,YAAhB,8BAEJ,gCACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,IAC5CxD,MAAM,OACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,SAAW,GAChClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,OAAQlD,EAAEC,OAAOH,UAEnD,sBAAMvD,UAAU,YAAhB,mCAEJ,cAAC,EAAD,CAAkB2E,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,SC/CtCA,GAAQ,CACV,CACIqH,SAAU,YACVnH,QAAS,CAAC,WAAY,CAAEC,KAAM,SAAUuG,YAAa,KAEzD,CACIzG,KAAM,YACNC,QAAS,CAAC,WAAY,CAAEC,KAAM,WAAYuG,YAAa,IACvDc,UAAW,0BA0GJmB,GAtG+B,WAC1C,MAOItI,YAAmB,CACnBL,SACAD,gBAAiB,CAAEoH,UAAW,CAAC,KAC/B5B,kBAAkB,EAClBY,eAAe,EACfI,yBAAyB,IAXzB/H,EADJ,EACIA,QACA8B,EAFJ,EAEIA,gBACAC,EAHJ,EAGIA,SACAC,EAJJ,EAIIA,aACAgF,EALJ,EAKIA,mBACAY,EANJ,EAMIA,iBAQJ,EAAoC1L,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KASIkC,EAAe,KAoCnB,OAvBItH,EAAS4G,WAAa5G,EAAS4G,UAAUtL,OAAS,IAClDgM,EAAetH,EAAS4G,UAAU/K,KAAI,SAAC0L,EAAIb,GACvC,OACI,gCACI,cAACpK,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAD,oBAA+B2G,EAA/B,MACZtG,WAAYD,IAAIJ,EAAD,oBAA+B2G,EAA/B,OAA4C,IAC3DnK,MAAM,qBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAD,oBAAwB0G,EAAxB,OAAqC,GAC/C5J,SAAU,SAACC,GAAD,OAAOkD,EAAa,aAAD,OAAcyG,EAAd,KAAwB3J,EAAEC,OAAOH,QAC9DiJ,OAAQ,kBAAMD,EAAiB,aAAD,OAAca,EAAd,OAC9BpH,GAAE,oBAAeoH,EAAf,OAEN,eAACrB,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,kBAnBpD,SAACqK,GACzB,IAAMc,EAAexH,EAAS4G,UAAU3L,QAAO,SAACwM,EAAIM,GAAL,OAAaA,IAAQrB,KACpEzG,EAAa,YAAauH,GAiBwDE,CAAoBhB,IAA1F,UACI,sBAAMpN,UAAU,wBAAhB,4BACA,cAAC,KAAD,CAAYA,UAAU,+BAbpBoN,OAqBlB,eAAC,EAAD,CACI3I,OAAO,mCACPT,QAAQ,+DAFZ,UAII,oBAAGhE,UAAU,gBAAb,UACI,wDADJ,uIAEiE,yCAFjE,mFAGuD,4BAAI,oBAH3D,qDAI6B,yCAJ7B,6DAIuG,IACnG,8CALJ,oCAOA,gCACI,8BACI,eAAC+L,GAAA,EAAD,CACI/L,UAAU,cACVgM,QAAQ,YACRjJ,QAAS,kBAnDJ,WACrB,IAAMmL,EAAY,YAAOxH,EAAS4G,WAClCY,EAAa5M,KAAK,IAClBqF,EAAa,YAAauH,GAgDKG,IACfrI,GAAI,wBAJR,UAMI,sBAAMhG,UAAU,wBAAhB,6BACA,cAAC,KAAD,CAASA,UAAU,+BAG3B,qBAAKA,UAAW,gBAAhB,SAAkCgO,IAClC,qBAAKhO,UAAW,gBAAhB,SAAkC6G,IAAIJ,EAAiB,eACvD,8BACI,cAACsF,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WArElD4I,KAEtBG,GAAc,IAmEN,2BAIJ,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,QAEpC,eAAC8F,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WC1GtCyG,GAAiB,SAACzG,EAAU0G,GAC9B,OAAO1G,EAAS2G,uBAAyB3G,EAAS4G,UAAUF,GAAOG,oBAGjEpH,GAAQ,CACV,CACIqH,SAAU,YACVC,SAAU,CACN,CACIrH,KAAM,UACNC,QAAS,CAAC,WAAY,CAAEC,KAAM,SAAUuG,YAAa,KAEzD,CACIzG,KAAM,UACNC,QAAS,CACL,CACIC,KAAM,WACNoH,UAAWP,IAEf,CACI7G,KAAM,SACNuG,YAAa,EACba,UAAWP,MAIvB,CACI/G,KAAM,UACNC,QAAS,CAAC,YACVsH,UAAW,qBAGnBzG,eAAgB,CAAC,0BAErB,CACId,KAAM,YACNC,QAAS,CAAC,WAAY,CAAEC,KAAM,WAAYuG,YAAa,IACvDc,UAAW,0BAiJJoB,GA7IuB,WAClC,MAOIvI,YAAmB,CACnBL,SACAD,gBAAiB,CAAEoH,UAAW,CAAC,CAAEtH,GAAI,KACrC0F,kBAAkB,EAClBY,eAAe,EACfI,yBAAyB,IAXzB/H,EADJ,EACIA,QACA8B,EAFJ,EAEIA,gBACAC,EAHJ,EAGIA,SACAC,EAJJ,EAIIA,aACAgF,EALJ,EAKIA,mBACAY,EANJ,EAMIA,iBAQJ,EAA4B1L,mBAAS,GAArC,mBAAOiN,EAAP,KAAeC,EAAf,KACA,EAAoClN,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KASIkC,EAAe,KAmEnB,OArDItH,EAAS4G,WAAa5G,EAAS4G,UAAUtL,OAAS,IAClDgM,EAAetH,EAAS4G,UAAU/K,KAAI,SAAC0L,EAAIb,GACvC,OACI,sBAAiBpN,UAAU,eAA3B,UACI,cAACgD,EAAA,EAAD,CACIsL,MAAO,CAAEU,MAAO,KAChBpI,QAASC,IAAIJ,EAAD,oBAA+B2G,EAA/B,cACZtG,WAAYD,IAAIJ,EAAD,oBAA+B2G,EAA/B,eAAoD,IACnEnK,MAAM,qBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAD,oBAAwB0G,EAAxB,eAA6C,GACvD5J,SAAU,SAACC,GAAD,OAAOkD,EAAa,aAAD,OAAcyG,EAAd,aAAgC3J,EAAEC,OAAOH,QACtEiJ,OAAQ,kBAAMD,EAAiB,aAAD,OAAca,EAAd,eAC9BpH,GAAE,oBAAeoH,EAAf,eAEN,cAACpK,EAAA,EAAD,CACIsL,MAAO,CAAEU,MAAO,KAChBpI,QAASC,IAAIJ,EAAD,oBAA+B2G,EAA/B,cACZtG,WAAYD,IAAIJ,EAAD,oBAA+B2G,EAA/B,eAAoD,IACnEnK,MAAM,qBACN8D,KAAK,SACLxD,MAAOsD,IAAIH,EAAD,oBAAwB0G,EAAxB,eAA6C,GACvD5J,SAAU,SAACC,GAAD,OAAOkD,EAAa,aAAD,OAAcyG,EAAd,aAAgC3J,EAAEC,OAAOH,QACtEiJ,OAAQ,kBAAMD,EAAiB,aAAD,OAAca,EAAd,eAC9BpH,GAAE,oBAAeoH,EAAf,eArBV,UAyBQ,cAACjE,EAAA,EAAD,CACIC,QAASvC,IAAIH,EAAD,oBAAwB0G,EAAxB,2BAAwD,EACpE5J,SAAU,SAACC,GAAD,OAAOkD,EAAa,aAAD,OAAcyG,EAAd,wBAA2C3J,EAAEC,OAAO0F,YAGzF,cAACpG,EAAA,EAAD,CACIsL,MAAO,CAAEU,MAAO,KAChBpI,QAASC,IAAIJ,EAAD,oBAA+B2G,EAA/B,cACZtG,WAAYD,IAAIJ,EAAD,oBAA+B2G,EAA/B,eAAoD,IACnEnK,MAAM,WACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAD,oBAAwB0G,EAAxB,eAA6C,GACvD5J,SAAU,SAACC,GAAD,OAAOkD,EAAa,aAAD,OAAcyG,EAAd,aAAgC3J,EAAEC,OAAOH,QACtEiJ,OAAQ,kBAAMD,EAAiB,aAAD,OAAca,EAAd,eAC9BpH,GAAE,oBAAeoH,EAAf,wBAEN,eAACrB,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,kBAjDpD,SAACiD,GACzB,IAAMkI,EAAexH,EAAS4G,UAAU3L,QAAO,SAACwM,GAAD,OAAQA,EAAGnI,KAAOA,KACjEW,EAAa,YAAauH,GA+CwDE,CAAoBH,EAAGjI,KAA7F,UACI,sBAAMhG,UAAU,wBAAhB,4BACA,cAAC,KAAD,CAAYA,UAAU,+BA3CpBiO,EAAGjI,QAmDrB,eAAC,EAAD,CACIvB,OAAO,2BACPT,QAAQ,uDAFZ,UAII,oBAAGhE,UAAU,gBAAb,kFAC0E,IACtE,cAAC,IAAD,CAAMA,UAAU,aAAa4D,GAAG,YAAhC,sBAEQ,IAJZ,uEAKwE,yCALxE,WAOA,gCACI,gCACI,eAACmI,GAAA,EAAD,CACI/L,UAAU,cACVgM,QAAQ,YACRjJ,QAAS,kBAlFJ,WACrB,IAAMmL,EAAY,YAAOxH,EAAS4G,WAClCY,EAAa5M,KAAK,CAAE0E,GAAI8H,IACxBC,EAAUD,EAAS,GACnBnH,EAAa,YAAauH,GA8EKG,IACfrI,GAAI,wBAJR,UAMI,sBAAMhG,UAAU,wBAAhB,6BACA,cAAC,KAAD,CAASA,UAAU,6BAEvB,sBAAMsO,MAAO,CAAEC,WAAY,IAA3B,sCAEI,cAACpF,EAAA,EAAD,CACIC,QAASvC,IAAIH,EAAD,2BAAuC,EACnDlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,wBAAyBlD,EAAEC,OAAO0F,eAI5E,qBAAKpJ,UAAW,gBAAhB,SAAkCgO,IAClC,qBAAKhO,UAAW,gBAAhB,SAAkC6G,IAAIJ,EAAiB,eACvD,8BACI,cAACsF,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WA3GlD4I,KAEtBG,GAAc,IAyGN,2BAIJ,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,QAEpC,eAAC8F,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,W,oDCtLtCuI,I,OAAa,sCAEbC,GAAc,kCAsFLC,GApFM,WACjB,MAAkCtO,oBAAS,GAA3C,mBAAOuO,EAAP,KAAkBC,EAAlB,KACA,EAAoCxO,oBAAS,GAA7C,mBAAOyO,EAAP,KAAmBC,EAAnB,KAoBA,OACI,eAAC,EAAD,CAAqB9K,OAAO,eAA5B,UACI,oBAAGzE,UAAU,gBAAb,UACI,mBACIA,UAAU,iBACVsE,KAAM,uDACNZ,OAAO,SACPa,IAAI,aAJR,oCAOK,IART,OASS,IACL,mBACIvE,UAAU,iBACVsE,KAAM,4CACNZ,OAAO,SACPa,IAAI,aAJR,wBAOK,IAjBT,4EAoBA,qBAAKvE,UAAU,iBAAf,SACI,mBAAGsE,KAAM,uDAAwDZ,OAAO,SAASa,IAAI,aAArF,6BAKJ,qBAAKvE,UAAU,iBAAf,SACI,mBAAGsE,KAAM,iDAAkDZ,OAAO,SAASa,IAAI,aAA/E,8BAKJ,sBAAKvE,UAAU,oBAAf,UACI,cAACwP,GAAA,EAAD,CAAStD,KAAMkD,EAAWK,UAAU,MAAMvP,MAAM,UAAhD,SACI,eAAC6L,GAAA,EAAD,CAAQC,QAAQ,WAAWjJ,QAtDrB,WAClBwM,GAAc,GACdF,GAAa,GACbK,UAAUC,UAAUC,UAAUX,IAC9BY,YAAW,WACPR,GAAa,KACd,MAgDS,UACI,sBAAKrP,UAAU,aAAf,UACI,4BAjEH,gBAkEG,mBAAGA,UAAU,cAAb,SAA4BiP,QAEhC,sBAAMjP,UAAU,oBAAhB,SACKoP,EAAY,cAAC,KAAD,IAAsB,cAAC,KAAD,WAI/C,cAACI,GAAA,EAAD,CAAStD,KAAMoD,EAAYG,UAAU,SAASvP,MAAM,UAApD,SACI,eAAC6L,GAAA,EAAD,CAAQC,QAAQ,WAAWjJ,QAxDpB,WACnBsM,GAAa,GACbE,GAAc,GACdG,UAAUC,UAAUC,UAAUV,IAC9BW,YAAW,WACPN,GAAc,KACf,MAkDS,UACI,sBAAKvP,UAAU,aAAf,UACI,4BA1EF,iBA2EE,mBAAGA,UAAU,cAAb,SAA4BkP,QAEhC,sBAAMlP,UAAU,oBAAhB,SACKsP,EAAa,cAAC,KAAD,IAAsB,cAAC,KAAD,kBCLjDQ,I,OA/ED,SAAChM,GAkCX,OACI,eAAC,EAAD,CAAqBW,OAAO,QAA5B,UACI,sBAAKzE,UAAU,gBAAf,UACI,uDADJ,eAC8C,IAC1C,mBACIA,UAAU,iBACVsE,KAAM,wCACNZ,OAAO,SACPa,IAAI,aAJR,qBAFJ,KAUM,mDAVN,+BAU2D,6DAV3D,0BAWe,6DAXf,2BAW2E,IACvE,sBAAMvE,UAAU,aAAa+C,QAASe,EAAMiM,mBAA5C,mBAZJ,sBAeuB,6DAfvB,IAe4D,IACxD,cAAC,IAAD,CAAM/P,UAAU,aAAa4D,GAAG,uCAAhC,wBAIJ,qBAAK5D,UAAU,UAAf,SACI,+BAxDM,+MA0DV,sBAAKA,UAAU,gBAAf,UACI,mDADJ,iHAEoC,wCAFpC,oLAI0B,IACtB,cAAC,IAAD,CAAMA,UAAU,aAAa4D,GAAG,YAAhC,kBAEQ,IAPZ,0BAQ2B,mDAR3B,SAQ2D,IACvD,cAAC,IAAD,CAAM5D,UAAU,aAAa4D,GAAG,4BAAhC,wBAIJ,qBAAK5D,UAAU,UAAf,SACI,+BAhEE,+oBCDZkG,GAAkB,CAAEoH,UAAW,CAAC,GAAI,KAEpCnH,GAAQ,CACV,CAAEC,KAAM,OAAQC,QAAS,CAAC,CAAEC,KAAM,WAAYsH,cAAc,KAC5D,CAAExH,KAAM,OAAQC,QAAS,CAAC,CAAEC,KAAM,SAAUkF,QAAS,EAAGoC,cAAc,KACtE,CAAExH,KAAM,OAAQC,QAAS,CAAC,CAAEC,KAAM,SAAUkF,QAAS,EAAGoC,cAAc,KACtE,CAAExH,KAAM,OAAQC,QAAS,CAAC,CAAEC,KAAM,WAAYkF,QAAS,EAAGoC,cAAc,KACxE,CAAExH,KAAM,OAAQC,QAAS,CAAC,CAAEC,KAAM,OAAQsH,cAAc,KACxD,CAAExH,KAAM,OAAQC,QAAS,CAAC,CAAEC,KAAM,QAASsH,cAAc,KACzD,CAAExH,KAAM,OAAQC,QAAS,CAAC,CAAEC,KAAM,MAAOsH,cAAc,KACvD,CAAExH,KAAM,OAAQC,QAAS,CAAC,CAAEC,KAAM,OAAQsH,cAAc,KACxD,CAAExH,KAAM,OAAQC,QAAS,CAAC,CAAEC,KAAM,WAAYkF,QAAS,MAAOoC,cAAc,KAC5E,CAAExH,KAAM,QAASC,QAAS,CAAC,CAAEC,KAAM,QAASsI,MAAO,IAAKhB,cAAc,KACtE,CACIJ,SAAU,YACVnH,QAAS,CAAC,CAAEC,KAAM,SAAUsH,cAAc,MAmLnCoC,GA/KY,WACvB,MAA6DxJ,YAAmB,CAC5EL,SACAD,qBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAKxCqH,EAAe,KAkCnB,OArBItH,EAAS4G,WAAa5G,EAAS4G,UAAUtL,OAAS,IAClDgM,EAAetH,EAAS4G,UAAU/K,KAAI,SAAC0L,EAAIb,GACvC,OACI,gCACI,cAACpK,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAD,oBAA+B2G,EAA/B,MACZtG,WAAYD,IAAIJ,EAAD,oBAA+B2G,EAA/B,OAA4C,IAC3DnK,MAAM,SACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAD,oBAAwB0G,EAAxB,OAAqC,GAC/C5J,SAAU,SAACC,GAAD,OAAOkD,EAAa,aAAD,OAAcyG,EAAd,KAAwB3J,EAAEC,OAAOH,UAElE,eAACwI,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,kBAjBpD,SAACqK,GACzB,IAAMc,EAAexH,EAAS4G,UAAU3L,QAAO,SAACwM,EAAIM,GAAL,OAAaA,IAAQrB,KACpEzG,EAAa,YAAauH,GAewDE,CAAoBhB,IAA1F,UACI,sBAAMpN,UAAU,wBAAhB,4BACA,cAAC,KAAD,CAAYA,UAAU,+BAXpBoN,OAmBlB,eAAC,EAAD,CAAqB3I,OAAO,eAAeT,QAAQ,kDAAnD,UACI,oBAAGhE,UAAU,gBAAb,wBACe,uDADf,eACwD,0CADxD,KAC0E,qCAD1E,KACuF,6CAAoB,IAD3G,MAEO,4CAFP,+EAEsG,IAClG,6CAHJ,gCAKA,8BACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,IAC5CxD,MAAM,uBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,SAAW,GAChClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,OAAQlD,EAAEC,OAAOH,YAGvD,8BACI,cAACP,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,IAC5CxD,MAAM,qBACN8D,KAAK,SACLxD,MAAOsD,IAAIH,EAAU,SAAW,GAChClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,OAAQlD,EAAEC,OAAOH,YAGvD,8BACI,cAACP,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,IAC5CxD,MAAM,qBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,SAAW,GAChClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,OAAQlD,EAAEC,OAAOH,YAGvD,8BACI,cAACgF,EAAA,EAAD,CACImB,UAAQ,EACRnG,MAAOsD,IAAIH,EAAU,SAAW,GAChClD,SAAU,SAACgF,EAAOC,GACd9B,EAAa,OAAQ8B,IAEzBE,QAASA,GACTE,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,IAC5CxD,MAAM,+BAKtB,8BACI,cAACuH,GAAA,EAAD,CACIvH,MAAM,mBACNyH,YAAY,aACZnH,MAAOsD,IAAIH,EAAU,SAAW,KAChClD,SAAU,SAAC2D,GAAD,OAASR,EAAa,OAAQQ,IACxC0B,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,YAK5D,8BACI,cAACzD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,IAC5CxD,MAAM,oBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,SAAW,GAChClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,OAAQlD,EAAEC,OAAOH,YAGvD,8BACI,cAACP,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,IAC5CxD,MAAM,kBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,SAAW,GAChClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,OAAQlD,EAAEC,OAAOH,YAGvD,8BACI,cAACP,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,IAC5CxD,MAAM,mBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,SAAW,GAChClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,OAAQlD,EAAEC,OAAOH,YAGvD,8BACI,cAACP,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,IAC5CxD,MAAM,uBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,SAAW,GAChClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,OAAQlD,EAAEC,OAAOH,YAGvD,8BACI,cAACP,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,SAC9BK,WAAYD,IAAIJ,EAAiB,UAAY,IAC7CxD,MAAM,oBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,UAAY,GACjClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,QAASlD,EAAEC,OAAOH,YAGxD,8BACI,eAACwI,GAAA,EAAD,CAAQ/L,UAAU,cAAcgM,QAAQ,YAAYjJ,QAAS,kBAzJhD,WACrB,IAAMmL,EAAexH,EAAS4G,UAAT,YAAyB5G,EAAS4G,WAAa,GACpEY,EAAa5M,KAAK,IAClBqF,EAAa,YAAauH,GAsJiDG,IAAnE,UACI,sBAAMrO,UAAU,wBAAhB,6BACA,cAAC,KAAD,CAASA,UAAU,+BAG3B,qBAAKA,UAAW,gBAAhB,SAAkCgO,IAClC,qBAAKhO,UAAW,gBAAhB,SAAkC6G,IAAIJ,EAAiB,eAEvD,cAAC,EAAD,CAAkB9B,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,SC3LtC8J,I,OAA8B,SAACtC,GACjC,IAAMuC,EAAUC,SAASC,eAAezC,GACxC,GAAKuC,EAEE,CACH,IACMG,EADgBH,EAAQI,cACWA,cACzCD,EAAmBE,UAAUC,IAAI,mBACjCN,EAAQO,QACRZ,YAAW,WACPQ,EAAmBE,UAAUG,OAAO,qBACrC,UARHC,QAAQC,KAAR,8BAAoCjD,EAApC,0BAYFxH,GAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CACIF,KAAM,WACNC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,KAE5E,CAAEnF,KAAM,OAAQC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,WAAYkF,QAAS,KAC7E,CAAEpF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,UAuGjDuK,GApGmB,WAC9B,MAOIrK,YAAmB,CACnBL,SACAuF,kBAAkB,EAClBY,eAAe,EACfI,yBAAyB,EACzBoE,oBAAqBb,KAXrBtL,EADJ,EACIA,QACA8B,EAFJ,EAEIA,gBACAC,EAHJ,EAGIA,SACAC,EAJJ,EAIIA,aACAgF,EALJ,EAKIA,mBACAY,EANJ,EAMIA,iBAQJ,EAAoC1L,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KASA,OACI,eAAC,EAAD,CACIrH,OAAO,sBACPT,QAAQ,yDAFZ,UAII,oBAAGhE,UAAU,gBAAb,UACI,oDADJ,kGAIA,gCACI,sBAAKA,UAAW,YAAhB,UACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,YAC9BK,WAAYD,IAAIJ,EAAiB,aAAe,IAChDxD,MAAM,gBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,aAAe,GACpClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,aAEP,cAAChD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,YAC9BK,WAAYD,IAAIJ,EAAiB,aAAe,IAChDxD,MAAM,yBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,aAAe,GACpClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,aAEP,cAACuC,EAAA,EAAD,CACImB,UAAQ,EACRnG,MAAOsD,IAAIH,EAAU,SAAW,GAChClD,SAAU,SAACgF,EAAOC,GACd9B,EAAa,OAAQ8B,IAEzB+D,OAAQ,kBAAMD,EAAiB,SAC/B5D,QAASA,GACTE,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,IAC5CxD,MAAM,0BAGd+C,GAAG,SAEP,cAAChD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,YAC9BK,WAAYD,IAAIJ,EAAiB,aAAe,IAChDxD,MAAM,iBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,aAAe,GACpClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,gBAGX,8BACI,cAAC+F,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WAnElD4I,KAEtBG,GAAc,IAiEN,2BAIJ,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,QAEpC,eAAC8F,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WCzHtCP,GAAQ,CACV,CACIqH,SAAU,YACVnH,QAAS,CAAC,WAAY,CAAEC,KAAM,YAElC,CACIkH,SAAU,qBACVC,SAAU,CACN,CACIrH,KAAM,UACNC,QAAS,CAAC,WAAY,CAAEC,KAAM,eA+H/ByK,GAzHI,WACf,MAA6DvK,YAAmB,CAC5EL,SACAD,gBAAiB,CACboH,UAAW,CAAC,IAAK,KACjB0D,mBAAoB,CAChB,CAAEhL,GAAI,EAAGiL,QAAS,KAClB,CAAEjL,GAAI,EAAGiL,QAAS,SANtBtM,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAU5C,EAA4B9F,mBAAS,GAArC,mBAAOiN,EAAP,KAAeC,EAAf,KAEIC,EAAe,KAaftH,EAAS4G,WAAa5G,EAAS4G,UAAUtL,OAAS,IAClDgM,EAAetH,EAAS4G,UAAU/K,KAAI,SAAC0L,EAAIb,GACvC,OACI,gCACI,cAACpK,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAD,oBAA+B2G,EAA/B,MACZtG,WAAYD,IAAIJ,EAAD,oBAA+B2G,EAA/B,OAA4C,IAC3DnK,MAAM,SACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAD,oBAAwB0G,EAAxB,OAAqC,GAC/C5J,SAAU,SAACC,GAAD,OAAOkD,EAAa,aAAD,OAAcyG,EAAd,KAAwB3J,EAAEC,OAAOH,UAElE,eAACwI,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,kBAjBpD,SAACqK,GACzB,IAAMc,EAAexH,EAAS4G,UAAU3L,QAAO,SAACwM,EAAIM,GAAL,OAAaA,IAAQrB,KACpEzG,EAAa,YAAauH,GAewDE,CAAoBhB,IAA1F,UACI,sBAAMpN,UAAU,wBAAhB,4BACA,cAAC,KAAD,CAAYA,UAAU,+BAXpBoN,OAkBtB,IAYI8D,EAAwB,KA4B5B,OA1BIxK,EAASsK,oBAAsBtK,EAASsK,mBAAmBhP,OAAS,IACpEkP,EAAwBxK,EAASsK,mBAAmBzO,KAAI,SAAC0L,EAAIb,GACzD,OACI,gCACI,cAACpK,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAD,6BAAwC2G,EAAxC,cACZtG,WAAYD,IAAIJ,EAAD,6BAAwC2G,EAAxC,eAA6D,IAC5EnK,MAAM,gBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAD,6BAAiC0G,EAAjC,eAAsD,GAChE5J,SAAU,SAACC,GAAD,OAAOkD,EAAa,sBAAD,OAAuByG,EAAvB,aAAyC3J,EAAEC,OAAOH,QAC/EyC,GAAE,6BAAwBoH,EAAxB,eAEN,eAACrB,GAAA,EAAD,CACI/L,UAAU,iBACVgM,QAAQ,YACRjJ,QAAS,kBAvBK,SAACiD,GAC/B,IAAMmL,EAAwBzK,EAASsK,mBAAmBrP,QAAO,SAACwM,GAAD,OAAQA,EAAGnI,KAAOA,KACnFW,EAAa,qBAAsBwK,GAqBJC,CAA0BnD,EAAGjI,KAHhD,UAKI,sBAAMhG,UAAU,wBAAhB,4BACA,cAAC,KAAD,CAAYA,UAAU,+BAhBpBiO,EAAGjI,QAwBrB,eAAC,EAAD,CAAqBvB,OAAO,SAAST,QAAQ,iCAA7C,UACI,oBAAGhE,UAAU,gBAAb,UACI,uCADJ,+CAC8D,IAC1D,cAAC,IAAD,CAAMA,UAAU,aAAa4D,GAAG,YAAhC,sBAFJ,OAOA,gCACI,8BACI,eAACmI,GAAA,EAAD,CAAQ/L,UAAU,cAAcgM,QAAQ,YAAYjJ,QAAS,kBAnFpD,WACrB,IAAMmL,EAAY,YAAOxH,EAAS4G,WAClCY,EAAa5M,KAAK,IAClBqF,EAAa,YAAauH,GAgFqDG,IAAnE,UACI,sBAAMrO,UAAU,wBAAhB,6BACA,cAAC,KAAD,CAASA,UAAU,+BAG3B,qBAAKA,UAAW,gBAAhB,SAAkCgO,IAClC,qBAAKhO,UAAW,gBAAhB,SAAkC6G,IAAIJ,EAAiB,eAEvD,8BACI,eAACsF,GAAA,EAAD,CAAQ/L,UAAU,cAAcgM,QAAQ,YAAYjJ,QAAS,kBA5D9C,WAC3B,IAAMoO,EAAqB,YAAOzK,EAASsK,oBAC3CG,EAAsB7P,KAAK,CAAE0E,GAAI8H,IACjCC,EAAUD,EAAS,GACnBnH,EAAa,qBAAsBwK,GAwD4CE,IAAnE,UACI,sBAAMrR,UAAU,wBAAhB,6BACA,cAAC,KAAD,CAASA,UAAU,+BAG3B,qBAAKA,UAAW,gBAAhB,SAAkCkR,IAClC,qBAAKlR,UAAW,gBAAhB,SAAkC6G,IAAIJ,EAAiB,wBACvD,cAAC,EAAD,CAAkB9B,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,Y,oBCvI1CD,GAAkB,CACpBiB,KAAK,EACLyF,KAAM,KACNvF,gBAAiB,OAGflB,GAAQ,CACV,CAAEC,KAAM,MAAOC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,WAAYkF,SAAS,KAC5E,CACIpF,KAAM,OACNC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,WAAYkF,QAAS,SAAC9E,GAAD,OAAcA,EAAQ,mBACnFQ,eAAgB,CAAC,qBAqDVoK,GAjDM,WACjB,MAA6D9K,YAAmB,CAC5EL,SACAD,qBAFIvB,EAAR,EAAQA,QAAS8B,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,aAK5C,OACI,eAAC,EAAD,CAAqBlC,OAAO,WAAWT,QAAQ,mCAA/C,UACI,oBAAGhE,UAAU,gBAAb,UACI,yCADJ,mEAGA,8BACI,cAACgJ,EAAA,EAAD,CAAWhJ,UAAW,kBAAtB,SACI,cAACuR,GAAA,EAAD,CAAa3K,QAASC,IAAIJ,EAAiB,OAA3C,SACI,cAACwC,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIC,QAASvC,IAAIH,EAAU,SAAU,EACjClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,MAAOlD,EAAEC,OAAO0F,YAGtDnG,MAAO,cAACuO,GAAA,EAAD,UAAiB3K,IAAIJ,EAAiB,QAAU,cAKvE,sBAAKzG,UAAU,gBAAf,UACI,cAACgD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,QAC9BK,WAAYD,IAAIJ,EAAiB,SAAW,IAC5CxD,MAAM,OACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,SAAW,GAChClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,OAAQlD,EAAEC,OAAOH,UAEnD,cAACP,EAAA,EAAD,CACIhD,UAAU,sBACViD,MAAM,kBACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,mBACrBlD,SAAU,SAACC,GAAD,OAAOkD,EAAa,kBAAmBlD,EAAEC,OAAOH,aAGlE,cAAC,EAAD,CAAkBoB,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,SC7DtCA,GAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eAiG5BmL,GA9FU,WACrB,MAQIjL,YAAmB,CACnBL,SACAuF,kBAAkB,EAClBY,eAAe,EACfI,yBAAyB,IAXzB/H,EADJ,EACIA,QACA+B,EAFJ,EAEIA,SACAC,EAHJ,EAGIA,aACAgF,EAJJ,EAIIA,mBACAY,EALJ,EAKIA,iBACAmF,EANJ,EAMIA,SACAC,EAPJ,EAOIA,SAcJ,OACI,cAAC,EAAD,CACIlN,OAAO,2CACPT,QAAQ,0CAFZ,SAII,gCACI,sBAAKhE,UAAW2R,EAAS,aAAe,WAAxC,UACI,uBAAOC,QAAQ,WAAf,qBACA,uBACI7K,KAAK,OACLxD,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,aAEP,qBAAKhG,UAAU,YAAf,SAA4B2R,EAAS,aAAe,SAExD,sBAAK3R,UAAW2R,EAAS,aAAe,WAAxC,UACI,uBAAOC,QAAQ,WAAf,qBACA,uBACI7K,KAAK,OACLxD,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,aAEP,qBAAKhG,UAAU,YAAf,SAA4B2R,EAAS,aAAe,SAExD,sBAAK3R,UAAW2R,EAAS,WAAa,WAAtC,UACI,uBAAOC,QAAQ,SAAf,uBACA,uBACI7K,KAAK,SACLxD,MAAOmO,EAAS,WAAa,GAC7BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,SAAUlD,EAAEC,OAAOH,QACjDiJ,OAAQ,kBAAMD,EAAiB,WAC/BvG,GAAG,WAEP,qBAAKhG,UAAU,YAAf,SAA4B2R,EAAS,WAAa,SAEtD,sBAAK3R,UAAW2R,EAAS,cAAgB,WAAzC,UACI,uBAAOC,QAAQ,YAAf,0BACA,yBACI5L,GAAG,YACHwG,OAAQ,kBAAMD,EAAiB,cAC/BhJ,MAAOmO,EAAS,cAAgB,GAChClO,SAAU,SAACC,GAAD,OAAOkD,EAAa,YAAalD,EAAEC,OAAOH,QAJxD,UAMI,wBAAsBA,MAAO,GAA7B,SACK,IADQ,SAGZoF,GAAQpG,KAAI,SAACsP,GACV,OACI,wBAAiBtO,MAAOsO,EAAxB,SACKA,GADQA,SAMzB,qBAAK7R,UAAU,YAAf,SAA4B2R,EAAS,cAAgB,SAEzD,8BACI,wBAAQ3R,UAAU,4BAA4B+C,QAAS,WAlEzC4I,KAEtBmG,MAAMtQ,KAAKE,UAAUgF,KAgEb,2BAIJ,cAAC,EAAD,CAAkB/B,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,WC1F1CA,GAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eAyG5ByL,GAtGS,WACpB,MAQIvL,YAAmB,CACnBL,SACAuF,kBAAkB,EAClBY,eAAe,EACfI,yBAAyB,IAXzB/H,EADJ,EACIA,QACA+B,EAFJ,EAEIA,SACAC,EAHJ,EAGIA,aACAgF,EAJJ,EAIIA,mBACAY,EALJ,EAKIA,iBACAmF,EANJ,EAMIA,SACAC,EAPJ,EAOIA,SAOJ,EAAoC9Q,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KASA,OACI,eAAC,EAAD,CACIrH,OAAO,oCACPT,QAAQ,yCAFZ,UAII,gCACI,8BACI,cAAChB,EAAA,EAAD,CACI4D,QAAS+K,EAAS,YAClB7K,WAAY6K,EAAS,aAAe,IACpC1O,MAAM,QACN8D,KAAK,OACLxD,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAAS+K,EAAS,YAClB7K,WAAY6K,EAAS,aAAe,IACpC1O,MAAM,QACN8D,KAAK,OACLxD,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAAS+K,EAAS,UAClB7K,WAAY6K,EAAS,WAAa,IAClC1O,MAAM,UACN8D,KAAK,SACLxD,MAAOmO,EAAS,WAAa,GAC7BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,SAAUlD,EAAEC,OAAOH,QACjDiJ,OAAQ,kBAAMD,EAAiB,WAC/BvG,GAAG,aAGX,8BACI,cAACuC,EAAA,EAAD,CACIvC,GAAG,YACHwG,OAAQ,kBAAMD,EAAiB,cAC/B7C,UAAQ,EACRnG,MAAOmO,EAAS,cAAgB,GAChClO,SAAU,SAACgF,EAAOC,GACd9B,EAAa,YAAa8B,IAE9BE,QAASA,GACTE,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAAS+K,EAAS,aAClB7K,WAAY6K,EAAS,cAAgB,IACrC1O,MAAM,qBAKtB,8BACI,cAAC8I,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WArElD4I,KAEtBG,GAAc,IAmEN,2BAIJ,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,QAEpC,eAAC8F,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,W,iDCrGtCP,GAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eAGrC0L,GAAiC,SAACrE,GACpC,IAAMuC,EAAUC,SAASC,eAAezC,GACxC,GAAKuC,EAID,GAA8B,UADdA,EAAQ+B,QACZlQ,cACRmO,EAAQO,aAGR,IADA,IAAIyB,EAAahC,EAAQiC,qBAAqB,SACrCjQ,EAAI,EAAGA,EAAIgQ,EAAWlQ,SAAUE,EAAG,CAGxC,YAFgBgQ,EAAWhQ,GACjBuO,aATlBE,QAAQC,KAAR,8BAAoCjD,EAApC,yBAoHOyE,GApGW,WACtB,MAQI5L,YAAmB,CACnBL,SACAuF,kBAAkB,EAClBY,eAAe,EACfI,yBAAyB,EACzBoE,oBAAqBkB,KAZrBrN,EADJ,EACIA,QACA+B,EAFJ,EAEIA,SACAC,EAHJ,EAGIA,aACAgF,EAJJ,EAIIA,mBACAY,EALJ,EAKIA,iBACAmF,EANJ,EAMIA,SACAC,EAPJ,EAOIA,SAQJ,EAAoC9Q,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KASA,OACI,eAAC,EAAD,CACIrH,OAAO,2CACPT,QAAQ,2CAFZ,UAII,gCACI,sBAAKhE,UAAU,eAAf,UACI,uBAAO4R,QAAQ,WAAf,mBACA,cAAC,KAAD,CACI5R,UAAW2R,EAAS,aAAe,YACnCpO,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,aAEP,uBAAOhG,UAAU,UAAjB,SAA4B2R,EAAS,aAAe,SAExD,sBAAK3R,UAAU,eAAf,UACI,uBAAO4R,QAAQ,WAAf,mBACA,cAAC,KAAD,CACI5R,UAAW2R,EAAS,aAAe,YACnCpO,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,aAEP,uBAAOhG,UAAU,UAAjB,SAA4B2R,EAAS,aAAe,SAExD,sBAAK3R,UAAU,eAAf,UACI,uBAAO4R,QAAQ,SAAf,qBACA,cAAC,KAAD,CACI5R,UAAW2R,EAAS,WAAa,YACjCpO,MAAOmO,EAAS,WAAa,GAC7BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,SAAUlD,EAAEF,QAC1CiJ,OAAQ,kBAAMD,EAAiB,WAC/BvG,GAAG,WAEP,uBAAOhG,UAAU,UAAjB,SAA4B2R,EAAS,WAAa,SAEtD,sBAAK3R,UAAU,eAAf,UACI,uBAAO4R,QAAQ,YAAf,wBACA,cAAC,KAAD,CACI5R,UAAW2R,EAAS,cAAgB,YACpCpO,MAAOmO,EAAS,cAAgB,GAChC/I,QAASA,GACTnF,SAAU,SAACC,GAAD,OAAOkD,EAAa,YAAalD,EAAEF,QAC7CiJ,OAAQ,kBAAMD,EAAiB,cAC/BvG,GAAG,cAEP,uBAAOhG,UAAU,UAAjB,SAA4B2R,EAAS,cAAgB,SAEzD,8BACI,cAAC,KAAD,CAAQ3R,UAAU,iBAAiB+C,QAAS,WA1D9B4I,KAEtBG,GAAc,IAwDN,2BAIJ,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,QAEpC,cAAC,KAAD,CACI1B,OAAO,sBACP4N,QAASxG,EACTyG,OAAK,EACLhE,MAAO,CAAEU,MAAO,QAChBuD,OAAQ,kBAAMzG,GAAc,IAC5B0G,YAAa,kBAAM1G,GAAc,IACjC2G,WAAW,EACXC,WAAW,EARf,SAUI,cAAC,GAAD,CAAkBhM,SAAUA,U,mBCzHtCP,I,OAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,gBAsH5BqM,GAnHe,WAC1B,MAQInM,YAAmB,CACnBL,SACAuF,kBAAkB,EAClBY,eAAe,EACfI,yBAAyB,IAXzB/H,EADJ,EACIA,QACA+B,EAFJ,EAEIA,SACAC,EAHJ,EAGIA,aACAgF,EAJJ,EAIIA,mBACAY,EALJ,EAKIA,iBACAmF,EANJ,EAMIA,SACAC,EAPJ,EAOIA,SAOJ,EAAoC9Q,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KASA,OACI,eAAC,EAAD,CACIrH,OAAO,gDACPT,QAAQ,+CAFZ,UAII,eAAC4O,GAAA,EAAD,CAAM5S,UAAU,oBAAhB,UACI,eAAC4S,GAAA,EAAKC,MAAN,CAAYC,UAAU,WAAtB,UACI,cAACF,GAAA,EAAKG,MAAN,oBACA,cAACH,GAAA,EAAKI,QAAN,CACI7N,YAAY,QACZ5B,MAAOmO,EAAS,aAAe,GAC/BlF,OAAQ,kBAAMD,EAAiB,aAC/B/I,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnD0P,YAAatB,EAAS,cAEzBA,EAAS,YACN,cAACiB,GAAA,EAAKI,QAAQE,SAAd,CAAuBnM,KAAK,UAA5B,SAAuC4K,EAAS,aAAe,MAE/D,qBAAK3R,UAAW,mCAGxB,eAAC4S,GAAA,EAAKC,MAAN,CAAYC,UAAU,WAAtB,UACI,cAACF,GAAA,EAAKG,MAAN,oBACA,cAACH,GAAA,EAAKI,QAAN,CACI7N,YAAY,QACZ5B,MAAOmO,EAAS,aAAe,GAC/BlF,OAAQ,kBAAMD,EAAiB,aAC/B/I,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnD0P,YAAatB,EAAS,cAEzBA,EAAS,YACN,cAACiB,GAAA,EAAKI,QAAQE,SAAd,CAAuBnM,KAAK,UAA5B,SAAuC4K,EAAS,aAAe,MAE/D,qBAAK3R,UAAW,mCAGxB,eAAC4S,GAAA,EAAKC,MAAN,CAAYC,UAAU,SAAtB,UACI,cAACF,GAAA,EAAKG,MAAN,sBACA,cAACH,GAAA,EAAKI,QAAN,CACIjM,KAAK,SACL5B,YAAY,UACZ5B,MAAOmO,EAAS,WAAa,GAC7BlF,OAAQ,kBAAMD,EAAiB,WAC/B/I,SAAU,SAACC,GAAD,OAAOkD,EAAa,SAAUlD,EAAEC,OAAOH,QACjD0P,YAAatB,EAAS,YAEzBA,EAAS,UACN,cAACiB,GAAA,EAAKI,QAAQE,SAAd,CAAuBnM,KAAK,UAA5B,SAAuC4K,EAAS,WAAa,MAE7D,qBAAK3R,UAAW,mCAGxB,eAAC4S,GAAA,EAAKC,MAAN,CAAYC,UAAU,YAAtB,UACI,cAACF,GAAA,EAAKG,MAAN,yBACA,eAACH,GAAA,EAAKO,OAAN,CACI5P,MAAOmO,EAAS,cAAgB,GAChClF,OAAQ,kBAAMD,EAAiB,cAC/B/I,SAAU,SAACC,GAAD,OAAOkD,EAAa,YAAalD,EAAEC,OAAOH,QACpD0P,YAAatB,EAAS,aAJ1B,UAMI,wBAAsBpO,MAAO,GAA7B,SACK,IADQ,SAGZoF,GAAQpG,KAAI,SAACsP,GACV,OACI,wBAAiBtO,MAAOsO,EAAxB,SACKA,GADQA,SAMxBF,EAAS,aACN,cAACiB,GAAA,EAAKI,QAAQE,SAAd,CAAuBnM,KAAK,UAA5B,SAAuC4K,EAAS,cAAgB,MAEhE,qBAAK3R,UAAW,mCAGxB,cAAC,KAAD,CAAQA,UAAU,iBAAiBgM,QAAQ,UAAUjJ,QAAS,WAnF5C4I,KAEtBG,GAAc,IAiFV,oBAGA,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,QAEpC,eAAC8F,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WCpHtCP,GAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eAmI5B8M,GAhIY,WACvB,MAQI5M,YAAmB,CACnBL,SACAuG,yBAAyB,IATzB/H,EADJ,EACIA,QACA8B,EAFJ,EAEIA,gBACAC,EAHJ,EAGIA,SACAC,EAJJ,EAIIA,aACA0M,EALJ,EAKIA,YACA1H,EANJ,EAMIA,mBACAY,EAPJ,EAOIA,iBAKJ,EAAoC1L,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KACA,EAA8CjL,mBAAS,GAAvD,mBAAOyS,EAAP,KAAwBC,EAAxB,KAEArS,qBAAU,WACN2O,YAAW,WACPwD,EAAY,CACRnI,SAAU,KACVC,SAAU,KACVqI,OAAQ,EACRC,UAAW,CAAC,SAAU,mBAE1BF,EAAmB,KACpB,OACJ,IAEHrS,qBAAU,WACN2O,YAAW,WACPwD,EAAY,CACRnI,SAAU,KACVsI,OAAQ,EACRC,UAAW,CAAC,YAEhBF,EAAmB,KACpB,OACJ,IASH,OACI,eAAC,EAAD,CAAqB9O,OAAO,cAAcT,QAAQ,4CAAlD,UACI,gCACyB,IAApBsP,EACK,+BACoB,IAApBA,EACA,gCACA,+BACN,uBACA,uBACA,8BACI,cAACtQ,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,YAC9BK,WAAYD,IAAIJ,EAAiB,aAAe,IAChDxD,MAAM,QACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,aAAe,GACpClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,YAC9BK,WAAYD,IAAIJ,EAAiB,aAAe,IAChDxD,MAAM,QACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,aAAe,GACpClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,UAC9BK,WAAYD,IAAIJ,EAAiB,WAAa,IAC9CxD,MAAM,UACN8D,KAAK,SACLxD,MAAOsD,IAAIH,EAAU,WAAa,GAClClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,SAAUlD,EAAEC,OAAOH,QACjDiJ,OAAQ,kBAAMD,EAAiB,WAC/BvG,GAAG,aAGX,8BACI,cAACuC,EAAA,EAAD,CACIvC,GAAG,YACHwG,OAAQ,kBAAMD,EAAiB,cAC/B7C,UAAQ,EACRnG,MAAOsD,IAAIH,EAAU,cAAgB,GACrClD,SAAU,SAACgF,EAAOC,GACd9B,EAAa,YAAa8B,IAE9BE,QAASA,GACTE,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAASC,IAAIJ,EAAiB,aAC9BK,WAAYD,IAAIJ,EAAiB,cAAgB,IACjDxD,MAAM,qBAKtB,8BACI,cAAC8I,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WAzElD4I,KAEtBG,GAAc,IAuEN,2BAIJ,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,QAEpC,eAAC8F,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WCjItCP,GAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eA+H5BoN,GA5Ha,WACxB,MAOIlN,YAAmB,CACnBL,SACAuG,yBAAyB,IARzB/H,EADJ,EACIA,QACA8B,EAFJ,EAEIA,gBACAC,EAHJ,EAGIA,SACAC,EAJJ,EAIIA,aACAgF,EALJ,EAKIA,mBACAY,EANJ,EAMIA,iBAKJ,EAAoC1L,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KACA,EAA8CjL,mBAAS,GAAvD,mBAAOyS,EAAP,KAAwBC,EAAxB,KAEArS,qBAAU,WACN2O,YAAW,WACPlJ,EAAa,WAAY,OACzBA,EAAa,WAAY,OACzBA,EAAa,SAAU,GACvBA,EAAa,YAAa,CAAC,SAAU,kBACrC4M,EAAmB,KACpB,OACJ,IAEHrS,qBAAU,WACN2O,YAAW,WACPlJ,EAAa,WAAY,OACzBA,EAAa,WAAY,MACzBA,EAAa,SAAU,GACvBA,EAAa,YAAa,CAAC,WAC3B4M,EAAmB,KACpB,OACJ,IASH,OACI,eAAC,EAAD,CAAqB9O,OAAO,eAAeT,QAAQ,6CAAnD,UACI,gCACyB,IAApBsP,EACK,+BACoB,IAApBA,EACA,gCACA,+BACN,uBACA,uBACA,8BACI,cAACtQ,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,YAC9BK,WAAYD,IAAIJ,EAAiB,aAAe,IAChDxD,MAAM,QACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,aAAe,GACpClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,YAC9BK,WAAYD,IAAIJ,EAAiB,aAAe,IAChDxD,MAAM,QACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,aAAe,GACpClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,UAC9BK,WAAYD,IAAIJ,EAAiB,WAAa,IAC9CxD,MAAM,UACN8D,KAAK,SACLxD,MAAOsD,IAAIH,EAAU,WAAa,GAClClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,SAAUlD,EAAEC,OAAOH,QACjDiJ,OAAQ,kBAAMD,EAAiB,WAC/BvG,GAAG,aAGX,8BACI,cAACuC,EAAA,EAAD,CACIvC,GAAG,YACHwG,OAAQ,kBAAMD,EAAiB,cAC/B7C,UAAQ,EACRnG,MAAOsD,IAAIH,EAAU,cAAgB,GACrClD,SAAU,SAACgF,EAAOC,GACd9B,EAAa,YAAa8B,IAE9BE,QAASA,GACTE,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAASC,IAAIJ,EAAiB,aAC9BK,WAAYD,IAAIJ,EAAiB,cAAgB,IACjDxD,MAAM,qBAKtB,8BACI,cAAC8I,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WAzElD4I,KAEtBG,GAAc,IAuEN,2BAIJ,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcO,QAEpC,eAAC8F,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WC9HtCP,GAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eAGrCqN,GAAS,CACX,CAAEvN,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eAGrCsN,GAAS,CACX,CAAExN,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eA6I5BuN,GA1IoB,WAC/B,MASIrN,YAAmB,CACnBL,SACAuG,yBAAyB,IAVzB/H,EADJ,EACIA,QACA+B,EAFJ,EAEIA,SACAC,EAHJ,EAGIA,aACAmN,EAJJ,EAIIA,oBACAnI,EALJ,EAKIA,mBACAY,EANJ,EAMIA,iBACAmF,EAPJ,EAOIA,SACAC,EARJ,EAQIA,SAKJ,EAAoC9Q,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KACA,EAAwCjL,mBAASsF,IAAjD,mBAAOP,EAAP,KAAqB4B,EAArB,KACA,EAA8C3G,mBAAS,GAAvD,mBAAOyS,EAAP,KAAwBC,EAAxB,KAEArS,qBAAU,WACN2O,YAAW,WACPiE,EACI,CACI5I,SAAU,KACVC,SAAU,KACVqI,OAAQ,EACRC,UAAW,CAAC,SAAU,kBAE1BE,IAEJJ,EAAmB,GACnB/L,EAAgBmM,MACjB,OACJ,IAEHzS,qBAAU,WACN2O,YAAW,WACPiE,EACI,CACI5I,SAAU,KACVsI,OAAQ,EACRC,UAAW,CAAC,WAEhBG,IAEJL,EAAmB,GACnB/L,EAAgBoM,MACjB,OACJ,IASH,OACI,eAAC,EAAD,CAAqBnP,OAAO,sBAAsBT,QAAQ,oDAA1D,UACI,gCACyB,IAApBsP,EACK,+BACoB,IAApBA,EACA,gCACA,+BACN,uBACA,uBACA,8BACI,cAACtQ,EAAA,EAAD,CACI4D,QAAS+K,EAAS,YAClB7K,WAAY6K,EAAS,aAAe,IACpC1O,MAAM,QACN8D,KAAK,OACLxD,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAAS+K,EAAS,YAClB7K,WAAY6K,EAAS,aAAe,IACpC1O,MAAM,QACN8D,KAAK,OACLxD,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAAS+K,EAAS,UAClB7K,WAAY6K,EAAS,WAAa,IAClC1O,MAAM,UACN8D,KAAK,SACLxD,MAAOmO,EAAS,WAAa,GAC7BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,SAAUlD,EAAEC,OAAOH,QACjDiJ,OAAQ,kBAAMD,EAAiB,WAC/BvG,GAAG,aAGX,8BACI,cAACuC,EAAA,EAAD,CACIvC,GAAG,YACHwG,OAAQ,kBAAMD,EAAiB,cAC/B7C,UAAQ,EACRnG,MAAOmO,EAAS,cAAgB,GAChClO,SAAU,SAACgF,EAAOC,GACd9B,EAAa,YAAa8B,IAE9BE,QAASA,GACTE,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAAS+K,EAAS,aAClB7K,WAAY6K,EAAS,cAAgB,IACrC1O,MAAM,qBAKtB,8BACI,cAAC8I,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WAzElD4I,KAEtBG,GAAc,IAuEN,2BAIJ,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcA,OAEpC,eAACqG,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WCzJtCP,GAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eAGrCqN,GAAS,CACX,CAAEvN,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eAGrCsN,GAAS,CACX,CAAExN,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eA8I5ByN,GA3IS,WACpB,MASIvN,YAAmB,CACnBL,SACAuG,yBAAyB,IAVzB/H,EADJ,EACIA,QACA+B,EAFJ,EAEIA,SACAC,EAHJ,EAGIA,aACAmN,EAJJ,EAIIA,oBACAnI,EALJ,EAKIA,mBACAY,EANJ,EAMIA,iBACAmF,EAPJ,EAOIA,SACAC,EARJ,EAQIA,SAKJ,EAAoC9Q,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KACA,EAAwCjL,mBAASsF,IAAjD,mBAAOP,EAAP,KAAqB4B,EAArB,KACA,EAA8C3G,mBAAS,GAAvD,mBAAOyS,EAAP,KAAwBC,EAAxB,KAEArS,qBAAU,WACN2O,YAAW,WACPiE,EACI,CACI5I,SAAU,KACVC,SAAU,KACVqI,OAAQ,EACRC,UAAW,CAAC,SAAU,kBAE1BE,IAEJJ,EAAmB,GACnB/L,EAAgBmM,MACjB,OACJ,IAEHzS,qBAAU,WACN2O,YAAW,WACPiE,EACI,CACI5I,SAAU,KACVsI,OAAQ,EACRC,UAAW,CAAC,WAEhBG,IAEJL,EAAmB,GACnB/L,EAAgBoM,MACjB,OACJ,IASH,OACI,eAAC,EAAD,CAAqBnP,OAAO,WAAWT,QAAQ,yCAA/C,UACI,gCACyB,IAApBsP,EACK,+BACoB,IAApBA,EACA,gCACA,+BACN,uBACA,uBACA,8BACI,cAACtQ,EAAA,EAAD,CACI4D,QAAS+K,EAAS,YAClB7K,WAAY6K,EAAS,aAAe,IACpC1O,MAAM,QACN8D,KAAK,OACLxD,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAAS+K,EAAS,YAClB7K,WAAY6K,EAAS,aAAe,IACpC1O,MAAM,QACN8D,KAAK,OACLxD,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAAS+K,EAAS,UAClB7K,WAAY6K,EAAS,WAAa,IAClC1O,MAAM,UACN8D,KAAK,SACLxD,MAAOmO,EAAS,WAAa,GAC7BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,SAAUlD,EAAEC,OAAOH,QACjDiJ,OAAQ,kBAAMD,EAAiB,WAC/BvG,GAAG,aAGX,8BACI,cAACuC,EAAA,EAAD,CACIvC,GAAG,YACHwG,OAAQ,kBAAMD,EAAiB,cAC/B7C,UAAQ,EACRnG,MAAOmO,EAAS,cAAgB,GAChClO,SAAU,SAACgF,EAAOC,GACd9B,EAAa,YAAa8B,IAE9BE,QAASA,GACTE,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAAS+K,EAAS,aAClB7K,WAAY6K,EAAS,cAAgB,IACrC1O,MAAM,qBAKtB,8BACI,cAAC8I,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WAzElD4I,KAEtBG,GAAc,IAuEN,2BAIJ,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcc,EAAUjC,OAAO,qBACjD,cAAC,EAAD,CAAkBmB,aAAcA,OAEpC,eAACqG,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WC9I7BsN,I,OArBC,SAAC,GAAqB,IAC5BC,EAD2B,EAAlBC,YACoB3R,KAAI,SAAC4R,EAAK/G,GACzC,IAAMgH,EAAWD,EAAIlR,MACfoR,EAAUF,EAAIG,KACdC,EAAYJ,EAAIK,QAAU,EAE1BC,EAAkB,CAAEC,YADZ,GAAKH,EAAY,GACgB,MAI/C,OAHIA,IACAE,EAAgBE,UAAY,oBAG5B,sBAAiBrG,MAAOmG,EAAiBzU,UAAU,UAAnD,UACI,qBAAKA,UAAW,WAAhB,SAA6BoU,IAC7B,qBAAKpU,UAAW,UAAhB,SAA4BqU,MAFtBjH,MAOlB,OAAO,qBAAKpN,UAAW,iBAAhB,SAAmCiU,MCC/BW,I,OAfO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACrB,OACI,qBAAK7U,UAAW,iBAAhB,SACI,eAAC6F,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAkBC,WAAY,cAAC,IAAD,IAAoB,gBAAc,kBAAkBC,GAAG,iBAArF,SACI,sBAAMhG,UAAW,mBAAjB,mCAEJ,cAACiG,EAAA,EAAD,UACI,sBAAMjG,UAAW,cAAjB,SAAiC6U,aCC/CC,GAA4B,CAC9B,CACI7R,MACI,gDACkB,IACd,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,aAAhC,8BAKR0Q,KAAM,wDAEV,CACIrR,MAAO,2BACPqR,KAAM,4DAEV,CACIrR,MACI,6DAC+B,IAC3B,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,+BAAhC,4BAKR0Q,KAAM,gFAEV,CACIrR,MACI,0DAC4B,IACxB,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,4BAAhC,4BAKR0Q,KAAM,2FAEV,CACIrR,MACI,oEACsC,IAClC,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,wCAAhC,4BAKR0Q,KACI,wHAER,CACIrR,MACI,iEACmC,IAC/B,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,+CAAhC,4BAKR0Q,KACI,4IAINS,GAA0B,CAC5B,CACI9R,MAAO,oBACPqR,KAAM,iGAEV,CACIrR,MACI,2DAC6B,IACzB,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,6BAAhC,4BAKR0Q,KACI,6KAER,CACIrR,MACI,yEAC2C,IACvC,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,6CAAhC,4BAKR0Q,KACI,yJAER,CACIrR,MACI,oDACsB,IAClB,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,sBAAhC,4BAKR0Q,KAAM,6BAEV,CACIrR,MACI,4DAC8B,IAC1B,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,YAAhC,0BAGC,MACD,cAAC,IAAD,CAAM5D,UAAU,aAAa4D,GAAG,2BAAhC,4BAKR0Q,KAAM,+DAEV,CACIrR,MACI,8DACgC,IAC5B,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,YAAhC,0BAGC,MACD,cAAC,IAAD,CAAM5D,UAAU,aAAa4D,GAAG,6BAAhC,4BAKR0Q,KAAM,gEAEV,CACIrR,MACI,uDACyB,IACrB,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,+BAAhC,4BAKR0Q,KACI,kIAER,CACIrR,MACI,yDAC2B,IACvB,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,YAAhC,6BAKR0Q,KACI,yIAER,CACIrR,MACI,wEAC0C,IACtC,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,0BAAhC,4BAKR0Q,KAAM,0FAEV,CACIrR,MACI,qDACuB,IACnB,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,sBAAhC,4BAKR0Q,KAAM,8EAEV,CACIrR,MACI,6EAC+C,IAC3C,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,oCAAhC,4BAKR0Q,KACI,6HAER,CACIrR,MACI,8CACgB,IACZ,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,4BAAhC,4BAKR0Q,KAAM,oEAEV,CACIrR,MAAO,iBACPqR,KAAM,2DAEV,CACIrR,MAAO,iBACPqR,KAAM,6EAEV,CACIrR,MAAO,2BACPqR,KAAM,gEAgBCU,GAZe,WAC1B,OACI,eAAC,EAAD,CAAqBvQ,OAAO,qBAA5B,UACI,cAAC,GAAD,CAAeoQ,KAtOC,4ZAuOhB,qBAAK7U,UAAU,uBAAf,6BACA,cAAC,GAAD,CAASkU,YAAaY,KACtB,qBAAK9U,UAAU,uBAAf,2BACA,cAAC,GAAD,CAASkU,YAAaa,SC7N5BE,GAAgC,CAClC,CACIhS,MAAO,gBACPqR,KAAM,gDAEV,CACIrR,MAAO,uBACPqR,KAAM,qGAEV,CACIrR,MAAO,wBACPqR,KACI,8GAER,CACIrR,MAAO,mCACPqR,KAAM,oFAEV,CACIrR,MAAO,2CACPqR,KAAM,iFAEV,CACIrR,MAAO,6BACPqR,KAAM,gFAEV,CACIrR,MAAO,0BACPqR,KAAM,2FAEV,CACIrR,MAAO,oCACPqR,KACI,wHAER,CACIrR,MAAO,iCACPqR,KACI,4IAsBGY,GAlByB,SAACpR,GACrC,OACI,eAAC,EAAD,CAAqBW,OAAO,+BAA5B,UACI,cAAC,GAAD,CAAeoQ,KA3DL,waA4DV,sBAAK7U,UAAU,uBAAf,gCAEI,kDACoB,IAChB,sBAAMA,UAAU,aAAa+C,QAASe,EAAMiM,mBAA5C,sCAKR,cAAC,GAAD,CAASmE,YAAae,SCvB5BE,GAA6B,CAC/B,CACIlS,MACI,gDACkB,IACd,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,YAAhC,6BAKR0Q,KAAM,kDAEV,CACIrR,MACI,oDACsB,IAClB,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,YAAhC,6BAKR0Q,KAAM,2FAEV,CACIrR,MACI,kDACoB,IAChB,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,YAAhC,6BAKR0Q,KAAM,4EAEV,CACIrR,MAAO,qBACPqR,KAAM,mEAEV,CACIrR,MAAO,yBACPqR,KACI,qHAER,CACIrR,MAAO,yBACPqR,KAAM,oGAEV,CACIrR,MAAO,oCACPqR,KAAM,uGAEV,CACIrR,MAAO,mBACPqR,KAAM,4FAcCc,GAVE,WACb,OACI,eAAC,EAAD,CAAqB3Q,OAAO,QAA5B,UACI,cAAC,GAAD,CAAeoQ,KAzGR,47CA0GP,qBAAK7U,UAAU,uBAAf,oCACA,cAAC,GAAD,CAASkU,YAAaiB,SCtG5BE,GAA4B,CAC9B,CACIpS,MAAO,wBACPqR,KACI,2FAC4D,IACxD,cAAC,IAAD,CAAMtU,UAAU,aAAa4D,GAAG,wBAAhC,6BAFJ,QASR,CACIX,MAAO,wGACPqR,KACI,kFACmD,IAC/C,cAAC,IAAD,CAAMtU,UAAU,aAAa4D,GAAG,gBAAhC,oBAGC,KACD,cAAC,IAAD,CAAM5D,UAAU,aAAa4D,GAAG,gBAAhC,oBAGC,KACD,cAAC,IAAD,CAAM5D,UAAU,aAAa4D,GAAG,mBAAhC,sBAGC,QACD,cAAC,IAAD,CAAM5D,UAAU,aAAa4D,GAAG,cAAhC,kBAEQ,IAhBZ,aAqBR,CACIX,MAAO,yBACPqR,KACI,qGACsE,IAClE,cAAC,IAAD,CAAMtU,UAAU,aAAa4D,GAAG,gBAAhC,oBAEQ,IAJZ,YASR,CACIX,MAAO,qBACPqR,KACI,qHACsF,IAClF,cAAC,IAAD,CAAMtU,UAAU,aAAa4D,GAAG,cAAhC,kBAEQ,IAJZ,YASR,CACIX,MACI,yDAC2B,IACvB,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,iCAAhC,4BAKR0Q,KAAM,+DAEV,CACIrR,MACI,mDACqB,IACjB,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,oCAAhC,4BAKR0Q,KAAM,4EAEV,CACIrR,MACI,kDACoB,IAChB,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,oCAAhC,4BAKR0Q,KAAM,2EAEV,CACIrR,MACI,iEACmC,IAC/B,cAAC,IAAD,CAAMjD,UAAU,aAAa4D,GAAG,iCAAhC,4BAKR0Q,KAAM,6DAcCgB,GAVC,WACZ,OACI,eAAC,EAAD,CAAqB7Q,OAAO,OAA5B,UACI,cAAC,GAAD,CAAeoQ,KAnHR,yIAoHP,qBAAK7U,UAAU,uBAAf,wCACA,cAAC,GAAD,CAASkU,YAAamB,S,qBC/EnBE,I,OAtCE,SAACzR,GACd,IAAQiM,EAAuBjM,EAAvBiM,mBACFyF,EAAW,mBAAe3Q,SAEhC,OACI,sBAAK7E,UAAW,eAAhB,UACI,sBAAMA,UAAW,gBAAjB,SACI,eAAC+L,GAAA,EAAD,CAAQC,QAAQ,YAAYhM,UAAU,YAAY+C,QAAS,kBAAMgN,KAAjE,UACI,sBAAM/P,UAAU,iBAAhB,qDACA,cAAC,KAAD,SAIR,cAACwP,GAAA,EAAD,CAASC,UAAU,SAASvP,MAAM,iBAAlC,SACI,sBAAMF,UAAW,aAAjB,SACI,mBAAGsE,KAAM,iDAAkDZ,OAAO,SAASa,IAAI,aAA/E,SACI,qBAAKQ,IAAKF,0CAAwCG,IAAI,sBAIlE,cAACwK,GAAA,EAAD,CAASC,UAAU,SAASvP,MAAM,gBAAlC,SACI,sBAAMF,UAAW,UAAjB,SACI,mBAAGsE,KAAM,uDAAwDZ,OAAO,SAASa,IAAI,aAArF,SACI,qBAAKQ,IAAKF,uCAAqCG,IAAI,mBAI/D,cAACwK,GAAA,EAAD,CAASC,UAAU,SAASvP,MAAM,kBAAlC,SACI,sBAAMF,UAAW,cAAjB,SACI,mBAAGsE,KAAM,uDAAwDZ,OAAO,SAASa,IAAI,aAArF,SACKiR,aCsHVC,GAnGC,WACZ,OACI,eAAC,EAAD,CAAqBhR,OAAO,OAA5B,UACI,sBAAKzE,UAAU,gBAAf,UACI,8BACI,qCADJ,4EACyF,IACrF,mBACIA,UAAU,aACVsE,KAAK,sCACLZ,OAAO,SACPa,IAAI,aAJR,wBAOK,IATT,aAYA,2GACA,wBAAOvE,UAAU,eAAjB,UACI,gCACI,+BACI,oBAAIA,UAAU,sBAAd,uBACA,oBAAIA,UAAU,yBAAd,gCAGR,kCACI,+BACI,mEACA,+CAAkB,WAAlB,oBAEJ,+BACI,oEACA,+CAAkB,qBAAlB,oBAEJ,+BACI,6EACA,+CAAkB,iBAAlB,oBAEJ,+BACI,wGACA,+CAAkB,yBAAlB,oBAEJ,+BACI,gEACA,2CAAc,WAAd,UAEJ,+BACI,iEACA,2CAAc,qBAAd,UAEJ,+BACI,0EACA,2CAAc,iBAAd,UAEJ,+BACI,qGACA,2CAAc,yBAAd,UAEJ,+BACI,gEACA,2CAAc,WAAd,UAEJ,+BACI,iEACA,2CAAc,qBAAd,UAEJ,+BACI,0EACA,2CAAc,iBAAd,UAEJ,+BACI,qGACA,2CAAc,yBAAd,UAEJ,+BACI,0EACA,iDAAoB,WAApB,UAEJ,+BACI,2EACA,iDAAoB,qBAApB,UAEJ,+BACI,oFACA,iDAAoB,iBAApB,UAEJ,+BACI,+GACA,iDAAoB,yBAApB,mBAKhB,qBAAKA,UAAU,kBAAf,SACI,sBAAMA,UAAU,WAAhB,SAjJE,khECSZmG,GAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eAGrCqN,GAAS,CACX,CAAEvN,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eAGrCsN,GAAS,CACX,CAAExN,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eA+I5BoP,GA5IgB,WAC3B,MAUIlP,YAAmB,CACnBL,SACAuG,yBAAyB,IAXzB/H,EADJ,EACIA,QACA8B,EAFJ,EAEIA,gBACAC,EAHJ,EAGIA,SACAC,EAJJ,EAIIA,aACAmN,EALJ,EAKIA,oBACAnI,EANJ,EAMIA,mBACAY,EAPJ,EAOIA,iBACAmF,EARJ,EAQIA,SACAC,EATJ,EASIA,SAKJ,EAAoC9Q,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KACA,EAAwCjL,mBAASsF,IAAjD,mBAAOP,EAAP,KAAqB4B,EAArB,KACA,EAA8C3G,mBAAS,GAAvD,mBAAOyS,EAAP,KAAwBC,EAAxB,KAEArS,qBAAU,WACN2O,YAAW,WACPiE,EACI,CACI5I,SAAU,KACVC,SAAU,KACVqI,OAAQ,EACRC,UAAW,CAAC,SAAU,kBAE1BE,IAEJJ,EAAmB,GACnB/L,EAAgBmM,MACjB,OACJ,IAEHzS,qBAAU,WACN2O,YAAW,WACPiE,EACI,CACI5I,SAAU,KACVsI,OAAQ,EACRC,UAAW,CAAC,WAEhBG,IAEJL,EAAmB,GACnB/L,EAAgBoM,MACjB,OACJ,IASH,OACI,eAAC,EAAD,CAAqBnP,OAAO,kBAAkBT,QAAQ,gDAAtD,UACI,gCACyB,IAApBsP,EACK,+BACoB,IAApBA,EACA,gCACA,+BACN,uBACA,uBACA,8BACI,cAACtQ,EAAA,EAAD,CACI4D,QAAS+K,EAAS,YAClB7K,WAAY6K,EAAS,aAAe,IACpC1O,MAAM,QACN8D,KAAK,OACLxD,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAAS+K,EAAS,YAClB7K,WAAY6K,EAAS,aAAe,IACpC1O,MAAM,QACN8D,KAAK,OACLxD,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAAS+K,EAAS,UAClB7K,WAAY6K,EAAS,WAAa,IAClC1O,MAAM,UACN8D,KAAK,SACLxD,MAAOmO,EAAS,WAAa,GAC7BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,SAAUlD,EAAEC,OAAOH,QACjDiJ,OAAQ,kBAAMD,EAAiB,WAC/BvG,GAAG,aAGX,8BACI,cAACuC,EAAA,EAAD,CACIvC,GAAG,YACHwG,OAAQ,kBAAMD,EAAiB,cAC/B7C,UAAQ,EACRnG,MAAOmO,EAAS,cAAgB,GAChClO,SAAU,SAACgF,EAAOC,GACd9B,EAAa,YAAa8B,IAE9BE,QAASA,GACTE,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAAS+K,EAAS,aAClB7K,WAAY6K,EAAS,cAAgB,IACrC1O,MAAM,qBAKtB,8BACI,cAAC8I,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WAzElD4I,KAEtBG,GAAc,IAuEN,2BAIJ,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAca,EAAiBhC,OAAO,4BACxD,cAAC,EAAD,CAAkBmB,aAAcA,OAEpC,eAACqG,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WC3JtCP,GAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eAGrCqN,GAAS,CACX,CAAEvN,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eAGrCsN,GAAS,CACX,CAAExN,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,KAC5F,CAAEnF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eA8H5BqP,GA3HS,WACpB,MASInP,YAAmB,CACnBN,gBAAiB,CAAEgF,SAAU,MAAOC,SAAU,MAAOqI,OAAQ,EAAGC,UAAW,CAAC,WAC5EtN,SACAuG,yBAAyB,IAXzB/H,EADJ,EACIA,QACA+B,EAFJ,EAEIA,SACAC,EAHJ,EAGIA,aACAY,EAJJ,EAIIA,SACAoE,EALJ,EAKIA,mBACAY,EANJ,EAMIA,iBACAmF,EAPJ,EAOIA,SACAC,EARJ,EAQIA,SAMJ,EAAoC9Q,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KACA,EAAwCjL,mBAASsF,IAAjD,mBAAOP,EAAP,KAAqB4B,EAArB,KACA,EAA8C3G,mBAAS,GAAvD,mBAAOyS,EAAP,KAAwBC,EAAxB,KAyBA,OACI,eAAC,EAAD,CAAqB9O,OAAO,WAAWT,QAAQ,yCAA/C,UACI,gCACK,8CACD,uBACA,uBACA,8BACI,cAAChB,EAAA,EAAD,CACI4D,QAAS+K,EAAS,YAClB7K,WAAY6K,EAAS,aAAe,IACpC1O,MAAM,QACN8D,KAAK,OACLxD,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAAS+K,EAAS,YAClB7K,WAAY6K,EAAS,aAAe,IACpC1O,MAAM,QACN8D,KAAK,OACLxD,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAAS+K,EAAS,UAClB7K,WAAY6K,EAAS,WAAa,IAClC1O,MAAM,UACN8D,KAAK,SACLxD,MAAOmO,EAAS,WAAa,GAC7BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,SAAUlD,EAAEC,OAAOH,QACjDiJ,OAAQ,kBAAMD,EAAiB,WAC/BvG,GAAG,aAGX,8BACI,cAACuC,EAAA,EAAD,CACIvC,GAAG,YACHwG,OAAQ,kBAAMD,EAAiB,cAC/B7C,UAAQ,EACRnG,MAAOmO,EAAS,cAAgB,GAChClO,SAAU,SAACgF,EAAOC,GACd9B,EAAa,YAAa8B,IAE9BE,QAASA,GACTE,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAAS+K,EAAS,aAClB7K,WAAY6K,EAAS,cAAgB,IACrC1O,MAAM,qBAKtB,gCACI,cAAC8I,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WArElD4I,KAEtBG,GAAc,IAmEN,yBAGA,cAACC,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WAxFpD,IAApBuQ,GACA/L,EAASoM,IACTJ,EAAmB,GACnB/L,EAAgBmM,KACW,IAApBL,GACP/L,EAASqM,IACTL,EAAmB,GACnB/L,EAAgBoM,KACW,IAApBN,IACP/L,EAASpB,IACToN,EAAmB,GACnB/L,EAAgBrB,MA6ER,4BAIJ,cAAC,EAAD,CAAkBxB,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcA,OAEpC,eAACqG,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WCzItCP,GAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eA6I5BsP,GA1Ie,WAC1B,MAQIpP,YAAmB,CACnBL,SACAuG,yBAAyB,IATzB/H,EADJ,EACIA,QACA8B,EAFJ,EAEIA,gBACAC,EAHJ,EAGIA,SACAC,EAJJ,EAIIA,aACAkP,EALJ,EAKIA,eACAlK,EANJ,EAMIA,mBACAY,EAPJ,EAOIA,iBAKJ,EAAoC1L,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KACA,EAA8CjL,mBAAS,GAAvD,mBAAOyS,EAAP,KAAwBC,EAAxB,KAEArS,qBAAU,WACN2O,YAAW,WACPlJ,EAAa,WAAY,OACzBA,EAAa,WAAY,OACzBA,EAAa,SAAU,GACvBA,EAAa,YAAa,CAAC,SAAU,kBACrC4M,EAAmB,KACpB,OACJ,IAEHrS,qBAAU,WACN2O,YAAW,WACPlJ,EAAa,WAAY,OACzBA,EAAa,WAAY,MACzBkP,EAAe,UACflP,EAAa,YAAa,CAAC,WAC3B4M,EAAmB,KACpB,OACJ,IAEHrS,qBAAU,WACN2O,YAAW,WACPlJ,EAAa,WAAY,OACzBA,EAAa,WAAY,SACzBA,EAAa,SAAU,GACvBA,EAAa,YAAa,CAAC,WAC3B4M,EAAmB,KACpB,OACJ,IASH,OACI,eAAC,EAAD,CAAqB9O,OAAO,iBAAiBT,QAAQ,+CAArD,UACI,gCACyB,IAApBsP,EACK,+BACoB,IAApBA,EACA,gCACoB,IAApBA,EACA,oCACA,+BACN,uBACA,uBACA,8BACI,cAACtQ,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,YAC9BK,WAAYD,IAAIJ,EAAiB,aAAe,IAChDxD,MAAM,QACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,aAAe,GACpClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,YAC9BK,WAAYD,IAAIJ,EAAiB,aAAe,IAChDxD,MAAM,QACN8D,KAAK,OACLxD,MAAOsD,IAAIH,EAAU,aAAe,GACpClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAASC,IAAIJ,EAAiB,UAC9BK,WAAYD,IAAIJ,EAAiB,WAAa,IAC9CxD,MAAM,UACN8D,KAAK,SACLxD,MAAOsD,IAAIH,EAAU,WAAa,GAClClD,SAAU,SAACC,GAAD,OAAOkD,EAAa,SAAUlD,EAAEC,OAAOH,QACjDiJ,OAAQ,kBAAMD,EAAiB,WAC/BvG,GAAG,aAGX,8BACI,cAACuC,EAAA,EAAD,CACIvC,GAAG,YACHwG,OAAQ,kBAAMD,EAAiB,cAC/B7C,UAAQ,EACRnG,MAAOsD,IAAIH,EAAU,cAAgB,GACrClD,SAAU,SAACgF,EAAOC,GACd9B,EAAa,YAAa8B,IAE9BE,QAASA,GACTE,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAASC,IAAIJ,EAAiB,aAC9BK,WAAYD,IAAIJ,EAAiB,cAAgB,IACjDxD,MAAM,qBAKtB,8BACI,cAAC8I,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WA3ElD4I,KAEtBG,GAAc,IAyEN,2BAIJ,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAcc,EAAUjC,OAAO,qBACjD,cAAC,EAAD,CAAkBmB,aAAcO,QAEpC,eAAC8F,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WC5ItCP,GAAQ,CACV,CAAEC,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,cACtC,CAAEF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eAGrCqN,GAAS,CACX,CAAEvN,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eAGrCsN,GAAS,CACX,CAAExN,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,WAAYC,QAAS,CAAC,CAAEC,KAAM,YAAc,CAAEA,KAAM,SAAUiF,qBAAsB,MAC5F,CAAEnF,KAAM,SAAUC,QAAS,CAAC,CAAEC,KAAM,cACpC,CAAEF,KAAM,YAAaC,QAAS,CAAC,CAAEC,KAAM,eAyJ5BwP,GAtJ8B,WACzC,MAWItP,YAAmB,CACnBL,SACAuF,kBAAkB,EAClBY,eAAe,EACfI,yBAAyB,IAdzB/H,EADJ,EACIA,QACA8B,EAFJ,EAEIA,gBACAsP,EAHJ,EAGIA,8BACArP,EAJJ,EAIIA,SACAC,EALJ,EAKIA,aACAmN,EANJ,EAMIA,oBACAnI,EAPJ,EAOIA,mBACAY,EARJ,EAQIA,iBACAmF,EATJ,EASIA,SACAC,EAVJ,EAUIA,SAOJ,EAAoC9Q,oBAAS,GAA7C,mBAAOgL,EAAP,KAAmBC,EAAnB,KACA,EAAwCjL,mBAASsF,IAAjD,mBAAOP,EAAP,KAAqB4B,EAArB,KACA,EAA8C3G,mBAAS,GAAvD,mBAAOyS,EAAP,KAAwBC,EAAxB,KAEArS,qBAAU,WACN2O,YAAW,WACPiE,EACI,CACI5I,SAAU,KACVC,SAAU,KACVqI,OAAQ,EACRC,UAAW,CAAC,SAAU,kBAE1BE,IAEJJ,EAAmB,GACnB/L,EAAgBmM,MACjB,OACJ,IAEHzS,qBAAU,WACN2O,YAAW,WACPiE,EACI,CACI5I,SAAU,KACVsI,OAAQ,EACRC,UAAW,CAAC,WAEhBG,IAEJL,EAAmB,GACnB/L,EAAgBoM,MACjB,OACJ,IASH,OACI,eAAC,EAAD,CACInP,OAAO,gCACPT,QAAQ,8DAFZ,UAII,gCACyB,IAApBsP,EACK,+BACoB,IAApBA,EACA,gCACA,+BACN,uBACA,uBACA,8BACI,cAACtQ,EAAA,EAAD,CACI4D,QAAS+K,EAAS,YAClB7K,WAAY6K,EAAS,aAAe,IACpC1O,MAAM,QACN8D,KAAK,OACLxD,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAAS+K,EAAS,YAClB7K,WAAY6K,EAAS,aAAe,IACpC1O,MAAM,QACN8D,KAAK,OACLxD,MAAOmO,EAAS,aAAe,GAC/BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,WAAYlD,EAAEC,OAAOH,QACnDiJ,OAAQ,kBAAMD,EAAiB,aAC/BvG,GAAG,eAGX,8BACI,cAAChD,EAAA,EAAD,CACI4D,QAAS+K,EAAS,UAClB7K,WAAY6K,EAAS,WAAa,IAClC1O,MAAM,UACN8D,KAAK,SACLxD,MAAOmO,EAAS,WAAa,GAC7BlO,SAAU,SAACC,GAAD,OAAOkD,EAAa,SAAUlD,EAAEC,OAAOH,QACjDiJ,OAAQ,kBAAMD,EAAiB,WAC/BvG,GAAG,aAGX,8BACI,cAACuC,EAAA,EAAD,CACIvC,GAAG,YACHwG,OAAQ,kBAAMD,EAAiB,cAC/B7C,UAAQ,EACRnG,MAAOmO,EAAS,cAAgB,GAChClO,SAAU,SAACgF,EAAOC,GACd9B,EAAa,YAAa8B,IAE9BE,QAASA,GACTE,YAAa,SAACC,GAAD,OACT,cAAC9F,EAAA,EAAD,2BACQ8F,GADR,IAEIlC,QAAS+K,EAAS,aAClB7K,WAAY6K,EAAS,cAAgB,IACrC1O,MAAM,qBAKtB,8BACI,cAAC8I,GAAA,EAAD,CAAQ/L,UAAU,iBAAiBgM,QAAQ,YAAYjJ,QAAS,WA5ElD4I,KAEtBG,GAAc,IA0EN,2BAIJ,cAAC,EAAD,CAAkBnH,QAASA,IAC3B,cAAC,EAAD,CAAkBiB,aAAca,EAAiBhC,OAAO,4BACxD,cAAC,EAAD,CACImB,aAAcmQ,EACdtR,OAAO,0CAEX,cAAC,EAAD,CAAkBmB,aAAcA,OAEpC,eAACqG,EAAA,EAAD,CAAQC,KAAML,EAAYM,QAAS,kBAAML,GAAc,IAAvD,UACI,cAACM,EAAA,EAAD,kCACA,cAAC,GAAD,CAAkB1F,SAAUA,WCqB7BsP,GApJA,SAAClS,GACZ,OACI,eAAC,IAAD,WACI,cAAC,EAAD,CAAYvD,aAAcuD,EAAMvD,aAAcC,iBAAkBsD,EAAMtD,mBACtE,sBAAKR,UAAU,aAAa+C,QAASe,EAAMmS,eAA3C,UACI,cAAC,GAAD,CAAUlG,mBAAoBjM,EAAMiM,qBACpC,eAAC,IAAD,WACI,cAAC,IAAD,CAAOmG,OAAK,EAAC9P,KAAK,gCAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,yBAAlB,SACI,cAAC,GAAD,CAAO2J,mBAAoBjM,EAAMiM,uBAErC,cAAC,IAAD,CAAOmG,OAAK,EAAC9P,KAAK,kBAAlB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,gBAAlB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,gBAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,mBAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,cAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,eAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,aAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,cAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,kBAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,eAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,gBAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,wBAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,4BAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,2BAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,+BAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,4BAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,wCAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,gDAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,qCAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,mCAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,iCAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,+BAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,oCAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,iCAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,+CAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,iBAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,gBAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,wBAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,4BAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,0BAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,2BAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,6BAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,sBAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,oCAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,sBAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,6BAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,6CAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,uCAAlB,SACI,cAAC,GAAD,CAAiC2J,mBAAoBjM,EAAMiM,uBAE/D,cAAC,IAAD,CAAOmG,OAAK,EAAC9P,KAAK,4BAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,aAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,YAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,YAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO8P,OAAK,EAAC9P,KAAK,IAAlB,SACI,cAAC,EAAD,gBChKlB+P,GAAc,CAChBC,aAfyB,SAACtL,GAC1B,IAAQvH,EAAUuH,EAAVvH,MAER,OAAKA,GAIAA,EAAMlC,SAAS,MAAQkC,EAAMvB,OAAS,EACjC,QAAN,OAAeuB,EAAf,4EAGG,KAPI,2CAcT8S,GAAkB,CACpBC,KAAM,KACNC,qBAAqB,EACrBC,oCAAoC,EACpCC,4CAA4C,EAC5C/K,kBAAkB,EAClBY,eAAe,EACfI,yBAAyB,EACzBgK,kCAAkC,GAGhCC,GAAqB,CACvBC,GAAI,CACAC,SAAU,gCACV,qBAAsB,uFACtB,iBAAkB,sFAEtBC,GAAI,CACAD,SAAU,iCAIZE,GAA8B,SAACC,GACjC,IACMC,EAAID,EAAUhN,UAGpB,OAAaiN,GAAK,EAAI,IAAMA,EAAIA,GAAK,IAJpB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAE5ED,EAAUE,YAEkB,IADrCF,EAAUG,eAIlBC,GAAsC,SAACJ,GACzC,IACMC,EAAID,EAAUhN,UAKpB,OAAaiN,GAAK,EAAI,IAAMA,EAAIA,GAAK,IANpB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAE5ED,EAAUE,YAIkB,IAHrCF,EAAUG,cAGqC,IAF/CH,EAAUK,WAE+C,IADxDL,EAAUM,cAInBC,GAAqB,CAAC,KAAM,MAiMnBC,GA/LF,WACT,IAAMC,EAAWC,YAAc,sBAC/B,EAA8C7W,mBAASwV,IAAvD,mBAAOsB,EAAP,KAAwBC,EAAxB,KACA,EAAoD/W,oBAAS,GAA7D,mBAAOgX,EAAP,KAA2BC,EAA3B,KACA,EAAwCjX,oBAAS,GAAjD,mBAAON,EAAP,KAAqBwX,EAArB,KAEA7W,qBAAU,WACN6W,EAAgBN,KACjB,CAACA,IAEJ,IAgBMO,EAAsB,SAAC1S,EAAK/B,GAC9B,IAAM0U,EAAW,eAAQN,GACzBM,EAAY3S,GAAO/B,EACP,wBAAR+B,GAAkC/B,GACL,OAAzBoU,EAAgBrB,OAChB2B,EAAW,KAAW,MAG9BL,EAAmBK,IAGnBC,EAAe,KACfP,EAAgBpB,sBAChB2B,EAAevB,IAGnB,IAAIwB,EAAwB,KACxBR,EAAgBnB,qCAChB2B,EAAwBpB,IAG5B,IAAIqB,EAAgC,KAChCT,EAAgBlB,6CAChB2B,EAAgChB,IAGpC,IAAMiB,EAAkB,UAAOd,IAC3BI,EAAgBpB,qBAChB8B,EAAmB/W,KAAK,MAG5B,IAAIgX,EAA4B,KAC5BX,EAAgBjB,mCAChB4B,EAA4B,SAAC3K,GACzB,IAAMuC,EAAUC,SAASC,eAAezC,GACnCuC,GAGDS,QAAQ4H,IAAR,qDAA0D5K,IAC1DuC,EAAQO,SAHRE,QAAQC,KAAR,0DAAgEjD,EAAhE,kCAQZ,IAAM6K,EACF,sBAAKxY,UAAW,wBAAhB,UACI,cAACuI,EAAA,EAAD,CACIhF,MAAOoU,EAAgBrB,KACvB9S,SAAU,SAACgF,EAAOC,GACduP,EAAoB,OAAQvP,IAEhCE,QAAS0P,EACTxP,YAAa,SAACC,GAAD,OAAY,cAAC9F,EAAA,EAAD,2BAAe8F,GAAf,IAAuB7F,MAAM,WACtDqL,MAAO,CAAEU,MAAO,OAEpB,cAAC/F,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIC,QAASuO,EAAgBpB,oBACzB/S,SAAU,SAACC,GAAD,OAAOuU,EAAoB,sBAAuBvU,EAAEC,OAAO0F,YAG7EnG,MAAM,wBAEV,cAACgG,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIC,QAASuO,EAAgBnB,mCACzBhT,SAAU,SAACC,GAAD,OAAOuU,EAAoB,qCAAsCvU,EAAEC,OAAO0F,YAG5FnG,MAAM,iCAEV,cAACgG,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIC,QAASuO,EAAgBlB,2CACzBjT,SAAU,SAACC,GAAD,OACNuU,EAAoB,6CAA8CvU,EAAEC,OAAO0F,YAIvFnG,MAAM,yCAEV,cAACgG,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIC,QAASuO,EAAgBjM,iBACzBlI,SAAU,SAACC,GAAD,OAAOuU,EAAoB,mBAAoBvU,EAAEC,OAAO0F,YAG1EnG,MAAM,qBAEV,cAACgG,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIC,QAASuO,EAAgBrL,cACzB9I,SAAU,SAACC,GAAD,OAAOuU,EAAoB,gBAAiBvU,EAAEC,OAAO0F,YAGvEnG,MAAM,kBAEV,cAACgG,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIC,QAASuO,EAAgBjL,wBACzBlJ,SAAU,SAACC,GAAD,OAAOuU,EAAoB,0BAA2BvU,EAAEC,OAAO0F,YAGjFnG,MAAM,4BAEV,cAACgG,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACIC,QAASuO,EAAgBjB,iCACzBlT,SAAU,SAACC,GAAD,OAAOuU,EAAoB,mCAAoCvU,EAAEC,OAAO0F,YAG1FnG,MAAM,kCAKlB,OACI,qCACI,qBAAKjD,UAAU,cACf,cAACyY,EAAA,EAAD,CAAY1V,QAAS,kBAAMgV,GAAiBxX,IAAeP,UAAU,aAArE,SACI,cAAC,IAAD,MAEJ,eAACiM,EAAA,EAAD,CAAQC,KAAM2L,EAAoB1L,QAAS,kBAAM2L,GAAsB,IAAvE,UACI,cAAC1L,EAAA,EAAD,UACI,cAAC,EAAD,CACI3H,OAAO,0CACPT,QAAQ,qBACRQ,iBAAiB,yBAGxBgU,KAEL,cAAC,IAAD,CACIlC,KAAMqB,EAAgBrB,KACtBH,YAAaA,GACb+B,aAAcA,EACdC,sBAAuBA,EACvBC,8BAA+BA,EAC/B1M,iBAAkBiM,EAAgBjM,iBAClCY,cAAeqL,EAAgBrL,cAC/BI,wBAAyBiL,EAAgBjL,wBACzCoE,oBAAqBwH,EATzB,SAWI,cAAC,EAAD,UACI,qBAAKtY,UAAU,gBAAf,SACI,cAAC,GAAD,CACIQ,iBAnKO,WACvBiX,GACAM,GAAgB,IAkKAhI,mBA9JG,WACvB+H,GAAsB,IA8JFvX,aAAcA,EACd0V,eA5KG,WACnBwB,GACAM,GAAgB,gBCtEbW,OAbf,WAUI,OALQ,cAAC,IAAD,CAAaC,MAJH,CAAE3S,GAAInB,eAIhB,SACI,cAAC,GAAD,O,oBCED+T,GAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCIpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACC,GAAA,EAAD,CAAsBC,YAAaC,KAAnC,SACI,cAAC,GAAD,QAGRvJ,SAASC,eAAe,SAM5BwI,O","file":"static/js/main.6e10ae15.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst BodyWrapper = ({ children }) => {\r\n    return (\r\n        <div className=\"relative min-h-screen\">\r\n            <main className=\"w-full min-h-screen\">{children}</main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BodyWrapper;\r\n","import { Navigation } from 'react-minimal-side-navigation';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport 'react-minimal-side-navigation/lib/ReactMinimalSideNavigation.css';\r\nimport { InputAdornment, TextField } from '@mui/material';\r\nimport { Search } from '@mui/icons-material';\r\n\r\nconst allMenuItems = [\r\n    {\r\n        title: 'Getting Started',\r\n        itemId: 'group1',\r\n        subNav: [\r\n            {\r\n                title: 'Installation',\r\n                itemId: '/getting-started/installation',\r\n                keywords: ['npm', 'yarn'],\r\n            },\r\n            {\r\n                title: 'Usage',\r\n                itemId: '/getting-started/usage',\r\n                keywords: ['ReactValidatableFormProvider', 'useValidatableForm'],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        title: 'Rules',\r\n        itemId: 'group2',\r\n        subNav: [\r\n            {\r\n                title: 'required',\r\n                itemId: '/rules/required',\r\n            },\r\n            {\r\n                title: 'number',\r\n                itemId: '/rules/number',\r\n                keywords: ['onlyIntegers'],\r\n            },\r\n            {\r\n                title: 'length',\r\n                itemId: '/rules/length',\r\n            },\r\n            {\r\n                title: 'listSize',\r\n                itemId: '/rules/list-size',\r\n            },\r\n            {\r\n                title: 'date',\r\n                itemId: '/rules/date',\r\n                keywords: ['time', 'withTime'],\r\n            },\r\n            {\r\n                title: 'email',\r\n                itemId: '/rules/email',\r\n            },\r\n            {\r\n                title: 'url',\r\n                itemId: '/rules/url',\r\n            },\r\n            {\r\n                title: 'iban',\r\n                itemId: '/rules/iban',\r\n            },\r\n            {\r\n                title: 'equality',\r\n                itemId: '/rules/equality',\r\n            },\r\n            {\r\n                title: 'regex',\r\n                itemId: '/rules/regex',\r\n            },\r\n            {\r\n                title: 'unique',\r\n                itemId: '/rules/unique',\r\n            },\r\n            {\r\n                title: 'custom on hook',\r\n                itemId: '/rules/custom-on-hook',\r\n            },\r\n            {\r\n                title: 'custom on provider',\r\n                itemId: '/rules/custom-on-provider',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        title: 'Advanced Settings',\r\n        itemId: 'group3',\r\n        subNav: [\r\n            {\r\n                title: 'Validate Lists',\r\n                itemId: '/advanced/validate-lists',\r\n            },\r\n            {\r\n                title: 'Hide Before Submit',\r\n                itemId: '/advanced/hide-before-submit',\r\n                keywords: ['resetForm'],\r\n            },\r\n            {\r\n                title: 'Show After Blur',\r\n                itemId: '/advanced/show-after-blur',\r\n                keywords: ['resetForm'],\r\n            },\r\n            {\r\n                title: 'Focus to Error After Submit',\r\n                itemId: '/advanced/focus-to-error-after-submit',\r\n            },\r\n            {\r\n                title: 'Focus to Error on List After Submit',\r\n                itemId: '/advanced/focus-to-error-on-list-after-submit',\r\n            },\r\n            {\r\n                title: 'Validate List of Objects',\r\n                itemId: '/advanced/validate-list-of-objects',\r\n            },\r\n            {\r\n                title: 'Validate Complex Forms',\r\n                itemId: '/advanced/validate-complex-forms',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        title: 'Customizations',\r\n        itemId: 'group4',\r\n        subNav: [\r\n            {\r\n                title: 'Custom Message',\r\n                itemId: '/customizations/custom-message',\r\n            },\r\n            {\r\n                title: 'Custom Translations',\r\n                itemId: '/customizations/translations',\r\n            },\r\n            {\r\n                title: 'Conditional Rules',\r\n                itemId: '/customizations/conditional-rules',\r\n                keywords: ['disableIf', 'enableIf'],\r\n            },\r\n            {\r\n                title: 'Apply to Nulls',\r\n                itemId: '/customizations/apply-to-nulls',\r\n            },\r\n            {\r\n                title: 'Element Focus Handler',\r\n                itemId: '/customizations/custom-element-focus-handler',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        title: 'Example Usages',\r\n        itemId: 'group5',\r\n        subNav: [\r\n            {\r\n                title: 'Pure React Components',\r\n                itemId: '/examples/pure',\r\n            },\r\n            {\r\n                title: 'MUI Components',\r\n                itemId: '/examples/mui',\r\n                keywords: ['materialui', 'material-ui'],\r\n            },\r\n            {\r\n                title: 'PrimeReact Components',\r\n                itemId: '/examples/prime-react',\r\n            },\r\n            {\r\n                title: 'React-Bootstrap Components',\r\n                itemId: '/examples/react-bootstrap',\r\n            },\r\n            {\r\n                title: 'setFormData',\r\n                itemId: '/examples/set-form-data',\r\n            },\r\n            {\r\n                title: 'setPathValue',\r\n                itemId: '/examples/set-path-value',\r\n            },\r\n            {\r\n                title: 'unsetPathValue',\r\n                itemId: '/examples/unset-path-value',\r\n            },\r\n            {\r\n                title: 'setRules',\r\n                itemId: '/examples/set-rules',\r\n            },\r\n            {\r\n                title: 'setFormDataAndRules',\r\n                itemId: '/examples/set-form-data-and-rules',\r\n            },\r\n            {\r\n                title: 'formData',\r\n                itemId: '/examples/form-data',\r\n            },\r\n            {\r\n                title: 'validationError',\r\n                itemId: '/examples/validation-error',\r\n            },\r\n            {\r\n                title: 'validationErrorOriginalResult',\r\n                itemId: '/examples/validation-error-original-result',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        title: 'API',\r\n        itemId: 'group6',\r\n        subNav: [\r\n            {\r\n                title: 'ReactValidatableFormProvider',\r\n                itemId: '/api/react-validatable-form-provider',\r\n                keywords: [\r\n                    'lang',\r\n                    'customRules',\r\n                    'translations',\r\n                    'dateFormatterFunction',\r\n                    'dateWithTimeFormatterFunction',\r\n                    'hideBeforeSubmit',\r\n                    'showAfterBlur',\r\n                    'focusToErrorAfterSubmit',\r\n                    'elementFocusHandler',\r\n                ],\r\n            },\r\n            {\r\n                title: 'useValidatableForm',\r\n                itemId: '/api/use-validatable-form',\r\n                keywords: [\r\n                    'rules',\r\n                    'initialFormData',\r\n                    'hideBeforeSubmit',\r\n                    'showAfterBlur',\r\n                    'focusToErrorAfterSubmit',\r\n                    'elementFocusHandler',\r\n                    'isValid',\r\n                    'validationError',\r\n                    'validationErrorOriginalResult',\r\n                    'setPathValue',\r\n                    'unsetPathValue',\r\n                    'setFormIsSubmitted',\r\n                    'setPathIsBlurred',\r\n                    'setFormData',\r\n                    'setRules',\r\n                    'setFormDataAndRules',\r\n                    'resetForm',\r\n                    'getValue',\r\n                    'getError',\r\n                    'forceRunAllValidations',\r\n                ],\r\n            },\r\n            {\r\n                title: 'rules',\r\n                itemId: '/api/rules',\r\n                keywords: [\r\n                    'path',\r\n                    'listPath',\r\n                    'ruleSet',\r\n                    'elementId',\r\n                    'listElementId',\r\n                    'dependantPaths',\r\n                    'disableFocusAfterSubmit',\r\n                    'subRules',\r\n                ],\r\n            },\r\n            {\r\n                title: 'Rule',\r\n                itemId: '/api/rule',\r\n                keywords: [\r\n                    'equalTo',\r\n                    'lessThan',\r\n                    'lessThanOrEqualTo',\r\n                    'greaterThan',\r\n                    'greaterThanOrEqualTo',\r\n                    'notEqualTo',\r\n                    'onlyIntegers',\r\n                    'withTime',\r\n                    'applyToNulls',\r\n                    'disableIf',\r\n                    'enableIf',\r\n                    'customMessage',\r\n                ],\r\n            },\r\n            {\r\n                title: 'path & listPath',\r\n                itemId: '/api/path',\r\n                keywords: ['lodash', 'path', 'listPath'],\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\nexport const NavSidebar = ({ menuIsHidden, onMenuItemSelect }) => {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const [searchInput, setSearchInput] = useState('');\r\n    const [firstPathname, setFirstPathname] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setSearchInput('');\r\n        if (location.pathname === '/') {\r\n            setFirstPathname('/getting-started/installation');\r\n        } else {\r\n            setFirstPathname(location.pathname);\r\n        }\r\n    }, [location]);\r\n\r\n    const onNameClick = () => {\r\n        history.push('/');\r\n        onMenuItemSelect();\r\n    };\r\n\r\n    const onItemSelect = ({ itemId }) => {\r\n        if (itemId.includes('/') && location.pathname !== itemId) {\r\n            history.push(itemId);\r\n            onMenuItemSelect();\r\n        }\r\n    };\r\n\r\n    let filteredMenuItems = JSON.parse(JSON.stringify(allMenuItems));\r\n    if (searchInput) {\r\n        filteredMenuItems = filteredMenuItems.filter((m) => {\r\n            let result = false;\r\n            let searchInputUpper = searchInput.toUpperCase();\r\n            if (m.subNav && m.subNav.length > 0) {\r\n                let subsList = [];\r\n                for (let i = 0; i < m.subNav.length; i++) {\r\n                    const subEl = m.subNav[i];\r\n                    const keywords = subEl.keywords || [];\r\n                    if (\r\n                        subEl.title.toUpperCase().includes(searchInputUpper) ||\r\n                        subEl.title.replaceAll(/\\s/g, '').toUpperCase().includes(searchInputUpper) ||\r\n                        keywords.filter((k) => k.toUpperCase().includes(searchInputUpper)).length > 0\r\n                    ) {\r\n                        subsList.push(subEl);\r\n                        result = true;\r\n                    }\r\n                }\r\n                if (subsList && subsList.length > 0) {\r\n                    m.subNav = subsList;\r\n                }\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    const navigations = filteredMenuItems.map((fm) => {\r\n        const itemWithSubItems = filteredMenuItems.filter((m) => m.itemId === fm.itemId);\r\n        const isActiveGroupElement = itemWithSubItems[0].subNav.filter((m) => m.itemId === firstPathname).length > 0;\r\n        let activeItemId = firstPathname;\r\n        if (!isActiveGroupElement && searchInput) {\r\n            activeItemId = fm.itemId;\r\n        }\r\n        return (\r\n            <Navigation key={fm.itemId} activeItemId={activeItemId} onSelect={onItemSelect} items={itemWithSubItems} />\r\n        );\r\n    });\r\n\r\n    const menuStatus = menuIsHidden ? 'sideMenuHidden' : 'sideMenuOpen';\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className={`${menuStatus} mysidemenu fixed inset-y-0 left-0 z-30 w-64 overflow-y-auto transition duration-300 ease-out transform translate-x-0 bg-white border-r-2 lg:translate-x-0 lg:static lg:inset-0 ${'ease-out translate-x-0'}`}\r\n            >\r\n                <div className=\"flex items-center justify-center text-center py-6 libraryName\" onClick={onNameClick}>\r\n                    <span className=\"mx-2 text-xl font-semibold text-black\">react-validatable-form</span>\r\n                </div>\r\n\r\n                <div className=\"flex items-center justify-center text-center\">\r\n                    <TextField\r\n                        className=\"menu-search-input\"\r\n                        label=\"search\"\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                    <Search />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                        value={searchInput}\r\n                        onChange={(e) => setSearchInput(e.target.value)}\r\n                    />\r\n                </div>\r\n                {navigations}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import { Redirect } from 'react-router';\r\n\r\nconst Homepage = () => {\r\n    return <Redirect to=\"/getting-started/installation\" />;\r\n};\r\n\r\nexport default Homepage;\r\n","import './ExampleUsageWrapper.css';\r\n\r\nconst CODE_BASE_URL = 'https://github.com/obss/react-validatable-form-demo/blob/master/src/';\r\n\r\nconst ExampleUsageWrapper = (props) => {\r\n    let urlsJsx = null;\r\n\r\n    if (props.codeUrl) {\r\n        let urls = [];\r\n        if (Array.isArray(props.codeUrl)) {\r\n            urls = [...props.codeUrl];\r\n        } else {\r\n            urls.push(props.codeUrl);\r\n        }\r\n        urlsJsx = urls.map((url) => {\r\n            const pageCodeUrl = CODE_BASE_URL + url;\r\n            return (\r\n                <span key={url} className=\"pageCodeUrlSpan\">\r\n                    <a href={pageCodeUrl} target=\"_blank\" rel=\"noreferrer\">\r\n                        View on GitHub\r\n                    </a>\r\n                </span>\r\n            );\r\n        });\r\n    }\r\n\r\n    const wrapperClassName = props.wrapperClassName || 'examplesUsageWrapperDiv';\r\n\r\n    return (\r\n        <div className={wrapperClassName}>\r\n            <span className=\"pageTitle\">{props.header}</span>\r\n            {urlsJsx}\r\n            <div className=\"mainWrapperDiv\">{props.children}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExampleUsageWrapper;\r\n","import './ValidationResult.css';\r\n\r\nconst ValidationResult = ({ isValid }) => {\r\n    let imgSrc = process.env.PUBLIC_URL + '/';\r\n    let validationResultText = '';\r\n    if (isValid) {\r\n        imgSrc += 'valid.png';\r\n        validationResultText = 'valid';\r\n    } else {\r\n        imgSrc += 'invalid.png';\r\n        validationResultText = 'invalid';\r\n    }\r\n\r\n    return (\r\n        <div className={'validationResultDiv'}>\r\n            <span>Validation Result: </span>\r\n            <img src={imgSrc} alt=\"validationresult\" className={'validationResultIcon'} />\r\n            <span className={isValid ? 'validationResultInfoSuccess' : 'validationResultInfoFail'}>\r\n                {validationResultText}\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ValidationResult;\r\n","import './CurrentRulesInfo.css';\r\nimport Accordion from '@mui/material/Accordion';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport AccordionDetails from '@mui/material/AccordionDetails';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\n\r\nconst stringifyWithFunction = (obj) => {\r\n    var placeholder = '____PLACEHOLDER____';\r\n    var fns = [];\r\n    var json = JSON.stringify(\r\n        obj,\r\n        function (key, value) {\r\n            if (typeof value === 'function') {\r\n                fns.push(value);\r\n                return placeholder;\r\n            }\r\n            if (value instanceof RegExp) {\r\n                fns.push('/' + value.source + '/');\r\n                return placeholder;\r\n            }\r\n            return value;\r\n        },\r\n        2\r\n    );\r\n    json = json.replace(new RegExp('\"' + placeholder + '\"', 'g'), function () {\r\n        return fns.shift();\r\n    });\r\n    return json;\r\n};\r\n\r\nconst CurrentRulesInfo = ({ currentRules, header = 'Current Rules' }) => {\r\n    return (\r\n        <div className={'currentRuleInfoDiv'}>\r\n            <Accordion>\r\n                <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\">\r\n                    <span className={'currentRuleLabel'}>{header}</span>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <span className={'currentRuleString'}>{stringifyWithFunction(currentRules)}</span>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrentRulesInfo;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {};\r\n\r\nconst rules = [{ path: 'val', ruleSet: [{ rule: 'required' }] }];\r\n\r\nconst RuleRequired = () => {\r\n    const { isValid, validationError, formData, setPathValue } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"required\" codeUrl=\"components/rules/RuleRequired.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>required</b> rule checks if the given value is <b>undefined</b>, <b>null</b>, <b>empty string</b> or{' '}\r\n                <b>empty array</b>.\r\n            </p>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val')}\r\n                    helperText={get(validationError, 'val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val') || ''}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleRequired;\r\n","export const ruleOptions = [\r\n    'equalTo',\r\n    'lessThan',\r\n    'lessThanOrEqualTo',\r\n    'greaterThan',\r\n    'greaterThanOrEqualTo',\r\n    'notEqualTo',\r\n];\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { ruleOptions } from '../../constants/Constants';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst defaultComparisonValue = 5;\r\nconst numberRule = { rule: 'number' };\r\nnumberRule[ruleOptions[0]] = defaultComparisonValue;\r\nconst rules = [{ path: 'val', ruleSet: ['required', numberRule], dependantPaths: ['comparisonValue'] }];\r\nconst initialFormData = {\r\n    val: 3,\r\n    ruleOption: ruleOptions[0],\r\n    comparisonValue: defaultComparisonValue,\r\n};\r\n\r\nconst RuleNumber = () => {\r\n    const { isValid, validationError, formData, setPathValue, setRules } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [ruleOption, setRuleOption] = useState(ruleOptions[0]);\r\n    const [isFunc, setIsFunc] = useState(false);\r\n    const [onlyIntegers, setOnlyIntegers] = useState(false);\r\n\r\n    const updateRules = (funcParam, ruleParam, onlyIntegersParam) => {\r\n        const newRules = JSON.parse(JSON.stringify(rules));\r\n        const newRuleSet = [...newRules[0].ruleSet];\r\n        const newRule = { rule: 'number' };\r\n        if (ruleParam) {\r\n            if (funcParam) {\r\n                newRule[ruleParam] = (formData) => formData['comparisonValue'];\r\n            } else {\r\n                newRule[ruleParam] = defaultComparisonValue;\r\n            }\r\n        }\r\n        if (onlyIntegersParam) {\r\n            newRule['onlyIntegers'] = true;\r\n        }\r\n        newRuleSet.splice(1, 1, newRule);\r\n        newRules[0].ruleSet = newRuleSet;\r\n        setCurrentRules(newRules);\r\n        setRules(newRules);\r\n    };\r\n\r\n    const handleSetIsFunc = (newValue) => {\r\n        updateRules(newValue, ruleOption, onlyIntegers);\r\n        setIsFunc(newValue);\r\n    };\r\n\r\n    const handleRuleOptionChange = (newValue) => {\r\n        updateRules(isFunc, newValue, onlyIntegers);\r\n        setRuleOption(newValue);\r\n    };\r\n\r\n    const handleOnlyIntegersChange = (newValue) => {\r\n        updateRules(isFunc, ruleOption, newValue);\r\n        setOnlyIntegers(newValue);\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"number\" codeUrl=\"components/rules/RuleNumber.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>number</b> rule checks if the given value is a valid number. If <b>onlyIntegers</b> parameter is set,\r\n                it also checks if given value is an integer. <b>{ruleOptions.join(', ')}</b> parameters are used to make\r\n                comparisons with given comparison values.\r\n            </p>\r\n            <div className=\"comparisonDiv\">\r\n                <TextField\r\n                    error={!!get(validationError, 'val')}\r\n                    helperText={get(validationError, 'val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"number\"\r\n                    value={get(formData, 'val')}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n\r\n                <Autocomplete\r\n                    className=\"ruleOptionComponent\"\r\n                    value={ruleOption}\r\n                    onChange={(event, newValue) => {\r\n                        handleRuleOptionChange(newValue);\r\n                    }}\r\n                    options={ruleOptions}\r\n                    disableClearable={false}\r\n                    renderInput={(params) => <TextField {...params} label=\"ruleOption\" />}\r\n                />\r\n                {isFunc ? (\r\n                    <TextField\r\n                        className=\"comparisonComponent\"\r\n                        label=\"comparisonValue\"\r\n                        type=\"number\"\r\n                        value={get(formData, 'comparisonValue')}\r\n                        onChange={(e) => setPathValue('comparisonValue', e.target.value)}\r\n                    />\r\n                ) : (\r\n                    <TextField\r\n                        disabled={true}\r\n                        className=\"comparisonComponent\"\r\n                        label=\"comparisonValue\"\r\n                        type=\"number\"\r\n                        value={defaultComparisonValue}\r\n                        onChange={() => {}}\r\n                    />\r\n                )}\r\n                <FormGroup className={'checkboxOnRight'}>\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={isFunc} onChange={(e) => handleSetIsFunc(e.target.checked)} />}\r\n                        label=\"as Function\"\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n            <div className=\"comparisonDiv\">\r\n                <FormGroup className={'checkboxOnRight'}>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={onlyIntegers}\r\n                                onChange={(e) => handleOnlyIntegersChange(e.target.checked)}\r\n                            />\r\n                        }\r\n                        label=\"onlyIntegers\"\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={currentRules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleNumber;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { ruleOptions } from '../../constants/Constants';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst defaultComparisonValue = 5;\r\nconst lengthRule = { rule: 'length' };\r\nlengthRule[ruleOptions[0]] = defaultComparisonValue;\r\nconst rules = [{ path: 'val', ruleSet: ['required', lengthRule], dependantPaths: ['comparisonValue'] }];\r\nconst initialFormData = {\r\n    val: 'aa',\r\n    ruleOption: ruleOptions[0],\r\n    comparisonValue: defaultComparisonValue,\r\n};\r\n\r\nconst RuleLength = () => {\r\n    const { isValid, validationError, formData, setPathValue, setRules } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [ruleOption, setRuleOption] = useState(ruleOptions[0]);\r\n    const [isFunc, setIsFunc] = useState(false);\r\n\r\n    const updateRules = (funcParam, ruleParam) => {\r\n        const newRules = JSON.parse(JSON.stringify(rules));\r\n        const newRuleSet = [...newRules[0].ruleSet];\r\n        const newRule = { rule: 'length' };\r\n        if (funcParam) {\r\n            newRule[ruleParam] = (formData) => formData['comparisonValue'];\r\n        } else {\r\n            newRule[ruleParam] = defaultComparisonValue;\r\n        }\r\n        newRuleSet.splice(1, 1, newRule);\r\n        newRules[0].ruleSet = newRuleSet;\r\n        setCurrentRules(newRules);\r\n        setRules(newRules);\r\n    };\r\n\r\n    const handleSetIsFunc = (newValue) => {\r\n        updateRules(newValue, ruleOption);\r\n        setIsFunc(newValue);\r\n    };\r\n\r\n    const handleRuleOptionChange = (newValue) => {\r\n        updateRules(isFunc, newValue);\r\n        setRuleOption(newValue);\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"length\" codeUrl=\"components/rules/RuleLength.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>length</b> rule checks the length of a string. <b>{ruleOptions.join(', ')}</b> parameters are used to\r\n                make comparisons with given comparison values.\r\n            </p>\r\n            <div className=\"comparisonDiv\">\r\n                <TextField\r\n                    error={!!get(validationError, 'val')}\r\n                    helperText={get(validationError, 'val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val')}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n\r\n                <Autocomplete\r\n                    className=\"ruleOptionComponent\"\r\n                    value={ruleOption}\r\n                    onChange={(event, newValue) => {\r\n                        handleRuleOptionChange(newValue);\r\n                    }}\r\n                    options={ruleOptions}\r\n                    disableClearable={true}\r\n                    renderInput={(params) => <TextField {...params} label=\"ruleOption\" />}\r\n                />\r\n                {isFunc ? (\r\n                    <TextField\r\n                        className=\"comparisonComponent\"\r\n                        label=\"comparisonValue\"\r\n                        type=\"number\"\r\n                        value={get(formData, 'comparisonValue')}\r\n                        onChange={(e) => setPathValue('comparisonValue', e.target.value)}\r\n                    />\r\n                ) : (\r\n                    <TextField\r\n                        disabled={true}\r\n                        className=\"comparisonComponent\"\r\n                        label=\"comparisonValue\"\r\n                        type=\"number\"\r\n                        value={defaultComparisonValue}\r\n                        onChange={() => {}}\r\n                    />\r\n                )}\r\n                <FormGroup className={'checkboxOnRight'}>\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={isFunc} onChange={(e) => handleSetIsFunc(e.target.checked)} />}\r\n                        label=\"as Function\"\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={currentRules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleLength;\r\n","export const options = ['Asia', 'Europe', 'North America', 'South America', 'Africa', 'Australia', 'Antarctica'];\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { ruleOptions } from '../../constants/Constants';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { options } from '../../constants/Data';\r\n\r\nconst defaultComparisonValue = 3;\r\nconst listSizeRule = { rule: 'listSize' };\r\nlistSizeRule[ruleOptions[0]] = defaultComparisonValue;\r\nconst rules = [{ path: 'val', ruleSet: ['required', listSizeRule], dependantPaths: ['comparisonValue'] }];\r\nconst initialFormData = {\r\n    val: [...options].slice(0, 2),\r\n    ruleOption: ruleOptions[0],\r\n    comparisonValue: defaultComparisonValue,\r\n};\r\n\r\nconst RuleListSize = () => {\r\n    const { isValid, validationError, formData, setPathValue, setRules } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [ruleOption, setRuleOption] = useState(ruleOptions[0]);\r\n    const [isFunc, setIsFunc] = useState(false);\r\n\r\n    const updateRules = (funcParam, ruleParam) => {\r\n        const newRules = JSON.parse(JSON.stringify(rules));\r\n        const newRuleSet = [...newRules[0].ruleSet];\r\n        const newRule = { rule: 'listSize' };\r\n        if (funcParam) {\r\n            newRule[ruleParam] = (formData) => formData['comparisonValue'];\r\n        } else {\r\n            newRule[ruleParam] = defaultComparisonValue;\r\n        }\r\n        newRuleSet.splice(1, 1, newRule);\r\n        newRules[0].ruleSet = newRuleSet;\r\n        setCurrentRules(newRules);\r\n        setRules(newRules);\r\n    };\r\n\r\n    const handleSetIsFunc = (newValue) => {\r\n        updateRules(newValue, ruleOption);\r\n        setIsFunc(newValue);\r\n    };\r\n\r\n    const handleRuleOptionChange = (newValue) => {\r\n        updateRules(isFunc, newValue);\r\n        setRuleOption(newValue);\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"listSize\" codeUrl=\"components/rules/RuleListSize.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>listSize</b> rule checks the length of an array. <b>{ruleOptions.join(', ')}</b> parameters are used\r\n                to make comparisons with given comparison values.\r\n            </p>\r\n            <div className=\"comparisonDiv\">\r\n                <Autocomplete\r\n                    multiple\r\n                    value={get(formData, 'val')}\r\n                    onChange={(event, newValue) => {\r\n                        setPathValue('val', newValue);\r\n                    }}\r\n                    options={options}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            error={!!validationError.val}\r\n                            helperText={validationError.val || ' '}\r\n                            label=\"equalTo\"\r\n                        />\r\n                    )}\r\n                />\r\n\r\n                <Autocomplete\r\n                    className=\"ruleOptionComponent\"\r\n                    value={ruleOption}\r\n                    onChange={(event, newValue) => {\r\n                        handleRuleOptionChange(newValue);\r\n                    }}\r\n                    options={ruleOptions}\r\n                    disableClearable={true}\r\n                    renderInput={(params) => <TextField {...params} label=\"ruleOption\" />}\r\n                />\r\n                {isFunc ? (\r\n                    <TextField\r\n                        className=\"comparisonComponent\"\r\n                        label=\"comparisonValue\"\r\n                        type=\"number\"\r\n                        value={get(formData, 'comparisonValue')}\r\n                        onChange={(e) => setPathValue('comparisonValue', e.target.value)}\r\n                    />\r\n                ) : (\r\n                    <TextField\r\n                        disabled={true}\r\n                        className=\"comparisonComponent\"\r\n                        label=\"comparisonValue\"\r\n                        type=\"number\"\r\n                        value={defaultComparisonValue}\r\n                        onChange={() => {}}\r\n                    />\r\n                )}\r\n                <FormGroup className={'checkboxOnRight'}>\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={isFunc} onChange={(e) => handleSetIsFunc(e.target.checked)} />}\r\n                        label=\"as Function\"\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={currentRules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleListSize;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { ruleOptions } from '../../constants/Constants';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst today = new Date();\r\nconst defaultComparisonValue = today;\r\nvar yesterday = new Date();\r\nyesterday.setDate(yesterday.getDate() - 1);\r\nconst dateRule = { rule: 'date' };\r\ndateRule[ruleOptions[0]] = defaultComparisonValue;\r\nconst rules = [{ path: 'val', ruleSet: ['required', dateRule], dependantPaths: ['comparisonValue'] }];\r\nconst initialFormData = {\r\n    val: yesterday,\r\n    ruleOption: ruleOptions[0],\r\n    comparisonValue: defaultComparisonValue,\r\n};\r\n\r\nconst RuleDate = () => {\r\n    const { isValid, validationError, formData, setPathValue, setRules } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [ruleOption, setRuleOption] = useState(ruleOptions[0]);\r\n    const [isFunc, setIsFunc] = useState(false);\r\n    const [withTime, setWithTime] = useState(false);\r\n\r\n    const updateRules = (funcParam, ruleParam, withTimeParam) => {\r\n        const newRules = JSON.parse(JSON.stringify(rules));\r\n        const newRuleSet = [...newRules[0].ruleSet];\r\n        const newRule = { rule: 'date' };\r\n        if (ruleParam) {\r\n            if (funcParam) {\r\n                newRule[ruleParam] = (formData) => formData['comparisonValue'];\r\n            } else {\r\n                newRule[ruleParam] = defaultComparisonValue;\r\n            }\r\n        }\r\n        if (withTimeParam) {\r\n            newRule['withTime'] = true;\r\n        }\r\n        newRuleSet.splice(1, 1, newRule);\r\n        newRules[0].ruleSet = newRuleSet;\r\n        setCurrentRules(newRules);\r\n        setRules(newRules);\r\n    };\r\n\r\n    const handleSetIsFunc = (newValue) => {\r\n        updateRules(newValue, ruleOption, withTime);\r\n        setIsFunc(newValue);\r\n    };\r\n\r\n    const handleRuleOptionChange = (newValue) => {\r\n        updateRules(isFunc, newValue, withTime);\r\n        setRuleOption(newValue);\r\n    };\r\n\r\n    const handleWithTimeChange = (newValue) => {\r\n        updateRules(isFunc, ruleOption, newValue);\r\n        setWithTime(newValue);\r\n    };\r\n\r\n    const PickerComponent = withTime ? DateTimePicker : DesktopDatePicker;\r\n    const pickerFormat = withTime ? null : 'MM/dd/yyyy';\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"date\" codeUrl=\"components/rules/RuleDate.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>date</b> rule checks if the given value is a valid date. If <b>withTime</b> parameter is set, it\r\n                compares hours and minutes, too. <b>{ruleOptions.join(', ')}</b> parameters are used to make comparisons\r\n                with given comparison values.\r\n            </p>\r\n            <div className=\"comparisonDiv\">\r\n                <PickerComponent\r\n                    label=\"val\"\r\n                    inputFormat={pickerFormat}\r\n                    value={get(formData, 'val')}\r\n                    onChange={(val) => setPathValue('val', val)}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            error={!!get(validationError, 'val')}\r\n                            helperText={get(validationError, 'val') || ' '}\r\n                        />\r\n                    )}\r\n                />\r\n\r\n                <Autocomplete\r\n                    className=\"ruleOptionComponent\"\r\n                    value={ruleOption}\r\n                    onChange={(event, newValue) => {\r\n                        handleRuleOptionChange(newValue);\r\n                    }}\r\n                    options={ruleOptions}\r\n                    disableClearable={false}\r\n                    renderInput={(params) => <TextField {...params} label=\"ruleOption\" />}\r\n                />\r\n                {isFunc ? (\r\n                    <PickerComponent\r\n                        label=\"comparisonValue\"\r\n                        inputFormat={pickerFormat}\r\n                        value={get(formData, 'comparisonValue')}\r\n                        onChange={(val) => setPathValue('comparisonValue', val)}\r\n                        renderInput={(params) => <TextField className=\"comparisonDateComponent\" {...params} />}\r\n                    />\r\n                ) : (\r\n                    <PickerComponent\r\n                        disabled={true}\r\n                        label=\"comparisonValue\"\r\n                        inputFormat={pickerFormat}\r\n                        value={today}\r\n                        onChange={() => {}}\r\n                        renderInput={(params) => <TextField className=\"comparisonDateComponent\" {...params} />}\r\n                    />\r\n                )}\r\n                <FormGroup className={'checkboxOnRight'}>\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={isFunc} onChange={(e) => handleSetIsFunc(e.target.checked)} />}\r\n                        label=\"as Function\"\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n            <div className=\"comparisonDiv\">\r\n                <FormGroup className={'checkboxOnRight'}>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox checked={withTime} onChange={(e) => handleWithTimeChange(e.target.checked)} />\r\n                        }\r\n                        label=\"withTime\"\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={currentRules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleDate;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val: 'aa',\r\n};\r\n\r\nconst rules = [{ path: 'val', ruleSet: [{ rule: 'required' }, { rule: 'email' }] }];\r\n\r\nconst RuleEmail = () => {\r\n    const { isValid, validationError, formData, setPathValue } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"email\" codeUrl=\"components/rules/RuleEmail.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>email</b> rule checks if the given value is a valid email.\r\n            </p>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val')}\r\n                    helperText={get(validationError, 'val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val') || ''}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleEmail;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val: 'aa',\r\n};\r\n\r\nconst rules = [{ path: 'val', ruleSet: [{ rule: 'required' }, { rule: 'url' }] }];\r\n\r\nconst RuleUrl = () => {\r\n    const { isValid, validationError, formData, setPathValue } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"url\" codeUrl=\"components/rules/RuleUrl.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>url</b> rule checks if the given value is a valid url.\r\n            </p>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val')}\r\n                    helperText={get(validationError, 'val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val') || ''}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleUrl;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val: 'aa',\r\n};\r\n\r\nconst rules = [{ path: 'val', ruleSet: [{ rule: 'required' }, { rule: 'iban' }] }];\r\n\r\nconst RuleIban = () => {\r\n    const { isValid, validationError, formData, setPathValue } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"iban\" codeUrl=\"components/rules/RuleIban.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>iban</b> rule checks if the given value is a valid IBAN.\r\n            </p>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val')}\r\n                    helperText={get(validationError, 'val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val') || ''}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleIban;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val: 'aa',\r\n};\r\n\r\nconst customRule = (ruleParams) => {\r\n    const { value } = ruleParams;\r\n    if (value && (!value.includes('g') || value.length < 5)) {\r\n        return 'this field should include letter `g` and its length should be greater than 5';\r\n    }\r\n    return null;\r\n};\r\n\r\nconst rules = [{ path: 'val', ruleSet: ['required', { rule: customRule }] }];\r\n\r\nconst RuleCustomOnHook = () => {\r\n    const { isValid, validationError, formData, setPathValue } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"customly defined on hook\" codeUrl=\"components/rules/RuleCustomOnHook.js\">\r\n            <p className=\"infoParagraph\">Custom rules can be defined as a function and given as a rule definition.</p>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val')}\r\n                    helperText={get(validationError, 'val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val') || ''}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleCustomOnHook;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport { Link } from 'react-router-dom';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val: 'b',\r\n};\r\n\r\nconst rules = [{ path: 'val', ruleSet: [{ rule: 'required' }, { rule: 'myCustomRule' }] }];\r\n\r\nconst RuleCustomOnProvider = () => {\r\n    const { isValid, validationError, formData, setPathValue } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"custom on provider\"\r\n            codeUrl={['components/rules/RuleCustomOnProvider.js', 'components/Main.js']}\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                Custom rules can be defined as a function and passed to{' '}\r\n                <Link className=\"inner-link\" to=\"/api/react-validatable-form-provider\">\r\n                    ReactValidatableFormProvider\r\n                </Link>{' '}\r\n                with a unique name and can be used anywhere in the app.\r\n            </p>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val')}\r\n                    helperText={get(validationError, 'val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val') || ''}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleCustomOnProvider;\r\n","import './FormSubmitResult.css';\r\n\r\nconst stringifyWithFunction = (obj) => {\r\n    var placeholder = '____PLACEHOLDER____';\r\n    var fns = [];\r\n    var json = JSON.stringify(\r\n        obj,\r\n        function (key, value) {\r\n            if (typeof value === 'function') {\r\n                fns.push(value);\r\n                return placeholder;\r\n            }\r\n            return value;\r\n        },\r\n        2\r\n    );\r\n    json = json.replace(new RegExp('\"' + placeholder + '\"', 'g'), function () {\r\n        return fns.shift();\r\n    });\r\n    return json;\r\n};\r\n\r\nconst FormSubmitResult = ({ formData }) => {\r\n    return (\r\n        <div>\r\n            <span className={'formDataString'}>{stringifyWithFunction(formData)}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormSubmitResult;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Button from '@mui/material/Button';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\n\r\nconst initialFormData = {\r\n    textVal1: '',\r\n    textVal2: '',\r\n    val3: [],\r\n    textVal4: '',\r\n    checkVal: false,\r\n};\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 7 }] },\r\n    { path: 'val3', ruleSet: [{ rule: 'required' }, { rule: 'listSize', equalTo: 2 }] },\r\n    { path: 'textVal4', ruleSet: [{ rule: 'required' }, { rule: 'url' }] },\r\n];\r\n\r\nconst AdvancedHideBeforeSubmit = () => {\r\n    const { isValid, validationError, formData, setPathValue, setFormIsSubmitted, resetForm } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n        hideBeforeSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"hideBeforeSubmit\" codeUrl=\"components/advanced/AdvancedHideBeforeSubmit.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>hideBeforeSubmit</b> parameter is used to hide validation errors before <b>setFormIsSubmitted()</b>{' '}\r\n                function is called. Later, validation errors can also be hidden by calling <b>resetForm()</b> function.\r\n            </p>\r\n            <div>\r\n                <div className={'formField'}>\r\n                    <TextField\r\n                        error={!!validationError.textVal1}\r\n                        helperText={validationError.textVal1 || ' '}\r\n                        label=\"requiredField\"\r\n                        type=\"text\"\r\n                        value={formData.textVal1}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                    />\r\n                    <TextField\r\n                        error={!!validationError.textVal2}\r\n                        helperText={validationError.textVal2 || ' '}\r\n                        label=\"requiredAndLengthField\"\r\n                        type=\"text\"\r\n                        value={formData.textVal2}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                    />\r\n                    <Autocomplete\r\n                        multiple\r\n                        value={formData.val3}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('val3', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!validationError.val3}\r\n                                helperText={validationError.val3 || ' '}\r\n                                label=\"requiredAndListSize\"\r\n                            />\r\n                        )}\r\n                    />\r\n                    <TextField\r\n                        error={!!validationError.textVal4}\r\n                        helperText={validationError.textVal4 || ' '}\r\n                        label=\"requiredAndUrl\"\r\n                        type=\"text\"\r\n                        value={formData.textVal4}\r\n                        onChange={(e) => setPathValue('textVal4', e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => resetForm()}>\r\n                        Reset Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default AdvancedHideBeforeSubmit;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Button from '@mui/material/Button';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\n\r\nconst initialFormData = {};\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 7 }] },\r\n    { path: 'val3', ruleSet: [{ rule: 'required' }, { rule: 'listSize', equalTo: 2 }] },\r\n    { path: 'textVal4', ruleSet: [{ rule: 'required' }, { rule: 'url' }] },\r\n];\r\n\r\nconst AdvancedShowAfterBlur = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        resetForm,\r\n    } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"showAfterBlur\" codeUrl=\"components/advanced/AdvancedShowAfterBlur.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>showAfterBlur</b> parameter is used to show validation error of a path after{' '}\r\n                <b>setPathIsBlurred(path)</b> function is called. Later, validation errors can also be hidden by calling{' '}\r\n                <b>resetForm()</b> function.\r\n            </p>\r\n            <div>\r\n                <div className={'formField'}>\r\n                    <TextField\r\n                        id={'textVal1'}\r\n                        error={!!get(validationError, 'textVal1')}\r\n                        helperText={get(validationError, 'textVal1') || ' '}\r\n                        label=\"requiredField\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                    />\r\n                    <TextField\r\n                        id={'textVal2'}\r\n                        error={!!get(validationError, 'textVal2')}\r\n                        helperText={get(validationError, 'textVal2') || ' '}\r\n                        label=\"requiredAndLengthField\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                    />\r\n                    <Autocomplete\r\n                        id={'val3'}\r\n                        multiple\r\n                        value={get(formData, 'val3') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('val3', newValue);\r\n                        }}\r\n                        onBlur={() => setPathIsBlurred('val3')}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!get(validationError, 'val3')}\r\n                                helperText={get(validationError, 'val3') || ' '}\r\n                                label=\"requiredAndListSize\"\r\n                            />\r\n                        )}\r\n                    />\r\n                    <TextField\r\n                        id={'textVal4'}\r\n                        error={!!get(validationError, 'textVal4')}\r\n                        helperText={get(validationError, 'textVal4') || ' '}\r\n                        label=\"requiredAndUrl\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal4') || ''}\r\n                        onChange={(e) => setPathValue('textVal4', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal4')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => resetForm()}>\r\n                        Reset Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default AdvancedShowAfterBlur;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Button from '@mui/material/Button';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\n\r\nconst initialFormData = {\r\n    textVal1: '',\r\n    textVal2: '',\r\n    val3: [],\r\n    textVal4: '',\r\n    checkVal: false,\r\n};\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    {\r\n        path: 'textVal2',\r\n        ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 7 }],\r\n    },\r\n    { path: 'val3', ruleSet: [{ rule: 'required' }, { rule: 'listSize', equalTo: 2 }] },\r\n    { path: 'textVal4', ruleSet: [{ rule: 'required' }, { rule: 'url' }] },\r\n];\r\n\r\nconst AdvancedFocusToErrorAfterSubmit = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n    } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"focusToErrorAfterSubmit\"\r\n            codeUrl=\"components/advanced/AdvancedFocusToErrorAfterSubmit.js\"\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                <b>focusToErrorAfterSubmit</b> parameter is used to automatically focus to the first element with a\r\n                validation error. In order to find the element on DOM, <b>path</b> value should be equal to the HTML\r\n                element ID. If DOM element ID is different than <b>path</b> value, then the DOM element ID should be\r\n                passed as <b>elementId</b> param to the rule definition.\r\n            </p>\r\n            <div>\r\n                <div className={'formField'}>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal1')}\r\n                        helperText={get(validationError, 'textVal1') || ' '}\r\n                        label=\"requiredField\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal1')}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal2')}\r\n                        helperText={get(validationError, 'textVal2') || ' '}\r\n                        label=\"requiredAndLengthField\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal2')}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                    <Autocomplete\r\n                        multiple\r\n                        value={get(formData, 'val3')}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('val3', newValue);\r\n                        }}\r\n                        onBlur={() => setPathIsBlurred('val3')}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!get(validationError, 'val3')}\r\n                                helperText={get(validationError, 'val3') || ' '}\r\n                                label=\"requiredAndListSize\"\r\n                            />\r\n                        )}\r\n                        id=\"val3\"\r\n                    />\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal4')}\r\n                        helperText={get(validationError, 'textVal4') || ' '}\r\n                        label=\"requiredAndUrl\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal4')}\r\n                        onChange={(e) => setPathValue('textVal4', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal4')}\r\n                        id=\"textVal4\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default AdvancedFocusToErrorAfterSubmit;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val1: 'a',\r\n    val2: 'a',\r\n    checkVal: false,\r\n};\r\n\r\nconst customMessageFunc = (errorParams) => {\r\n    if (errorParams.value > errorParams.comparisonValue) {\r\n        return `This field's length should be ${errorParams.comparisonValue}, your input's (${errorParams.value}) is greater than this value`;\r\n    }\r\n    return `This field's length should be ${errorParams.comparisonValue}, your input's (${errorParams.value}) is less than this value`;\r\n};\r\n\r\nconst rules = [\r\n    {\r\n        path: 'val1',\r\n        ruleSet: [\r\n            'required',\r\n            {\r\n                rule: 'length',\r\n                greaterThan: 8,\r\n                customMessage: \"This field's length is ${value}, however it should be greater than ${comparisonValue}\",\r\n            },\r\n        ],\r\n    },\r\n    { path: 'val2', ruleSet: ['required', { rule: 'length', equalTo: 5, customMessage: customMessageFunc }] },\r\n];\r\n\r\nconst CustomMessage = () => {\r\n    const { isValid, validationError, formData, setPathValue } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"customMessage\" codeUrl=\"components/customizations/CustomMessage.js\">\r\n            <p className=\"infoParagraph\">\r\n                Validation error message of a rule can be customized by passing <b>customMessage</b> param to the rule.\r\n            </p>\r\n            <div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!validationError.val1}\r\n                        helperText={validationError.val1 || ' '}\r\n                        label=\"val1 (customMessage as string)\"\r\n                        type=\"text\"\r\n                        value={formData.val1}\r\n                        onChange={(e) => setPathValue('val1', e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!validationError.val2}\r\n                        helperText={validationError.val2 || ' '}\r\n                        label=\"val2 (customMessage as function)\"\r\n                        type=\"text\"\r\n                        value={formData.val2}\r\n                        onChange={(e) => setPathValue('val2', e.target.value)}\r\n                    />\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default CustomMessage;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport { Link } from 'react-router-dom';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val1: '',\r\n    val2: '',\r\n    checkVal: false,\r\n};\r\n\r\nconst rules = [\r\n    { path: 'val1', ruleSet: ['required', { rule: 'length', greaterThan: 8 }] },\r\n    { path: 'val2', ruleSet: ['required', { rule: 'length', equalTo: 5 }] },\r\n];\r\n\r\nconst CustomTranslations = () => {\r\n    const { isValid, validationError, formData, setPathValue } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"translations\"\r\n            codeUrl={['components/customizations/CustomTranslations.js', 'components/Main.js']}\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                Validation error messages of any rules can be customized in app by passing <b>translations</b> param to{' '}\r\n                <Link className=\"inner-link\" to=\"/api/react-validatable-form-provider\">\r\n                    ReactValidatableFormProvider\r\n                </Link>\r\n                .\r\n            </p>\r\n            <div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!validationError.val1}\r\n                        helperText={validationError.val1 || ' '}\r\n                        label=\"val1 (requiredAndLengthGreaterThan)\"\r\n                        type=\"text\"\r\n                        value={formData.val1}\r\n                        onChange={(e) => setPathValue('val1', e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!validationError.val2}\r\n                        helperText={validationError.val2 || ' '}\r\n                        label=\"val2 (requiredAndLengthEqualTo)\"\r\n                        type=\"text\"\r\n                        value={formData.val2}\r\n                        onChange={(e) => setPathValue('val2', e.target.value)}\r\n                    />\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default CustomTranslations;\r\n","import get from 'lodash.get';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nconst AdvancedSubComponent = (props) => {\r\n    const { validationError, formData, setPathValue, setPathIsBlurred } = props;\r\n    return (\r\n        <div>\r\n            <div className={'formField'}>\r\n                <TextField\r\n                    error={!!get(validationError, 'subComponentElement1')}\r\n                    helperText={get(validationError, 'subComponentElement1') || ' '}\r\n                    label=\"subComponentElement1\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'subComponentElement1') || ''}\r\n                    onChange={(e) => setPathValue('subComponentElement1', e.target.value)}\r\n                    onBlur={() => setPathIsBlurred('subComponentElement1')}\r\n                    id=\"subComponentElement1\"\r\n                />\r\n                <TextField\r\n                    error={!!get(validationError, 'subComponentElement2')}\r\n                    helperText={get(validationError, 'subComponentElement2') || ' '}\r\n                    label=\"subComponentElement2\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'subComponentElement2') || ''}\r\n                    onChange={(e) => setPathValue('subComponentElement2', e.target.value)}\r\n                    onBlur={() => setPathIsBlurred('subComponentElement2')}\r\n                    id=\"subComponentElement2\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdvancedSubComponent;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport AdvancedSubComponent from './AdvancedSubComponent';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\n\r\nconst disableSubkey2 = (formData, index) => {\r\n    return formData.disableAllSubkey2Rule || formData.listChild[index].disableSubkey2Rule;\r\n};\r\n\r\nconst rules = [\r\n    { path: 'child1', ruleSet: ['required'] },\r\n    { path: 'child2', ruleSet: ['required'] },\r\n    { path: 'child3.subchild1', ruleSet: ['required'] },\r\n    { path: 'child3.subchild2', ruleSet: ['required'] },\r\n    {\r\n        listPath: 'listChild',\r\n        subRules: [\r\n            {\r\n                path: 'subkey1',\r\n                ruleSet: ['required', { rule: 'length', greaterThan: 3 }],\r\n            },\r\n            {\r\n                path: 'subkey2',\r\n                ruleSet: [\r\n                    {\r\n                        rule: 'required',\r\n                        disableIf: disableSubkey2,\r\n                    },\r\n                    {\r\n                        rule: 'number',\r\n                        greaterThan: 5,\r\n                        disableIf: disableSubkey2,\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n        dependantPaths: ['disableAllSubkey2Rule'],\r\n    },\r\n    {\r\n        path: 'listChild',\r\n        ruleSet: [\r\n            { rule: 'required', customMessage: 'This list should not be empty' },\r\n            { rule: 'listSize', greaterThan: 2 },\r\n        ],\r\n        elementId: 'listErrorFocusElement',\r\n    },\r\n    { path: 'bottomElement1', ruleSet: ['required'] },\r\n    { path: 'bottomElement2', ruleSet: [{ rule: 'length', greaterThan: 3, applyToNulls: true }] },\r\n    { path: 'subComponentElement1', ruleSet: ['required'] },\r\n    { path: 'subComponentElement2', ruleSet: ['required'] },\r\n];\r\n\r\nconst AdvancedValidateComplexForms = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n    } = useValidatableForm({\r\n        rules,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [nextId, setNextId] = useState(1);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    const handleAddElement = () => {\r\n        const newListChild = formData.listChild ? [...formData.listChild] : [];\r\n        newListChild.push({ id: nextId });\r\n        setNextId(nextId + 1);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    const handleDeleteElement = (id) => {\r\n        const newListChild = formData.listChild.filter((el) => el.id !== id);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    let listChildJsx = null;\r\n\r\n    if (formData.listChild && formData.listChild.length > 0) {\r\n        listChildJsx = formData.listChild.map((lc, index) => {\r\n            return (\r\n                <div key={lc.id} className=\"formListItem\">\r\n                    <TextField\r\n                        error={!!get(validationError, `listChild{${index}}.subkey1`)}\r\n                        helperText={get(validationError, `listChild{${index}}.subkey1`) || ' '}\r\n                        label=\"lengthGreaterThan3\"\r\n                        type=\"text\"\r\n                        value={get(formData, `listChild[${index}].subkey1`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}].subkey1`, e.target.value)}\r\n                        onBlur={() => setPathIsBlurred(`listChild{${index}}.subkey1`)}\r\n                        id={`listChild{${index}}.subkey1`}\r\n                    />\r\n                    <TextField\r\n                        error={!!get(validationError, `listChild{${index}}.subkey2`)}\r\n                        helperText={get(validationError, `listChild{${index}}.subkey2`) || ' '}\r\n                        label=\"numberGreaterThan5\"\r\n                        type=\"number\"\r\n                        value={get(formData, `listChild[${index}].subkey2`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}].subkey2`, e.target.value)}\r\n                        onBlur={() => setPathIsBlurred(`listChild{${index}}.subkey2`)}\r\n                        id={`listChild{${index}}.subkey2`}\r\n                    />\r\n                    disable\r\n                    {\r\n                        <Checkbox\r\n                            checked={get(formData, `listChild[${index}].disableSubkey2Rule`) || false}\r\n                            onChange={(e) => setPathValue(`listChild[${index}].disableSubkey2Rule`, e.target.checked)}\r\n                        />\r\n                    }\r\n                    <Button className=\"myDeleteButton\" variant=\"contained\" onClick={() => handleDeleteElement(lc.id)}>\r\n                        <span className=\"myShinkableButtonSpan\">Delete Element</span>\r\n                        <DeleteIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"Validate Complex Forms\"\r\n            codeUrl={[\r\n                'components/advanced/AdvancedValidateComplexForms.js',\r\n                'components/advanced/AdvancedSubComponent.js',\r\n            ]}\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                <b>react-validatable-form</b> can handle validation of complex forms. The form can have multiple paths,\r\n                listPaths and subcomponents.\r\n            </p>\r\n            <div>\r\n                <div className={'formField'}>\r\n                    <TextField\r\n                        error={!!get(validationError, 'child1')}\r\n                        helperText={get(validationError, 'child1') || ' '}\r\n                        label=\"child1\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'child1') || ''}\r\n                        onChange={(e) => setPathValue('child1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('child1')}\r\n                        id=\"child1\"\r\n                    />\r\n                    <TextField\r\n                        error={!!get(validationError, 'child2')}\r\n                        helperText={get(validationError, 'child2') || ' '}\r\n                        label=\"child2\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'child2') || ''}\r\n                        onChange={(e) => setPathValue('child2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('child2')}\r\n                        id=\"child2\"\r\n                    />\r\n                    <TextField\r\n                        error={!!get(validationError, 'child3.subchild1')}\r\n                        helperText={get(validationError, 'child3.subchild1') || ' '}\r\n                        label=\"child3.subchild1\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'child3.subchild1') || ''}\r\n                        onChange={(e) => setPathValue('child3.subchild1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('child3.subchild1')}\r\n                        id=\"child3.subchild1\"\r\n                    />\r\n                    <TextField\r\n                        error={!!get(validationError, 'child3.subchild2')}\r\n                        helperText={get(validationError, 'child3.subchild2') || ' '}\r\n                        label=\"child3.subchild2\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'child3.subchild2') || ''}\r\n                        onChange={(e) => setPathValue('child3.subchild2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('child3.subchild2')}\r\n                        id=\"child3.subchild2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        className=\"myAddButton\"\r\n                        variant=\"contained\"\r\n                        onClick={() => handleAddElement()}\r\n                        id={'listErrorFocusElement'}\r\n                    >\r\n                        <span className=\"myShinkableButtonSpan\">Add New Element</span>\r\n                        <AddIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                    <span style={{ marginLeft: 10 }}>disable all subkey2 rows</span>\r\n                    {\r\n                        <Checkbox\r\n                            checked={get(formData, `disableAllSubkey2Rule`) || false}\r\n                            onChange={(e) => setPathValue(`disableAllSubkey2Rule`, e.target.checked)}\r\n                        />\r\n                    }\r\n                </div>\r\n                <div className={'complexFormListField'}>{listChildJsx}</div>\r\n                <div className={'errorInfoText'}>{get(validationError, 'listChild')}</div>\r\n                <div className={'formField'}>\r\n                    <TextField\r\n                        error={!!get(validationError, 'bottomElement1')}\r\n                        helperText={get(validationError, 'bottomElement1') || ' '}\r\n                        label=\"bottomElement1\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'bottomElement1') || ''}\r\n                        onChange={(e) => setPathValue('bottomElement1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('bottomElement1')}\r\n                        id=\"bottomElement1\"\r\n                    />\r\n                    <TextField\r\n                        error={!!get(validationError, 'bottomElement2')}\r\n                        helperText={get(validationError, 'bottomElement2') || ' '}\r\n                        label=\"bottomElement2\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'bottomElement2') || ''}\r\n                        onChange={(e) => setPathValue('bottomElement2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('bottomElement2')}\r\n                        id=\"bottomElement2\"\r\n                    />\r\n                </div>\r\n                <AdvancedSubComponent\r\n                    validationError={validationError}\r\n                    formData={formData}\r\n                    setPathValue={setPathValue}\r\n                    setPathIsBlurred={setPathIsBlurred}\r\n                />\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default AdvancedValidateComplexForms;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport { Link } from 'react-router-dom';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\n\r\nconst rules = [\r\n    { path: 'listChild', ruleSet: ['required', { rule: 'listSize', greaterThan: 2 }] },\r\n    {\r\n        listPath: 'listChild',\r\n        ruleSet: ['required', { rule: 'length', greaterThan: 3 }],\r\n    },\r\n];\r\n\r\nconst AdvancedValidateLists = () => {\r\n    const { isValid, validationError, formData, setPathValue, setFormIsSubmitted } = useValidatableForm({\r\n        rules,\r\n        initialFormData: { listChild: [''] },\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    let listChildJsx = null;\r\n\r\n    const handleAddElement = () => {\r\n        const newListChild = [...formData.listChild];\r\n        newListChild.push('');\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    const handleDeleteElement = (index) => {\r\n        const newListChild = formData.listChild.filter((el, ind) => ind !== index);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    if (formData.listChild && formData.listChild.length > 0) {\r\n        listChildJsx = formData.listChild.map((lc, index) => {\r\n            return (\r\n                <div key={index}>\r\n                    <TextField\r\n                        error={!!get(validationError, `listChild{${index}}`)}\r\n                        helperText={get(validationError, `listChild{${index}}`) || ' '}\r\n                        label=\"lengthGreaterThan3\"\r\n                        type=\"text\"\r\n                        value={get(formData, `listChild[${index}]`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}]`, e.target.value)}\r\n                    />\r\n                    <Button className=\"myDeleteButton\" variant=\"contained\" onClick={() => handleDeleteElement(index)}>\r\n                        <span className=\"myShinkableButtonSpan\">Delete Element</span>\r\n                        <DeleteIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"Validate Lists\" codeUrl=\"components/advanced/AdvancedValidateLists.js\">\r\n            <p className=\"infoParagraph\">\r\n                An array of values can be validated using{' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    listPath\r\n                </Link>{' '}\r\n                key.\r\n            </p>\r\n            <div>\r\n                <div>\r\n                    <Button className=\"myAddButton\" variant=\"contained\" onClick={() => handleAddElement()}>\r\n                        <span className=\"myShinkableButtonSpan\">Add New Element</span>\r\n                        <AddIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n                <div className={'formListField'}>{listChildJsx}</div>\r\n                <div className={'errorInfoText'}>{get(validationError, 'listChild')}</div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default AdvancedValidateLists;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {};\r\n\r\nconst rules = [\r\n    {\r\n        path: 'val1',\r\n        ruleSet: [\r\n            {\r\n                rule: 'required',\r\n                disableIf: (formData) => formData['disableVal1Rule'],\r\n            },\r\n        ],\r\n        dependantPaths: ['disableVal1Rule'],\r\n    },\r\n    {\r\n        path: 'val2',\r\n        ruleSet: [\r\n            {\r\n                rule: 'required',\r\n                enableIf: (formData) => formData['enableVal2Rule'],\r\n            },\r\n        ],\r\n        dependantPaths: ['enableVal2Rule'],\r\n    },\r\n];\r\n\r\nconst CustomConditionalRules = () => {\r\n    const { isValid, validationError, formData, setPathValue } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"disableIf & enableIf\"\r\n            codeUrl={'components/customizations/CustomConditionalRules.js'}\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                Any validation rule can be disabled if the defined <b>disableIf</b> function returns true. Any\r\n                validation rule can only be enabled if the defined <b>enableIf</b> function returns true.\r\n            </p>\r\n            <div>\r\n                <div className={'textAndCheckboxDiv'}>\r\n                    <TextField\r\n                        error={!!get(validationError, 'val1')}\r\n                        helperText={get(validationError, 'val1') || ' '}\r\n                        label=\"val1\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'val1') || ''}\r\n                        onChange={(e) => setPathValue('val1', e.target.value)}\r\n                    />\r\n                    <FormGroup className={'checkboxOnRight'}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={get(formData, 'disableVal1Rule') || false}\r\n                                    onChange={(e) => setPathValue('disableVal1Rule', e.target.checked)}\r\n                                />\r\n                            }\r\n                            label=\"Disable val1 Rule\"\r\n                        />\r\n                    </FormGroup>\r\n                </div>\r\n                <div className={'textAndCheckboxDiv'}>\r\n                    <TextField\r\n                        error={!!get(validationError, 'val2')}\r\n                        helperText={get(validationError, 'val2') || ' '}\r\n                        label=\"val2\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'val2') || ''}\r\n                        onChange={(e) => setPathValue('val2', e.target.value)}\r\n                    />\r\n                    <FormGroup className={'checkboxOnRight'}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={get(formData, 'enableVal2Rule') || false}\r\n                                    onChange={(e) => setPathValue('enableVal2Rule', e.target.checked)}\r\n                                />\r\n                            }\r\n                            label=\"Enable val2 Rule\"\r\n                        />\r\n                    </FormGroup>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default CustomConditionalRules;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val: 'ab',\r\n    val2: 'a1',\r\n};\r\n\r\nconst rules = [\r\n    { path: 'val', ruleSet: [{ rule: 'required' }, { rule: 'regex', regex: /ab+c/ }] },\r\n    { path: 'val2', ruleSet: [{ rule: 'required' }, { rule: 'regex', regex: /\\D\\d\\D/ }] },\r\n];\r\n\r\nconst RuleRegex = () => {\r\n    const { isValid, validationError, formData, setPathValue } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"regex\" codeUrl=\"components/rules/RuleRegex.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>regex</b> rule checks if the given value is a valid string according to given{' '}\r\n                <a\r\n                    className=\"outsideUrlSpan\"\r\n                    href={'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions'}\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    regex\r\n                </a>\r\n                .\r\n            </p>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val')}\r\n                    helperText={get(validationError, 'val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val') || ''}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n                <span className=\"regexInfo\">regex: /ab+c/</span>\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val2')}\r\n                    helperText={get(validationError, 'val2') || ' '}\r\n                    label=\"val2\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val2') || ''}\r\n                    onChange={(e) => setPathValue('val2', e.target.value)}\r\n                />\r\n                <span className=\"regexInfo\">regex: /\\D\\d\\D/</span>\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleRegex;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\n\r\nconst rules = [\r\n    {\r\n        listPath: 'listChild',\r\n        ruleSet: ['required', { rule: 'length', greaterThan: 3 }],\r\n    },\r\n    {\r\n        path: 'listChild',\r\n        ruleSet: ['required', { rule: 'listSize', greaterThan: 2 }],\r\n        elementId: 'listErrorFocusElement',\r\n    },\r\n];\r\n\r\nconst AdvancedFocusToErrorOnListAfterSubmit = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n    } = useValidatableForm({\r\n        rules,\r\n        initialFormData: { listChild: [''] },\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    let listChildJsx = null;\r\n\r\n    const handleAddElement = () => {\r\n        const newListChild = [...formData.listChild];\r\n        newListChild.push('');\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    const handleDeleteElement = (index) => {\r\n        const newListChild = formData.listChild.filter((el, ind) => ind !== index);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    if (formData.listChild && formData.listChild.length > 0) {\r\n        listChildJsx = formData.listChild.map((lc, index) => {\r\n            return (\r\n                <div key={index}>\r\n                    <TextField\r\n                        error={!!get(validationError, `listChild{${index}}`)}\r\n                        helperText={get(validationError, `listChild{${index}}`) || ' '}\r\n                        label=\"lengthGreaterThan3\"\r\n                        type=\"text\"\r\n                        value={get(formData, `listChild[${index}]`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}]`, e.target.value)}\r\n                        onBlur={() => setPathIsBlurred(`listChild{${index}}`)}\r\n                        id={`listChild{${index}}`}\r\n                    />\r\n                    <Button className=\"myDeleteButton\" variant=\"contained\" onClick={() => handleDeleteElement(index)}>\r\n                        <span className=\"myShinkableButtonSpan\">Delete Element</span>\r\n                        <DeleteIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"focusToErrorAfterSubmit on Lists\"\r\n            codeUrl=\"components/advanced/AdvancedFocusToErrorOnListAfterSubmit.js\"\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                <b>focusToErrorAfterSubmit</b> parameter is used to automatically focus to the first element of list\r\n                with validation errors. In order to find the element on DOM, <b>listPath</b> value and index of the list\r\n                should be equal to the HTML element ID in a format <b>{'listPath{index}'}</b>. If DOM list element ID\r\n                prefix is different than <b>listPath</b> value, then the DOM element ID prefix should be passed as{' '}\r\n                <b>listElementId</b> param to the rule definition.\r\n            </p>\r\n            <div>\r\n                <div>\r\n                    <Button\r\n                        className=\"myAddButton\"\r\n                        variant=\"contained\"\r\n                        onClick={() => handleAddElement()}\r\n                        id={'listErrorFocusElement'}\r\n                    >\r\n                        <span className=\"myShinkableButtonSpan\">Add New Element</span>\r\n                        <AddIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n                <div className={'formListField'}>{listChildJsx}</div>\r\n                <div className={'errorInfoText'}>{get(validationError, 'listChild')}</div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default AdvancedFocusToErrorOnListAfterSubmit;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport { Link } from 'react-router-dom';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\n\r\nconst disableSubkey2 = (formData, index) => {\r\n    return formData.disableAllSubkey2Rule || formData.listChild[index].disableSubkey2Rule;\r\n};\r\n\r\nconst rules = [\r\n    {\r\n        listPath: 'listChild',\r\n        subRules: [\r\n            {\r\n                path: 'subkey1',\r\n                ruleSet: ['required', { rule: 'length', greaterThan: 3 }],\r\n            },\r\n            {\r\n                path: 'subkey2',\r\n                ruleSet: [\r\n                    {\r\n                        rule: 'required',\r\n                        disableIf: disableSubkey2,\r\n                    },\r\n                    {\r\n                        rule: 'number',\r\n                        greaterThan: 5,\r\n                        disableIf: disableSubkey2,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                path: 'subkey3',\r\n                ruleSet: ['required'],\r\n                elementId: 'subkey3ElementId',\r\n            },\r\n        ],\r\n        dependantPaths: ['disableAllSubkey2Rule'],\r\n    },\r\n    {\r\n        path: 'listChild',\r\n        ruleSet: ['required', { rule: 'listSize', greaterThan: 2 }],\r\n        elementId: 'listErrorFocusElement',\r\n    },\r\n];\r\n\r\nconst AdvancedValidateListOfObjects = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n    } = useValidatableForm({\r\n        rules,\r\n        initialFormData: { listChild: [{ id: 1 }] },\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [nextId, setNextId] = useState(2);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    let listChildJsx = null;\r\n\r\n    const handleAddElement = () => {\r\n        const newListChild = [...formData.listChild];\r\n        newListChild.push({ id: nextId });\r\n        setNextId(nextId + 1);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    const handleDeleteElement = (id) => {\r\n        const newListChild = formData.listChild.filter((el) => el.id !== id);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    if (formData.listChild && formData.listChild.length > 0) {\r\n        listChildJsx = formData.listChild.map((lc, index) => {\r\n            return (\r\n                <div key={lc.id} className=\"formListItem\">\r\n                    <TextField\r\n                        style={{ width: 200 }}\r\n                        error={!!get(validationError, `listChild{${index}}.subkey1`)}\r\n                        helperText={get(validationError, `listChild{${index}}.subkey1`) || ' '}\r\n                        label=\"lengthGreaterThan3\"\r\n                        type=\"text\"\r\n                        value={get(formData, `listChild[${index}].subkey1`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}].subkey1`, e.target.value)}\r\n                        onBlur={() => setPathIsBlurred(`listChild{${index}}.subkey1`)}\r\n                        id={`listChild{${index}}.subkey1`}\r\n                    />\r\n                    <TextField\r\n                        style={{ width: 200 }}\r\n                        error={!!get(validationError, `listChild{${index}}.subkey2`)}\r\n                        helperText={get(validationError, `listChild{${index}}.subkey2`) || ' '}\r\n                        label=\"numberGreaterThan5\"\r\n                        type=\"number\"\r\n                        value={get(formData, `listChild[${index}].subkey2`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}].subkey2`, e.target.value)}\r\n                        onBlur={() => setPathIsBlurred(`listChild{${index}}.subkey2`)}\r\n                        id={`listChild{${index}}.subkey2`}\r\n                    />\r\n                    disable\r\n                    {\r\n                        <Checkbox\r\n                            checked={get(formData, `listChild[${index}].disableSubkey2Rule`) || false}\r\n                            onChange={(e) => setPathValue(`listChild[${index}].disableSubkey2Rule`, e.target.checked)}\r\n                        />\r\n                    }\r\n                    <TextField\r\n                        style={{ width: 200 }}\r\n                        error={!!get(validationError, `listChild{${index}}.subkey3`)}\r\n                        helperText={get(validationError, `listChild{${index}}.subkey3`) || ' '}\r\n                        label=\"required\"\r\n                        type=\"text\"\r\n                        value={get(formData, `listChild[${index}].subkey3`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}].subkey3`, e.target.value)}\r\n                        onBlur={() => setPathIsBlurred(`listChild{${index}}.subkey3`)}\r\n                        id={`listChild{${index}}.subkey3ElementId`}\r\n                    />\r\n                    <Button className=\"myDeleteButton\" variant=\"contained\" onClick={() => handleDeleteElement(lc.id)}>\r\n                        <span className=\"myShinkableButtonSpan\">Delete Element</span>\r\n                        <DeleteIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"Validate List of Objects\"\r\n            codeUrl=\"components/advanced/AdvancedValidateListOfObjects.js\"\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                An array of objects with more than one subkeys can be validated using{' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    listPath\r\n                </Link>{' '}\r\n                and each subkey can have different rules which should be defined in <b>subRules</b> key.\r\n            </p>\r\n            <div>\r\n                <div>\r\n                    <Button\r\n                        className=\"myAddButton\"\r\n                        variant=\"contained\"\r\n                        onClick={() => handleAddElement()}\r\n                        id={'listErrorFocusElement'}\r\n                    >\r\n                        <span className=\"myShinkableButtonSpan\">Add New Element</span>\r\n                        <AddIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                    <span style={{ marginLeft: 10 }}>disable all subkey2 rows</span>\r\n                    {\r\n                        <Checkbox\r\n                            checked={get(formData, `disableAllSubkey2Rule`) || false}\r\n                            onChange={(e) => setPathValue(`disableAllSubkey2Rule`, e.target.checked)}\r\n                        />\r\n                    }\r\n                </div>\r\n                <div className={'formListField'}>{listChildJsx}</div>\r\n                <div className={'errorInfoText'}>{get(validationError, 'listChild')}</div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default AdvancedValidateListOfObjects;\r\n","import Button from '@mui/material/Button';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport './Installation.css';\r\nimport { useState } from 'react';\r\n\r\nconst npmCommandHeader = '// with npm';\r\nconst npmCommand = 'npm install react-validatable-form';\r\nconst yarnCommandHeader = '// with yarn';\r\nconst yarnCommand = 'yarn add react-validatable-form';\r\n\r\nconst Installation = () => {\r\n    const [npmCopied, setNpmCopied] = useState(false);\r\n    const [yarnCopied, setYarnCopied] = useState(false);\r\n\r\n    const handleNpmCopy = () => {\r\n        setYarnCopied(false);\r\n        setNpmCopied(true);\r\n        navigator.clipboard.writeText(npmCommand);\r\n        setTimeout(() => {\r\n            setNpmCopied(false);\r\n        }, 1000);\r\n    };\r\n\r\n    const handleYarnCopy = () => {\r\n        setNpmCopied(false);\r\n        setYarnCopied(true);\r\n        navigator.clipboard.writeText(yarnCommand);\r\n        setTimeout(() => {\r\n            setYarnCopied(false);\r\n        }, 1000);\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"Installation\">\r\n            <p className=\"infoParagraph\">\r\n                <a\r\n                    className=\"outsideUrlSpan\"\r\n                    href={'https://www.npmjs.com/package/react-validatable-form'}\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    react-validatable-form\r\n                </a>{' '}\r\n                is a{' '}\r\n                <a\r\n                    className=\"outsideUrlSpan\"\r\n                    href={'https://reactjs.org/docs/hooks-intro.html'}\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    React hook\r\n                </a>{' '}\r\n                that is used to create dynamic client side validations on React forms.\r\n            </p>\r\n            <div className=\"outsideUrlSpan\">\r\n                <a href={'https://www.npmjs.com/package/react-validatable-form'} target=\"_blank\" rel=\"noreferrer\">\r\n                    View on npmjs\r\n                </a>\r\n            </div>\r\n\r\n            <div className=\"outsideUrlSpan\">\r\n                <a href={'https://github.com/obss/react-validatable-form'} target=\"_blank\" rel=\"noreferrer\">\r\n                    View on GitHub\r\n                </a>\r\n            </div>\r\n\r\n            <div className=\"installButtonsDiv\">\r\n                <Tooltip open={npmCopied} placement=\"top\" title=\"copied!\">\r\n                    <Button variant=\"outlined\" onClick={handleNpmCopy}>\r\n                        <div className=\"commandBox\">\r\n                            <p>{npmCommandHeader}</p>\r\n                            <p className=\"commandText\">{npmCommand}</p>\r\n                        </div>\r\n                        <span className=\"installButtonIcon\">\r\n                            {npmCopied ? <DoneOutlineIcon /> : <ContentCopyIcon />}\r\n                        </span>\r\n                    </Button>\r\n                </Tooltip>\r\n                <Tooltip open={yarnCopied} placement=\"bottom\" title=\"copied!\">\r\n                    <Button variant=\"outlined\" onClick={handleYarnCopy}>\r\n                        <div className=\"commandBox\">\r\n                            <p>{yarnCommandHeader}</p>\r\n                            <p className=\"commandText\">{yarnCommand}</p>\r\n                        </div>\r\n                        <span className=\"installButtonIcon\">\r\n                            {yarnCopied ? <DoneOutlineIcon /> : <ContentCopyIcon />}\r\n                        </span>\r\n                    </Button>\r\n                </Tooltip>\r\n            </div>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default Installation;\r\n","import { Link } from 'react-router-dom';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport './Usage.css';\r\n\r\nconst Usage = (props) => {\r\n    const providerCode = `import { ReactValidatableFormProvider } from 'react-validatable-form';\r\n\r\n    //....\r\n    return <ReactValidatableFormProvider>\r\n                <App />\r\n        </ReactValidatableFormProvider>;\r\n    `;\r\n\r\n    const hookCode = `import { useValidatableForm } from 'react-validatable-form';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n//....\r\n    \r\nconst initialFormData = {};\r\nconst rules = [{ path: 'val', ruleSet: [{ rule: 'required' }] }];\r\n\r\n//....\r\n\r\n    const { isValid, formData, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return <TextField\r\n        error={!!getError('val')}\r\n        helperText={getError('val') || ' '}\r\n        label=\"val\"\r\n        type=\"text\"\r\n        value={getValue('val') || ''}\r\n        onChange={(e) => setPathValue('val', e.target.value)}\r\n    />;\r\n    `;\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"Usage\">\r\n            <div className=\"infoParagraph\">\r\n                <b>react-validatable-form</b> is based on{' '}\r\n                <a\r\n                    className=\"outsideUrlSpan\"\r\n                    href={'https://reactjs.org/docs/context.html'}\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    Context\r\n                </a>\r\n                . <b>useValidatableForm</b> hook should be used inside <b>ReactValidatableFormProvider</b>. Wrap your\r\n                App inside <b>ReactValidatableFormProvider</b> and pass the app-scoped{' '}\r\n                <span className=\"inner-link\" onClick={props.openSettingsDialog}>\r\n                    props\r\n                </span>\r\n                . Example usage of <b>ReactValidatableFormProvider</b>:{' '}\r\n                <Link className=\"inner-link\" to=\"/api/react-validatable-form-provider\">\r\n                    See API\r\n                </Link>\r\n            </div>\r\n            <div className=\"codeBox\">\r\n                <span>{providerCode}</span>\r\n            </div>\r\n            <div className=\"infoParagraph\">\r\n                <b>useValidatableForm</b> is a React hook that runs validations according to given form data and rules\r\n                and returns validation results. <b>isValid</b> a boolean value that returns true if form does not\r\n                contain any validation errors. validationError is a JSON object that keeps the validation errors on the\r\n                form according to the{' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    path\r\n                </Link>{' '}\r\n                keys. Example usage of <b>useValidatableForm</b> hook:{' '}\r\n                <Link className=\"inner-link\" to=\"/api/use-validatable-form\">\r\n                    See API\r\n                </Link>\r\n            </div>\r\n            <div className=\"codeBox\">\r\n                <span>{hookCode}</span>\r\n            </div>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default Usage;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { DesktopDatePicker } from '@mui/lab';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { options } from '../../constants/Data';\r\n\r\nconst initialFormData = { listChild: ['', ''] };\r\n\r\nconst rules = [\r\n    { path: 'val1', ruleSet: [{ rule: 'required', applyToNulls: true }] },\r\n    { path: 'val2', ruleSet: [{ rule: 'number', equalTo: 3, applyToNulls: true }] },\r\n    { path: 'val3', ruleSet: [{ rule: 'length', equalTo: 3, applyToNulls: true }] },\r\n    { path: 'val4', ruleSet: [{ rule: 'listSize', equalTo: 3, applyToNulls: true }] },\r\n    { path: 'val5', ruleSet: [{ rule: 'date', applyToNulls: true }] },\r\n    { path: 'val6', ruleSet: [{ rule: 'email', applyToNulls: true }] },\r\n    { path: 'val7', ruleSet: [{ rule: 'url', applyToNulls: true }] },\r\n    { path: 'val8', ruleSet: [{ rule: 'iban', applyToNulls: true }] },\r\n    { path: 'val9', ruleSet: [{ rule: 'equality', equalTo: 'aaa', applyToNulls: true }] },\r\n    { path: 'val10', ruleSet: [{ rule: 'regex', regex: /a/, applyToNulls: true }] },\r\n    {\r\n        listPath: 'listChild',\r\n        ruleSet: [{ rule: 'unique', applyToNulls: true }],\r\n    },\r\n];\r\n\r\nconst CustomApplyToNulls = () => {\r\n    const { isValid, validationError, formData, setPathValue } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    let listChildJsx = null;\r\n\r\n    const handleAddElement = () => {\r\n        const newListChild = formData.listChild ? [...formData.listChild] : [];\r\n        newListChild.push('');\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    const handleDeleteElement = (index) => {\r\n        const newListChild = formData.listChild.filter((el, ind) => ind !== index);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    if (formData.listChild && formData.listChild.length > 0) {\r\n        listChildJsx = formData.listChild.map((lc, index) => {\r\n            return (\r\n                <div key={index}>\r\n                    <TextField\r\n                        error={!!get(validationError, `listChild{${index}}`)}\r\n                        helperText={get(validationError, `listChild{${index}}`) || ' '}\r\n                        label=\"unique\"\r\n                        type=\"text\"\r\n                        value={get(formData, `listChild[${index}]`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}]`, e.target.value)}\r\n                    />\r\n                    <Button className=\"myDeleteButton\" variant=\"contained\" onClick={() => handleDeleteElement(index)}>\r\n                        <span className=\"myShinkableButtonSpan\">Delete Element</span>\r\n                        <DeleteIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"applyToNulls\" codeUrl=\"components/customizations/CustomApplyToNulls.js\">\r\n            <p className=\"infoParagraph\">\r\n                By default <b>react-validatable-form</b> interprets <b>undefined</b>, <b>null</b>, <b>empty string</b>{' '}\r\n                or <b>empty array</b> values as valid values. If you want any rule to be applied to these values,{' '}\r\n                <b>applyToNulls</b> parameter should be used.\r\n            </p>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val1')}\r\n                    helperText={get(validationError, 'val1') || ' '}\r\n                    label=\"requiredApplyToNulls\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val1') || ''}\r\n                    onChange={(e) => setPathValue('val1', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val2')}\r\n                    helperText={get(validationError, 'val2') || ' '}\r\n                    label=\"numberApplyToNulls\"\r\n                    type=\"number\"\r\n                    value={get(formData, 'val2') || ''}\r\n                    onChange={(e) => setPathValue('val2', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val3')}\r\n                    helperText={get(validationError, 'val3') || ' '}\r\n                    label=\"lengthApplyToNulls\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val3') || ''}\r\n                    onChange={(e) => setPathValue('val3', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Autocomplete\r\n                    multiple\r\n                    value={get(formData, 'val4') || []}\r\n                    onChange={(event, newValue) => {\r\n                        setPathValue('val4', newValue);\r\n                    }}\r\n                    options={options}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            error={!!get(validationError, 'val4')}\r\n                            helperText={get(validationError, 'val4') || ' '}\r\n                            label=\"listSizeApplyToNulls\"\r\n                        />\r\n                    )}\r\n                />\r\n            </div>\r\n            <div>\r\n                <DesktopDatePicker\r\n                    label=\"dateApplyToNulls\"\r\n                    inputFormat=\"MM/dd/yyyy\"\r\n                    value={get(formData, 'val5') || null}\r\n                    onChange={(val) => setPathValue('val5', val)}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            error={!!get(validationError, 'val5')}\r\n                            helperText={get(validationError, 'val5') || ' '}\r\n                        />\r\n                    )}\r\n                />\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val6')}\r\n                    helperText={get(validationError, 'val6') || ' '}\r\n                    label=\"emailApplyToNulls\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val6') || ''}\r\n                    onChange={(e) => setPathValue('val6', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val7')}\r\n                    helperText={get(validationError, 'val7') || ' '}\r\n                    label=\"urlApplyToNulls\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val7') || ''}\r\n                    onChange={(e) => setPathValue('val7', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val8')}\r\n                    helperText={get(validationError, 'val8') || ' '}\r\n                    label=\"ibanApplyToNulls\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val8') || ''}\r\n                    onChange={(e) => setPathValue('val8', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val9')}\r\n                    helperText={get(validationError, 'val9') || ' '}\r\n                    label=\"equalityApplyToNulls\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val9') || ''}\r\n                    onChange={(e) => setPathValue('val9', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!get(validationError, 'val10')}\r\n                    helperText={get(validationError, 'val10') || ' '}\r\n                    label=\"regexApplyToNulls\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val10') || ''}\r\n                    onChange={(e) => setPathValue('val10', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Button className=\"myAddButton\" variant=\"contained\" onClick={() => handleAddElement()}>\r\n                    <span className=\"myShinkableButtonSpan\">Add New Element</span>\r\n                    <AddIcon className=\"myShinkableButtonIcon\" />\r\n                </Button>\r\n            </div>\r\n            <div className={'formListField'}>{listChildJsx}</div>\r\n            <div className={'errorInfoText'}>{get(validationError, 'listChild')}</div>\r\n\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default CustomApplyToNulls;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport './CustomElementFocusHandler.css';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Button from '@mui/material/Button';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\n\r\nconst myCustomElementFocusHandler = (elementId) => {\r\n    const element = document.getElementById(elementId);\r\n    if (!element) {\r\n        console.warn(`Dom element with id ${elementId} could not be found`);\r\n    } else {\r\n        const parentElement = element.parentElement;\r\n        const grantParentElement = parentElement.parentElement;\r\n        grantParentElement.classList.add('element-shaking');\r\n        element.focus();\r\n        setTimeout(() => {\r\n            grantParentElement.classList.remove('element-shaking');\r\n        }, 600);\r\n    }\r\n};\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    {\r\n        path: 'textVal2',\r\n        ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 7 }],\r\n    },\r\n    { path: 'val3', ruleSet: [{ rule: 'required' }, { rule: 'listSize', equalTo: 2 }] },\r\n    { path: 'textVal4', ruleSet: [{ rule: 'required' }, { rule: 'url' }] },\r\n];\r\n\r\nconst CustomElementFocusHandler = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n    } = useValidatableForm({\r\n        rules,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n        elementFocusHandler: myCustomElementFocusHandler,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"elementFocusHandler\"\r\n            codeUrl=\"components/customizations/CustomElementFocusHandler.js\"\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                <b>elementFocusHandler</b> parameter is used to manually handle focusing to the first element with a\r\n                validation error.\r\n            </p>\r\n            <div>\r\n                <div className={'formField'}>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal1')}\r\n                        helperText={get(validationError, 'textVal1') || ' '}\r\n                        label=\"requiredField\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal2')}\r\n                        helperText={get(validationError, 'textVal2') || ' '}\r\n                        label=\"requiredAndLengthField\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                    <Autocomplete\r\n                        multiple\r\n                        value={get(formData, 'val3') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('val3', newValue);\r\n                        }}\r\n                        onBlur={() => setPathIsBlurred('val3')}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!get(validationError, 'val3')}\r\n                                helperText={get(validationError, 'val3') || ' '}\r\n                                label=\"requiredAndListSize\"\r\n                            />\r\n                        )}\r\n                        id=\"val3\"\r\n                    />\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal4')}\r\n                        helperText={get(validationError, 'textVal4') || ' '}\r\n                        label=\"requiredAndUrl\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal4') || ''}\r\n                        onChange={(e) => setPathValue('textVal4', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal4')}\r\n                        id=\"textVal4\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default CustomElementFocusHandler;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport { Link } from 'react-router-dom';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { useState } from 'react';\r\n\r\nconst rules = [\r\n    {\r\n        listPath: 'listChild',\r\n        ruleSet: ['required', { rule: 'unique' }],\r\n    },\r\n    {\r\n        listPath: 'listOfObjectsChild',\r\n        subRules: [\r\n            {\r\n                path: 'subkey1',\r\n                ruleSet: ['required', { rule: 'unique' }],\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\nconst RuleUnique = () => {\r\n    const { isValid, validationError, formData, setPathValue } = useValidatableForm({\r\n        rules,\r\n        initialFormData: {\r\n            listChild: ['a', 'a'],\r\n            listOfObjectsChild: [\r\n                { id: 1, subkey1: 'b' },\r\n                { id: 2, subkey1: 'b' },\r\n            ],\r\n        },\r\n    });\r\n    const [nextId, setNextId] = useState(3);\r\n\r\n    let listChildJsx = null;\r\n\r\n    const handleAddElement = () => {\r\n        const newListChild = [...formData.listChild];\r\n        newListChild.push('');\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    const handleDeleteElement = (index) => {\r\n        const newListChild = formData.listChild.filter((el, ind) => ind !== index);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    if (formData.listChild && formData.listChild.length > 0) {\r\n        listChildJsx = formData.listChild.map((lc, index) => {\r\n            return (\r\n                <div key={index}>\r\n                    <TextField\r\n                        error={!!get(validationError, `listChild{${index}}`)}\r\n                        helperText={get(validationError, `listChild{${index}}`) || ' '}\r\n                        label=\"unique\"\r\n                        type=\"text\"\r\n                        value={get(formData, `listChild[${index}]`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}]`, e.target.value)}\r\n                    />\r\n                    <Button className=\"myDeleteButton\" variant=\"contained\" onClick={() => handleDeleteElement(index)}>\r\n                        <span className=\"myShinkableButtonSpan\">Delete Element</span>\r\n                        <DeleteIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    const handleAddObjectElement = () => {\r\n        const newListOfObjectsChild = [...formData.listOfObjectsChild];\r\n        newListOfObjectsChild.push({ id: nextId });\r\n        setNextId(nextId + 1);\r\n        setPathValue('listOfObjectsChild', newListOfObjectsChild);\r\n    };\r\n\r\n    const handleDeleteObjectElement = (id) => {\r\n        const newListOfObjectsChild = formData.listOfObjectsChild.filter((el) => el.id !== id);\r\n        setPathValue('listOfObjectsChild', newListOfObjectsChild);\r\n    };\r\n\r\n    let listOfObjectsChildJsx = null;\r\n\r\n    if (formData.listOfObjectsChild && formData.listOfObjectsChild.length > 0) {\r\n        listOfObjectsChildJsx = formData.listOfObjectsChild.map((lc, index) => {\r\n            return (\r\n                <div key={lc.id}>\r\n                    <TextField\r\n                        error={!!get(validationError, `listOfObjectsChild{${index}}.subkey1`)}\r\n                        helperText={get(validationError, `listOfObjectsChild{${index}}.subkey1`) || ' '}\r\n                        label=\"unique subkey\"\r\n                        type=\"text\"\r\n                        value={get(formData, `listOfObjectsChild[${index}].subkey1`) || ''}\r\n                        onChange={(e) => setPathValue(`listOfObjectsChild[${index}].subkey1`, e.target.value)}\r\n                        id={`listOfObjectsChild{${index}}.subkey1`}\r\n                    />\r\n                    <Button\r\n                        className=\"myDeleteButton\"\r\n                        variant=\"contained\"\r\n                        onClick={() => handleDeleteObjectElement(lc.id)}\r\n                    >\r\n                        <span className=\"myShinkableButtonSpan\">Delete Element</span>\r\n                        <DeleteIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"Unique\" codeUrl=\"components/rules/RuleUnique.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>unique</b> rule checks if non-unique values exist on a{' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    listPath\r\n                </Link>\r\n                .\r\n            </p>\r\n            <div>\r\n                <div>\r\n                    <Button className=\"myAddButton\" variant=\"contained\" onClick={() => handleAddElement()}>\r\n                        <span className=\"myShinkableButtonSpan\">Add New Element</span>\r\n                        <AddIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n                <div className={'formListField'}>{listChildJsx}</div>\r\n                <div className={'errorInfoText'}>{get(validationError, 'listChild')}</div>\r\n\r\n                <div>\r\n                    <Button className=\"myAddButton\" variant=\"contained\" onClick={() => handleAddObjectElement()}>\r\n                        <span className=\"myShinkableButtonSpan\">Add New Element</span>\r\n                        <AddIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n                <div className={'formListField'}>{listOfObjectsChildJsx}</div>\r\n                <div className={'errorInfoText'}>{get(validationError, 'listOfObjectsChild')}</div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleUnique;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormHelperText } from '@mui/material';\r\n\r\nconst initialFormData = {\r\n    val: false,\r\n    val2: 'aa',\r\n    comparisonValue: 'aba',\r\n};\r\n\r\nconst rules = [\r\n    { path: 'val', ruleSet: [{ rule: 'required' }, { rule: 'equality', equalTo: true }] },\r\n    {\r\n        path: 'val2',\r\n        ruleSet: [{ rule: 'required' }, { rule: 'equality', equalTo: (formData) => formData['comparisonValue'] }],\r\n        dependantPaths: ['comparisonValue'],\r\n    },\r\n];\r\n\r\nconst RuleEquality = () => {\r\n    const { isValid, validationError, formData, setPathValue } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"equality\" codeUrl=\"components/rules/RuleEquality.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>equality</b> rule checks if the given value is equal to comparison value.\r\n            </p>\r\n            <div>\r\n                <FormGroup className={'checkboxOnRight'}>\r\n                    <FormControl error={!!get(validationError, 'val')}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={get(formData, 'val') || false}\r\n                                    onChange={(e) => setPathValue('val', e.target.checked)}\r\n                                />\r\n                            }\r\n                            label={<FormHelperText>{get(validationError, 'val') || ' '}</FormHelperText>}\r\n                        />\r\n                    </FormControl>\r\n                </FormGroup>\r\n            </div>\r\n            <div className=\"comparisonDiv\">\r\n                <TextField\r\n                    error={!!get(validationError, 'val2')}\r\n                    helperText={get(validationError, 'val2') || ' '}\r\n                    label=\"val2\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'val2') || ''}\r\n                    onChange={(e) => setPathValue('val2', e.target.value)}\r\n                />\r\n                <TextField\r\n                    className=\"comparisonComponent\"\r\n                    label=\"comparisonValue\"\r\n                    type=\"text\"\r\n                    value={get(formData, 'comparisonValue')}\r\n                    onChange={(e) => setPathValue('comparisonValue', e.target.value)}\r\n                />\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleEquality;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExamplePureUsage = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            alert(JSON.stringify(formData));\r\n        }\r\n    };\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"Example Usage with Pure React Components\"\r\n            codeUrl=\"components/examples/ExamplePureUsage.js\"\r\n        >\r\n            <div>\r\n                <div className={getError('textVal1') && 'hasError'}>\r\n                    <label htmlFor=\"textVal1\">Text1: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                    <div className=\"errorText\">{getError('textVal1') || ' '}</div>\r\n                </div>\r\n                <div className={getError('textVal2') && 'hasError'}>\r\n                    <label htmlFor=\"textVal2\">Text2: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                    <div className=\"errorText\">{getError('textVal2') || ' '}</div>\r\n                </div>\r\n                <div className={getError('numVal') && 'hasError'}>\r\n                    <label htmlFor=\"numVal\">Num Val: </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                    <div className=\"errorText\">{getError('numVal') || ' '}</div>\r\n                </div>\r\n                <div className={getError('selectVal') && 'hasError'}>\r\n                    <label htmlFor=\"selectVal\">Select Val: </label>\r\n                    <select\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        value={getValue('selectVal') || ''}\r\n                        onChange={(e) => setPathValue('selectVal', e.target.value)}\r\n                    >\r\n                        <option key={'empty'} value={''}>\r\n                            {''}\r\n                        </option>\r\n                        {options.map((op) => {\r\n                            return (\r\n                                <option key={op} value={op}>\r\n                                    {op}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                    </select>\r\n                    <div className=\"errorText\">{getError('selectVal') || ' '}</div>\r\n                </div>\r\n                <div>\r\n                    <button className=\"mySubmitButton pureButton\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExamplePureUsage;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleMuiUsage = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"Example Usage with MUI Components\"\r\n            codeUrl=\"components/examples/ExampleMuiUsage.js\"\r\n        >\r\n            <div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('numVal')}\r\n                        helperText={getError('numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={getValue('selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('selectVal')}\r\n                                helperText={getError('selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleMuiUsage;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { Button } from 'primereact/button';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst primeReactElementsFocusHandler = (elementId) => {\r\n    const element = document.getElementById(elementId);\r\n    if (!element) {\r\n        console.warn(`Dom element with id ${elementId} could not be found`);\r\n    } else {\r\n        const tagName = element.tagName;\r\n        if (tagName.toUpperCase() === 'INPUT') {\r\n            element.focus();\r\n        } else {\r\n            var inputNodes = element.getElementsByTagName('INPUT');\r\n            for (var i = 0; i < inputNodes.length; ++i) {\r\n                var inputNode = inputNodes[i];\r\n                inputNode.focus();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst ExamplePrimeReact = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n        elementFocusHandler: primeReactElementsFocusHandler,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"Example Usage with PrimeReact Components\"\r\n            codeUrl=\"components/examples/ExamplePrimeReact.js\"\r\n        >\r\n            <div>\r\n                <div className=\"my-prime-div\">\r\n                    <label htmlFor=\"textVal1\">Text1</label>\r\n                    <InputText\r\n                        className={getError('textVal1') && 'p-invalid'}\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                    <small className=\"p-error\">{getError('textVal1') || ' '}</small>\r\n                </div>\r\n                <div className=\"my-prime-div\">\r\n                    <label htmlFor=\"textVal2\">Text2</label>\r\n                    <InputText\r\n                        className={getError('textVal2') && 'p-invalid'}\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                    <small className=\"p-error\">{getError('textVal2') || ' '}</small>\r\n                </div>\r\n                <div className=\"my-prime-div\">\r\n                    <label htmlFor=\"numVal\">Num Val</label>\r\n                    <InputNumber\r\n                        className={getError('numVal') && 'p-invalid'}\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                    <small className=\"p-error\">{getError('numVal') || ' '}</small>\r\n                </div>\r\n                <div className=\"my-prime-div\">\r\n                    <label htmlFor=\"selectVal\">Select Val</label>\r\n                    <MultiSelect\r\n                        className={getError('selectVal') && 'p-invalid'}\r\n                        value={getValue('selectVal') || []}\r\n                        options={options}\r\n                        onChange={(e) => setPathValue('selectVal', e.value)}\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        id=\"selectVal\"\r\n                    />\r\n                    <small className=\"p-error\">{getError('selectVal') || ' '}</small>\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog\r\n                header=\"Form Data Submitted\"\r\n                visible={dialogOpen}\r\n                modal\r\n                style={{ width: '50vw' }}\r\n                onHide={() => setDialogOpen(false)}\r\n                onMaskClick={() => setDialogOpen(false)}\r\n                draggable={false}\r\n                resizable={false}\r\n            >\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExamplePrimeReact;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport ValidationResult from '../ValidationResult';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport './MyBootstrap.css';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleReactBootstrap = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"Example Usage with React-Bootstrap Components\"\r\n            codeUrl=\"components/examples/ExampleReactBootstrap.js\"\r\n        >\r\n            <Form className=\"my-bootstrap-form\">\r\n                <Form.Group controlId=\"textVal1\">\r\n                    <Form.Label>Text1</Form.Label>\r\n                    <Form.Control\r\n                        placeholder=\"Text1\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        isInvalid={!!getError('textVal1')}\r\n                    />\r\n                    {getError('textVal1') ? (\r\n                        <Form.Control.Feedback type=\"invalid\">{getError('textVal1') || ' '}</Form.Control.Feedback>\r\n                    ) : (\r\n                        <div className={'my-bootstrap-empty-feedback'}></div>\r\n                    )}\r\n                </Form.Group>\r\n                <Form.Group controlId=\"textVal2\">\r\n                    <Form.Label>Text2</Form.Label>\r\n                    <Form.Control\r\n                        placeholder=\"Text2\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        isInvalid={!!getError('textVal2')}\r\n                    />\r\n                    {getError('textVal2') ? (\r\n                        <Form.Control.Feedback type=\"invalid\">{getError('textVal2') || ' '}</Form.Control.Feedback>\r\n                    ) : (\r\n                        <div className={'my-bootstrap-empty-feedback'}></div>\r\n                    )}\r\n                </Form.Group>\r\n                <Form.Group controlId=\"numVal\">\r\n                    <Form.Label>Num Val</Form.Label>\r\n                    <Form.Control\r\n                        type=\"number\"\r\n                        placeholder=\"Num Val\"\r\n                        value={getValue('numVal') || ''}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        isInvalid={!!getError('numVal')}\r\n                    />\r\n                    {getError('numVal') ? (\r\n                        <Form.Control.Feedback type=\"invalid\">{getError('numVal') || ' '}</Form.Control.Feedback>\r\n                    ) : (\r\n                        <div className={'my-bootstrap-empty-feedback'}></div>\r\n                    )}\r\n                </Form.Group>\r\n                <Form.Group controlId=\"selectVal\">\r\n                    <Form.Label>Select Val</Form.Label>\r\n                    <Form.Select\r\n                        value={getValue('selectVal') || ''}\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        onChange={(e) => setPathValue('selectVal', e.target.value)}\r\n                        isInvalid={!!getError('selectVal')}\r\n                    >\r\n                        <option key={'empty'} value={''}>\r\n                            {''}\r\n                        </option>\r\n                        {options.map((op) => {\r\n                            return (\r\n                                <option key={op} value={op}>\r\n                                    {op}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                    </Form.Select>\r\n                    {getError('selectVal') ? (\r\n                        <Form.Control.Feedback type=\"invalid\">{getError('selectVal') || ' '}</Form.Control.Feedback>\r\n                    ) : (\r\n                        <div className={'my-bootstrap-empty-feedback'}></div>\r\n                    )}\r\n                </Form.Group>\r\n                <Button className=\"mySubmitButton\" variant=\"primary\" onClick={() => handleFormSubmit()}>\r\n                    Submit\r\n                </Button>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </Form>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleReactBootstrap;\r\n","import { useEffect, useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleSetFormData = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        formData,\r\n        setPathValue,\r\n        setFormData,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n    } = useValidatableForm({\r\n        rules,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormData({\r\n                textVal1: 'aa',\r\n                textVal2: 'bb',\r\n                numVal: 5,\r\n                selectVal: ['Europe', 'South America'],\r\n            });\r\n            setFormFilledState(1);\r\n        }, 2000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormData({\r\n                textVal1: 'aa',\r\n                numVal: 8,\r\n                selectVal: ['Europe'],\r\n            });\r\n            setFormFilledState(2);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"setFormData\" codeUrl=\"components/examples/ExampleSetFormData.js\">\r\n            <div>\r\n                {formFilledState === 0\r\n                    ? 'Please wait for 2 seconds...'\r\n                    : formFilledState === 1\r\n                    ? 'Wait for another 2 seconds...'\r\n                    : 'Thanks for waiting 4 seconds'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal1')}\r\n                        helperText={get(validationError, 'textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal2')}\r\n                        helperText={get(validationError, 'textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'numVal')}\r\n                        helperText={get(validationError, 'numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={get(formData, 'numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={get(formData, 'selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!get(validationError, 'selectVal')}\r\n                                helperText={get(validationError, 'selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleSetFormData;\r\n","import { useEffect, useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleSetPathValue = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n    } = useValidatableForm({\r\n        rules,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setPathValue('textVal1', 'aaa');\r\n            setPathValue('textVal2', 'bbb');\r\n            setPathValue('numVal', 5);\r\n            setPathValue('selectVal', ['Europe', 'South America']);\r\n            setFormFilledState(1);\r\n        }, 2000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setPathValue('textVal1', 'aaa');\r\n            setPathValue('textVal2', null);\r\n            setPathValue('numVal', 9);\r\n            setPathValue('selectVal', ['Europe']);\r\n            setFormFilledState(2);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"setPathValue\" codeUrl=\"components/examples/ExampleSetPathValue.js\">\r\n            <div>\r\n                {formFilledState === 0\r\n                    ? 'Please wait for 2 seconds...'\r\n                    : formFilledState === 1\r\n                    ? 'Wait for another 2 seconds...'\r\n                    : 'Thanks for waiting 4 seconds'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal1')}\r\n                        helperText={get(validationError, 'textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal2')}\r\n                        helperText={get(validationError, 'textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'numVal')}\r\n                        helperText={get(validationError, 'numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={get(formData, 'numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={get(formData, 'selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!get(validationError, 'selectVal')}\r\n                                helperText={get(validationError, 'selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleSetPathValue;\r\n","import { useEffect, useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules2 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 10 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 15 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules3 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 13 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 25 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleSetFormDataAndRules = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormDataAndRules,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    textVal2: 'bb',\r\n                    numVal: 5,\r\n                    selectVal: ['Europe', 'South America'],\r\n                },\r\n                rules2\r\n            );\r\n            setFormFilledState(1);\r\n            setCurrentRules(rules2);\r\n        }, 2000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    numVal: 8,\r\n                    selectVal: ['Europe'],\r\n                },\r\n                rules3\r\n            );\r\n            setFormFilledState(2);\r\n            setCurrentRules(rules3);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"setFormDataAndRules\" codeUrl=\"components/examples/ExampleSetFormDataAndRules.js\">\r\n            <div>\r\n                {formFilledState === 0\r\n                    ? 'Please wait for 2 seconds...'\r\n                    : formFilledState === 1\r\n                    ? 'Wait for another 2 seconds...'\r\n                    : 'Thanks for waiting 4 seconds'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('numVal')}\r\n                        helperText={getError('numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={getValue('selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('selectVal')}\r\n                                helperText={getError('selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={currentRules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleSetFormDataAndRules;\r\n","import { useEffect, useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules2 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 10 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 15 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules3 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 13 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 25 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleFormData = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormDataAndRules,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    textVal2: 'bb',\r\n                    numVal: 5,\r\n                    selectVal: ['Europe', 'South America'],\r\n                },\r\n                rules2\r\n            );\r\n            setFormFilledState(1);\r\n            setCurrentRules(rules2);\r\n        }, 2000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    numVal: 8,\r\n                    selectVal: ['Europe'],\r\n                },\r\n                rules3\r\n            );\r\n            setFormFilledState(2);\r\n            setCurrentRules(rules3);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"formData\" codeUrl=\"components/examples/ExampleFormData.js\">\r\n            <div>\r\n                {formFilledState === 0\r\n                    ? 'Please wait for 2 seconds...'\r\n                    : formFilledState === 1\r\n                    ? 'Wait for another 2 seconds...'\r\n                    : 'Thanks for waiting 4 seconds'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('numVal')}\r\n                        helperText={getError('numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={getValue('selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('selectVal')}\r\n                                helperText={getError('selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={formData} header=\"Current formData\" />\r\n                <CurrentRulesInfo currentRules={currentRules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleFormData;\r\n","import './ApiInfo.css';\r\n\r\nconst ApiInfo = ({ apiInfoList }) => {\r\n    const apiInfoListJsx = apiInfoList.map((api, index) => {\r\n        const apiLabel = api.label;\r\n        const apiDesc = api.desc;\r\n        const apiIndent = api.indent || 0;\r\n        const pLeft = 20 * apiIndent + 10;\r\n        const leftIndentStyle = { paddingLeft: pLeft + 'px' };\r\n        if (apiIndent) {\r\n            leftIndentStyle.borderTop = '1px dashed black';\r\n        }\r\n        return (\r\n            <div key={index} style={leftIndentStyle} className=\"apiInfo\">\r\n                <div className={'apiLabel'}>{apiLabel}</div>\r\n                <div className={'apiDesc'}>{apiDesc}</div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return <div className={'apiInfoWrapper'}>{apiInfoListJsx}</div>;\r\n};\r\n\r\nexport default ApiInfo;\r\n","import './CodeAccordion.css';\r\nimport Accordion from '@mui/material/Accordion';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport AccordionDetails from '@mui/material/AccordionDetails';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\n\r\nconst CodeAccordion = ({ code }) => {\r\n    return (\r\n        <div className={'codeExampleDiv'}>\r\n            <Accordion>\r\n                <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\">\r\n                    <span className={'codeExampleLabel'}>Example Source Code</span>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <span className={'codeExample'}>{code}</span>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CodeAccordion;\r\n","import { Link } from 'react-router-dom';\r\nimport ApiInfo from '../ApiInfo';\r\nimport CodeAccordion from '../CodeAccordion';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\n\r\nconst useValidatableFormCode = `const {isValid, validationError, validationErrorOriginalResult, formData, setPathValue, unsetPathValue, setFormIsSubmitted,\r\n    setPathIsBlurred, setFormData, setRules, setFormDataAndRules, resetForm, getValue, getError, forceRunAllValidations } = \r\n    useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n        hideBeforeSubmit,\r\n        showAfterBlur,\r\n        focusToErrorAfterSubmit,\r\n});`;\r\n\r\nconst hookParametersApiInfoList = [\r\n    {\r\n        label: (\r\n            <div>\r\n                rules (array){' '}\r\n                <Link className=\"inner-link\" to=\"/api/rules\">\r\n                    See rules API\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Array of validation rules to be run on current form.',\r\n    },\r\n    {\r\n        label: 'initialFormData (object)',\r\n        desc: 'Initial form data to set default values of current form.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                hideBeforeSubmit (boolean){' '}\r\n                <Link className=\"inner-link\" to=\"/advanced/hide-before-submit\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Flag to hide validation errors before setFormIsSubmitted function is called.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                showAfterBlur (boolean){' '}\r\n                <Link className=\"inner-link\" to=\"/advanced/show-after-blur\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Flag to hide validation errors before setPathIsBlurred function is called for any path.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                focusToErrorAfterSubmit (boolean){' '}\r\n                <Link className=\"inner-link\" to=\"/advanced/focus-to-error-after-submit\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc:\r\n            'Flag to automatically focus to first HTML element with validation error after setFormIsSubmitted function is called.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                elementFocusHandler (function){' '}\r\n                <Link className=\"inner-link\" to=\"/customizations/custom-element-focus-handler\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc:\r\n            'Function that accepts the first \"elementId\" of current validation errors as parameter that is used to customly manage DOM after submit.',\r\n    },\r\n];\r\n\r\nconst returnValuesApiInfoList = [\r\n    {\r\n        label: 'isValid (boolean)',\r\n        desc: \"Always returns the form's combined validation result according to current formData and rules.\",\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                validationError (object){' '}\r\n                <Link className=\"inner-link\" to=\"/examples/validation-error\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc:\r\n            'Returns the validation result info of each rule with each path according to current formData and rules. Some validation results can be hide before submit or before blur.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                validationErrorOriginalResult (object){' '}\r\n                <Link className=\"inner-link\" to=\"/examples/validation-error-original-result\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc:\r\n            'Returns the validation result info of each rule with each path according to current formData and rules. (is not hidden before submit or before blur).',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                formData (object){' '}\r\n                <Link className=\"inner-link\" to=\"/examples/form-data\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Returns current formData.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                setPathValue(path, value){' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    See Path API\r\n                </Link>\r\n                {' - '}\r\n                <Link className=\"inner-link\" to=\"/examples/set-path-value\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Function to update given path of formData with given value.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                unsetPathValue(path, value){' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    See Path API\r\n                </Link>\r\n                {' - '}\r\n                <Link className=\"inner-link\" to=\"/examples/unset-path-value\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Function to remove value and key for given path of formData.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                setFormIsSubmitted(){' '}\r\n                <Link className=\"inner-link\" to=\"/advanced/hide-before-submit\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc:\r\n            'Function to set form is submitted info true and show all current validation results if hideBeforeSubmit parameter is set true.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                setPathIsBlurred(path){' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    See Path API\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc:\r\n            'Function to set element of path is blurred info true and unhide its current validation result if showAfterBlur parameter is set true.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                setFormData(newFormData, pathToBeRun){' '}\r\n                <Link className=\"inner-link\" to=\"/examples/set-form-data\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Function to update whole formData and run validation rules of given pathToBeRun array.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                setRules(newRules){' '}\r\n                <Link className=\"inner-link\" to=\"/examples/set-rules\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Function to update rules and run all validations according to these rules.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                setFormDataAndRules(newFormData, newRules){' '}\r\n                <Link className=\"inner-link\" to=\"/examples/set-form-data-and-rules\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc:\r\n            'Function to update whole formData and rules simultaneously and run all validations according to these formData and rules.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                resetForm(){' '}\r\n                <Link className=\"inner-link\" to=\"/advanced/show-after-blur\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Function to reset form submitted info and elements blurred info.',\r\n    },\r\n    {\r\n        label: 'getValue(path)',\r\n        desc: 'Function to get value of given path on formData object.',\r\n    },\r\n    {\r\n        label: 'getError(path)',\r\n        desc: 'Function to get validation error of given path on validationError object.',\r\n    },\r\n    {\r\n        label: 'forceRunAllValidations()',\r\n        desc: 'Function to run all validations according to current rules.',\r\n    },\r\n];\r\n\r\nconst ApiUseValidatableForm = () => {\r\n    return (\r\n        <ExampleUsageWrapper header=\"useValidatableForm\">\r\n            <CodeAccordion code={useValidatableFormCode} />\r\n            <div className=\"apiInfoSectionHeader\">Hook Parameters</div>\r\n            <ApiInfo apiInfoList={hookParametersApiInfoList} />\r\n            <div className=\"apiInfoSectionHeader\">Return Values</div>\r\n            <ApiInfo apiInfoList={returnValuesApiInfoList} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ApiUseValidatableForm;\r\n","import ApiInfo from '../ApiInfo';\r\nimport CodeAccordion from '../CodeAccordion';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\n\r\nconst providerFormCode = `<ReactValidatableFormProvider\r\nlang={lang}\r\ncustomRules={customRules}\r\ntranslations={translations}\r\ndateFormatterFunction={dateFormatterFunction}\r\ndateWithTimeFormatterFunction={dateWithTimeFormatterFunction}\r\nhideBeforeSubmit={hideBeforeSubmit}\r\nshowAfterBlur={showAfterBlur}\r\nfocusToErrorAfterSubmit={focusToErrorAfterSubmit}\r\nelementFocusHandler={elementFocusHandler}\r\n>\r\n    <App />\r\n</ReactValidatableFormProvider>`;\r\n\r\nconst providerParametersApiInfoList = [\r\n    {\r\n        label: 'lang (string)',\r\n        desc: 'Selected language to show validation errors.',\r\n    },\r\n    {\r\n        label: 'customRules (object)',\r\n        desc: 'Custom rules that are specific to app and that can used at any component wrapped by the provider.',\r\n    },\r\n    {\r\n        label: 'translations (object)',\r\n        desc:\r\n            'Custom translation objects to override default error messages or to add a new language for error messages.',\r\n    },\r\n    {\r\n        label: 'dateFormatterFunction (function)',\r\n        desc: 'Function that is used to format dates used in date rule without withTime option.',\r\n    },\r\n    {\r\n        label: 'dateWithTimeFormatterFunction (function)',\r\n        desc: 'Function that is used to format dates used in date rule with withTime option.',\r\n    },\r\n    {\r\n        label: 'hideBeforeSubmit (boolean)',\r\n        desc: 'Flag to hide validation errors before setFormIsSubmitted function is called.',\r\n    },\r\n    {\r\n        label: 'showAfterBlur (boolean)',\r\n        desc: 'Flag to hide validation errors before setPathIsBlurred function is called for any path.',\r\n    },\r\n    {\r\n        label: 'focusToErrorAfterSubmit (boolean)',\r\n        desc:\r\n            'Flag to automatically focus to first HTML element with validation error after setFormIsSubmitted function is called.',\r\n    },\r\n    {\r\n        label: 'elementFocusHandler (function)',\r\n        desc:\r\n            'Function that accepts the first \"elementId\" of current validation errors as parameter that is used to customly manage DOM after submit.',\r\n    },\r\n];\r\n\r\nconst ApiReactValidatableFormProvider = (props) => {\r\n    return (\r\n        <ExampleUsageWrapper header=\"ReactValidatableFormProvider\">\r\n            <CodeAccordion code={providerFormCode} />\r\n            <div className=\"apiInfoSectionHeader\">\r\n                Provider Parameters\r\n                <div>\r\n                    ruleSet (array){' '}\r\n                    <span className=\"inner-link\" onClick={props.openSettingsDialog}>\r\n                        See Example Usages\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <ApiInfo apiInfoList={providerParametersApiInfoList} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ApiReactValidatableFormProvider;\r\n","import { Link } from 'react-router-dom';\r\nimport ApiInfo from '../ApiInfo';\r\nimport CodeAccordion from '../CodeAccordion';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\n\r\nconst rulesFormCode = `const rules = [\r\n    {\r\n        listPath: 'listChild',\r\n        subRules: [\r\n            {\r\n                path: 'subkey1',\r\n                ruleSet: ['required', { rule: 'length', greaterThan: 3 }],\r\n                disableFocusAfterSubmit: true,\r\n            },\r\n            {\r\n                path: 'subkey2',\r\n                ruleSet: [\r\n                    {\r\n                        rule: 'required',\r\n                        disableIf: disableSubkey2,\r\n                    },\r\n                    {\r\n                        rule: 'number',\r\n                        greaterThan: 5,\r\n                        disableIf: disableSubkey2,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                path: 'subkey3',\r\n                ruleSet: ['required'],\r\n                elementId: 'subkey3ElementId',\r\n            },\r\n        ],\r\n        dependantPaths: ['disableAllSubkey2Rule'],\r\n    },\r\n    {\r\n        path: 'listChild',\r\n        ruleSet: [\r\n            { rule: 'required', customMessage: 'This list should not be empty' },\r\n            { rule: 'listSize', greaterThan: 2 },\r\n        ],\r\n        elementId: 'listErrorFocusElement',\r\n    },\r\n    { path: 'bottomElement1', ruleSet: ['required'] },\r\n    { path: 'bottomElement2', ruleSet: [{ rule: 'length', greaterThan: 3, applyToNulls: true }] },\r\n    { path: 'subComponentElement1', ruleSet: ['required'] },\r\n    { path: 'subComponentElement2', ruleSet: ['required'] },\r\n];`;\r\n\r\nconst rulesParametersApiInfoList = [\r\n    {\r\n        label: (\r\n            <div>\r\n                path (string){' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    See Path API\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Path of the value on formData to run the rule.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                listPath (string){' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    See Path API\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Path of the values of a list on formData to run the rules on each elements of the list.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                ruleSet (array){' '}\r\n                <Link className=\"inner-link\" to=\"/api/rule\">\r\n                    See Rule API\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Rules to be applied to the value on path (Can be string or rule object).',\r\n    },\r\n    {\r\n        label: 'elementId (string)',\r\n        desc: 'Custom elementId to focus after submit (path is used if empty).',\r\n    },\r\n    {\r\n        label: 'listElementId (string)',\r\n        desc:\r\n            'Custom listElementId prefix to focus to elements with validation errors after submit (listPath is used if empty).',\r\n    },\r\n    {\r\n        label: 'dependantPaths (array)',\r\n        desc: 'Array of paths that should trigger running the validation when there is a change on those paths.',\r\n    },\r\n    {\r\n        label: 'disableFocusAfterSubmit (boolean)',\r\n        desc: 'Disable searching for element with given path to focus after submit if there is a validation error.',\r\n    },\r\n    {\r\n        label: 'subRules (array)',\r\n        desc: 'Rules to be applied to the subpaths of the given list (can only be used with listPath).',\r\n    },\r\n];\r\n\r\nconst ApiRules = () => {\r\n    return (\r\n        <ExampleUsageWrapper header=\"rules\">\r\n            <CodeAccordion code={rulesFormCode} />\r\n            <div className=\"apiInfoSectionHeader\">Rules Array Parameters</div>\r\n            <ApiInfo apiInfoList={rulesParametersApiInfoList} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ApiRules;\r\n","import { Link } from 'react-router-dom';\r\nimport ApiInfo from '../ApiInfo';\r\nimport CodeAccordion from '../CodeAccordion';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\n\r\nconst rulesFormCode = `ruleSet: [\r\n    { rule: 'required', customMessage: 'This list should not be empty' },\r\n    { rule: 'listSize', greaterThan: 2 },\r\n],`;\r\n\r\nconst ruleParametersApiInfoList = [\r\n    {\r\n        label: 'rule (string || func)',\r\n        desc: (\r\n            <span>\r\n                Identifier (name) of the rule to be run. (Can also be a{' '}\r\n                <Link className=\"inner-link\" to=\"/rules/custom-on-hook\">\r\n                    custom function\r\n                </Link>\r\n                )\r\n            </span>\r\n        ),\r\n    },\r\n    {\r\n        label: 'equalTo, lessThan, lessThanOrEqualTo, greaterThan, greaterThanOrEqualTo, notEqualTo (any || function)',\r\n        desc: (\r\n            <span>\r\n                Comparison identifier that can be used only by{' '}\r\n                <Link className=\"inner-link\" to=\"/rules/number\">\r\n                    number\r\n                </Link>\r\n                {', '}\r\n                <Link className=\"inner-link\" to=\"/rules/length\">\r\n                    length\r\n                </Link>\r\n                {', '}\r\n                <Link className=\"inner-link\" to=\"/rules/list-size\">\r\n                    listSize\r\n                </Link>\r\n                {' and '}\r\n                <Link className=\"inner-link\" to=\"/rules/date\">\r\n                    date\r\n                </Link>{' '}\r\n                rules.\r\n            </span>\r\n        ),\r\n    },\r\n    {\r\n        label: 'onlyIntegers (boolean)',\r\n        desc: (\r\n            <span>\r\n                Decides whether only integer are allowed that can be used only by{' '}\r\n                <Link className=\"inner-link\" to=\"/rules/number\">\r\n                    number\r\n                </Link>{' '}\r\n                rule.\r\n            </span>\r\n        ),\r\n    },\r\n    {\r\n        label: 'withTime (boolean)',\r\n        desc: (\r\n            <span>\r\n                Decides whether hours and minutes are taken into account that can be used only by{' '}\r\n                <Link className=\"inner-link\" to=\"/rules/date\">\r\n                    date\r\n                </Link>{' '}\r\n                rule.\r\n            </span>\r\n        ),\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                applyToNulls (boolean){' '}\r\n                <Link className=\"inner-link\" to=\"/customizations/apply-to-nulls\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Decides whether the rule should also be run on null values.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                disableIf (func){' '}\r\n                <Link className=\"inner-link\" to=\"/customizations/conditional-rules\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Disables running the rule if the return value of the function is truthy.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                enableIf (func){' '}\r\n                <Link className=\"inner-link\" to=\"/customizations/conditional-rules\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Enables running the rule if the return value of the function is truthy.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                customMessage (string || func){' '}\r\n                <Link className=\"inner-link\" to=\"/customizations/custom-message\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Function to override default error message for the rule.',\r\n    },\r\n];\r\n\r\nconst ApiRule = () => {\r\n    return (\r\n        <ExampleUsageWrapper header=\"Rule\">\r\n            <CodeAccordion code={rulesFormCode} />\r\n            <div className=\"apiInfoSectionHeader\">Rule Definition Parameters</div>\r\n            <ApiInfo apiInfoList={ruleParametersApiInfoList} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ApiRule;\r\n","import Button from '@mui/material/Button';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport './Settings.css';\r\n\r\nconst Settings = (props) => {\r\n    const { openSettingsDialog } = props;\r\n    const versionInfo = `Version: ${process.env.REACT_APP_VERSION}`;\r\n\r\n    return (\r\n        <div className={'settings-div'}>\r\n            <span className={'settingsTitle'}>\r\n                <Button variant=\"contained\" className=\"topButton\" onClick={() => openSettingsDialog()}>\r\n                    <span className=\"topButtonLabel\">Edit ReactValidatableFormProvider Props</span>\r\n                    <EditIcon />\r\n                </Button>\r\n            </span>\r\n\r\n            <Tooltip placement=\"bottom\" title=\"View on GitHub\">\r\n                <span className={'githubIcon'}>\r\n                    <a href={'https://github.com/obss/react-validatable-form'} target=\"_blank\" rel=\"noreferrer\">\r\n                        <img src={process.env.PUBLIC_URL + '/github.png'} alt=\"github_icon\" />\r\n                    </a>\r\n                </span>\r\n            </Tooltip>\r\n            <Tooltip placement=\"bottom\" title=\"View on npmjs\">\r\n                <span className={'npmIcon'}>\r\n                    <a href={'https://www.npmjs.com/package/react-validatable-form'} target=\"_blank\" rel=\"noreferrer\">\r\n                        <img src={process.env.PUBLIC_URL + '/npm.png'} alt=\"npm_icon\" />\r\n                    </a>\r\n                </span>\r\n            </Tooltip>\r\n            <Tooltip placement=\"bottom\" title=\"Current Version\">\r\n                <span className={'versionInfo'}>\r\n                    <a href={'https://www.npmjs.com/package/react-validatable-form'} target=\"_blank\" rel=\"noreferrer\">\r\n                        {versionInfo}\r\n                    </a>\r\n                </span>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;\r\n","import ExampleUsageWrapper from '../ExampleUsageWrapper';\r\n\r\nconst pathFormCode = `\r\n////////////-- example rules --///////////\r\nconst rules = [\r\n    { path: 'child1', ruleSet: ['required'] },\r\n    { path: 'child2', ruleSet: ['required'] },\r\n    { path: 'child3.subchild1', ruleSet: ['required'] },\r\n    { path: 'child3.subchild2', ruleSet: ['required'] },\r\n    {\r\n        listPath: 'listChild',\r\n        subRules: [\r\n            {path: 'subkey1', ruleSet: ['required', { rule: 'length', greaterThan: 3 }]},\r\n            {path: 'subkey2', ruleSet: [{rule: 'required', }, { rule: 'number', greaterThan: 5 }]}\r\n        ]\r\n    },\r\n    {path: 'listChild', ruleSet: [{ rule: 'required'}, { rule: 'listSize', greaterThan: 2 }]}\r\n];\r\n\r\n////////////-- example formData --///////////\r\nconst formData = {\r\n    child1: \"child1 value\",\r\n    child2: \"child2 value\",\r\n    child3: {\r\n        subchild1: \"child3 subchild1 value\",\r\n        subchild2: \"child3 subchild2 value\",\r\n    },\r\n    listChild: [\r\n        {\r\n            subkey1: \"list 0th element subkey1 value\",\r\n            subkey2: \"list 0th element subkey2 value\",\r\n        },\r\n        {\r\n            subkey1: \"list 1st element subkey1 value\",\r\n            subkey2: \"list 1st element subkey2 value\",\r\n        }\r\n    ]\r\n};\r\n\r\n////////////-- example validationError result object --///////////\r\nconst validationError = {\r\n    \"child1\": \"This field is required\",                 // first level child\r\n    \"child2\": \"This field is required\",                 // first level child\r\n    \"child3.subchild1\": \"This field is required\",       // second level child\r\n    \"child3.subchild2\": \"This field is required\",       // second level child\r\n    \"listChild\": \"This field is required\",              // first level list child\r\n    \"listChild{0}.subkey1\": \"This field is required\",   // list of object's child\r\n    \"listChild{0}.subkey2\": \"This field is required\",   // list of object's child\r\n    \"listChild{1}.subkey1\": \"This field is required\",   // list of object's child\r\n    \"listChild{1}.subkey2\": \"This field is required\",   // list of object's child\r\n}\r\n\r\n`;\r\n\r\nconst ApiPath = () => {\r\n    return (\r\n        <ExampleUsageWrapper header=\"Path\">\r\n            <div className=\"infoParagraph\">\r\n                <p>\r\n                    <b>Path</b> is a string value that is used to access any value on the formData using{' '}\r\n                    <a\r\n                        className=\"inner-link\"\r\n                        href=\"https://lodash.com/docs/4.17.15#get\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        lodash get\r\n                    </a>{' '}\r\n                    method.\r\n                </p>\r\n                <p>This table shows how to use path and listPath keys for the following code.</p>\r\n                <table className=\"pathApiTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <td className=\"pathApiTableInfoCol\">Path Type</td>\r\n                            <td className=\"pathApiTableExampleCol\">Usage Example</td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Update value of first level child</td>\r\n                            <td>setPathValue({\"'child1'\"}, newValue)</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Update value of second level child</td>\r\n                            <td>setPathValue({\"'child3.subchild1'\"}, newValue)</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Update value of list&apos;s element at 0th index</td>\r\n                            <td>setPathValue({\"'listChild[0]'\"}, newValue)</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Update value of list of object&apos;s element at 0th index with key subkey1</td>\r\n                            <td>setPathValue({\"'listChild[0].subkey1'\"}, newValue)</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get value of first level child</td>\r\n                            <td>getValue({\"'child1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get value of second level child</td>\r\n                            <td>getValue({\"'child3.subchild1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get value of list&apos;s element at 0th index</td>\r\n                            <td>getValue({\"'listChild[0]'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get value of list of object&apos;s element at 0th index with key subkey1</td>\r\n                            <td>getValue({\"'listChild[0].subkey1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get error of first level child</td>\r\n                            <td>getError({\"'child1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get error of second level child</td>\r\n                            <td>getError({\"'child3.subchild1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get error of list&apos;s element at 0th index</td>\r\n                            <td>getError({\"'listChild{0}'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get error of list of object&apos;s element at 0th index with key subkey1</td>\r\n                            <td>getError({\"'listChild{0}.subkey1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Unset value and key of first level child</td>\r\n                            <td>unsetPathValue({\"'child1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Unset value and key of second level child</td>\r\n                            <td>unsetPathValue({\"'child3.subchild1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Unset value and key of list&apos;s element at 0th index</td>\r\n                            <td>unsetPathValue({\"'listChild[0]'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Unset value and key of list of object&apos;s element at 0th index with key subkey1</td>\r\n                            <td>unsetPathValue({\"'listChild[0].subkey1'\"})</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div className=\"pageCodeWrapper\">\r\n                <span className=\"pageCode\">{pathFormCode}</span>\r\n            </div>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ApiPath;\r\n","import { useEffect, useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules2 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 10 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 15 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules3 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 13 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 25 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleValidationError = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        formData,\r\n        setPathValue,\r\n        setFormDataAndRules,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    textVal2: 'bb',\r\n                    numVal: 5,\r\n                    selectVal: ['Europe', 'South America'],\r\n                },\r\n                rules2\r\n            );\r\n            setFormFilledState(1);\r\n            setCurrentRules(rules2);\r\n        }, 2000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    numVal: 8,\r\n                    selectVal: ['Europe'],\r\n                },\r\n                rules3\r\n            );\r\n            setFormFilledState(2);\r\n            setCurrentRules(rules3);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"validationError\" codeUrl=\"components/examples/ExampleValidationError.js\">\r\n            <div>\r\n                {formFilledState === 0\r\n                    ? 'Please wait for 2 seconds...'\r\n                    : formFilledState === 1\r\n                    ? 'Wait for another 2 seconds...'\r\n                    : 'Thanks for waiting 4 seconds'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('numVal')}\r\n                        helperText={getError('numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={getValue('selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('selectVal')}\r\n                                helperText={getError('selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={validationError} header=\"Current validationError\" />\r\n                <CurrentRulesInfo currentRules={currentRules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleValidationError;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules2 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 10 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 15 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules3 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 13 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 2 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleSetRules = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setRules,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        initialFormData: { textVal1: 'aaa', textVal2: 'bbb', numVal: 5, selectVal: ['Europe'] },\r\n        rules,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    const changeRule = () => {\r\n        if (formFilledState === 0) {\r\n            setRules(rules2);\r\n            setFormFilledState(1);\r\n            setCurrentRules(rules2);\r\n        } else if (formFilledState === 1) {\r\n            setRules(rules3);\r\n            setFormFilledState(2);\r\n            setCurrentRules(rules3);\r\n        } else if (formFilledState === 2) {\r\n            setRules(rules);\r\n            setFormFilledState(0);\r\n            setCurrentRules(rules);\r\n        }\r\n    };\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"setRules\" codeUrl=\"components/examples/ExampleSetRules.js\">\r\n            <div>\r\n                {'Click \"Change Rule\" button to set new rules'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('numVal')}\r\n                        helperText={getError('numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={getValue('selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('selectVal')}\r\n                                helperText={getError('selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => changeRule()}>\r\n                        Change Rule\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={currentRules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleSetRules;\r\n","import { useEffect, useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleUnsetPathValue = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        formData,\r\n        setPathValue,\r\n        unsetPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n    } = useValidatableForm({\r\n        rules,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setPathValue('textVal1', 'aaa');\r\n            setPathValue('textVal2', 'bbb');\r\n            setPathValue('numVal', 5);\r\n            setPathValue('selectVal', ['Europe', 'South America']);\r\n            setFormFilledState(1);\r\n        }, 2000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setPathValue('textVal1', 'aaa');\r\n            setPathValue('textVal2', null);\r\n            unsetPathValue('numVal');\r\n            setPathValue('selectVal', ['Europe']);\r\n            setFormFilledState(2);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setPathValue('textVal1', 'aaa');\r\n            setPathValue('textVal2', 'gagag');\r\n            setPathValue('numVal', 9);\r\n            setPathValue('selectVal', ['Europe']);\r\n            setFormFilledState(3);\r\n        }, 6000);\r\n    }, []);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"unsetPathValue\" codeUrl=\"components/examples/ExampleUnsetPathValue.js\">\r\n            <div>\r\n                {formFilledState === 0\r\n                    ? 'Please wait for 2 seconds...'\r\n                    : formFilledState === 1\r\n                    ? 'Wait for another 2 seconds...'\r\n                    : formFilledState === 2\r\n                    ? 'And Wait for another 2 seconds...'\r\n                    : 'Thanks for waiting 6 seconds'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal1')}\r\n                        helperText={get(validationError, 'textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal2')}\r\n                        helperText={get(validationError, 'textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'numVal')}\r\n                        helperText={get(validationError, 'numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={get(formData, 'numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={get(formData, 'selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!get(validationError, 'selectVal')}\r\n                                helperText={get(validationError, 'selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={formData} header=\"Current formData\" />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleUnsetPathValue;\r\n","import { useEffect, useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules2 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 10 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 15 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules3 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 13 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 25 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleValidationErrorOriginalResult = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        validationErrorOriginalResult,\r\n        formData,\r\n        setPathValue,\r\n        setFormDataAndRules,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    textVal2: 'bb',\r\n                    numVal: 5,\r\n                    selectVal: ['Europe', 'South America'],\r\n                },\r\n                rules2\r\n            );\r\n            setFormFilledState(1);\r\n            setCurrentRules(rules2);\r\n        }, 2000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    numVal: 8,\r\n                    selectVal: ['Europe'],\r\n                },\r\n                rules3\r\n            );\r\n            setFormFilledState(2);\r\n            setCurrentRules(rules3);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"validationErrorOriginalResult\"\r\n            codeUrl=\"components/examples/ExampleValidationErrorOriginalResult.js\"\r\n        >\r\n            <div>\r\n                {formFilledState === 0\r\n                    ? 'Please wait for 2 seconds...'\r\n                    : formFilledState === 1\r\n                    ? 'Wait for another 2 seconds...'\r\n                    : 'Thanks for waiting 4 seconds'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('numVal')}\r\n                        helperText={getError('numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={getValue('selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('selectVal')}\r\n                                helperText={getError('selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={validationError} header=\"Current validationError\" />\r\n                <CurrentRulesInfo\r\n                    currentRules={validationErrorOriginalResult}\r\n                    header=\"Current validationErrorOriginalResult\"\r\n                />\r\n                <CurrentRulesInfo currentRules={currentRules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleValidationErrorOriginalResult;\r\n","import { HashRouter, Switch, Route } from 'react-router-dom';\r\nimport { NavSidebar } from './NavSidebar';\r\nimport Homepage from './Homepage';\r\nimport RuleRequired from './rules/RuleRequired';\r\nimport RuleNumber from './rules/RuleNumber';\r\nimport RuleLength from './rules/RuleLength';\r\nimport RuleListSize from './rules/RuleListSize';\r\nimport RuleDate from './rules/RuleDate';\r\nimport RuleEmail from './rules/RuleEmail';\r\nimport RuleUrl from './rules/RuleUrl';\r\nimport RuleIban from './rules/RuleIban';\r\nimport RuleCustomOnHook from './rules/RuleCustomOnHook';\r\nimport RuleCustomOnProvider from './rules/RuleCustomOnProvider';\r\nimport AdvancedHideBeforeSubmit from './advanced/AdvancedHideBeforeSubmit';\r\nimport AdvancedShowAfterBlur from './advanced/AdvancedShowAfterBlur';\r\nimport AdvancedFocusToErrorAfterSubmit from './advanced/AdvancedFocusToErrorAfterSubmit';\r\nimport CustomMessage from './customizations/CustomMessage';\r\nimport CustomTranslations from './customizations/CustomTranslations';\r\nimport AdvancedValidateComplexForms from './advanced/AdvancedValidateComplexForms';\r\nimport AdvancedValidateLists from './advanced/AdvancedValidateLists';\r\nimport CustomConditionalRules from './customizations/CustomConditionalRules';\r\nimport RuleRegex from './rules/RuleRegex';\r\nimport AdvancedFocusToErrorOnListAfterSubmit from './advanced/AdvancedFocusToErrorOnListAfterSubmit';\r\nimport AdvancedValidateListOfObjects from './advanced/AdvancedValidateListOfObjects';\r\nimport Installation from './getting-started/Installation';\r\nimport Usage from './getting-started/Usage';\r\nimport CustomApplyToNulls from './customizations/CustomApplyToNulls';\r\nimport CustomElementFocusHandler from './customizations/CustomElementFocusHandler';\r\nimport RuleUnique from './rules/RuleUnique';\r\nimport RuleEquality from './rules/RuleEquality';\r\nimport ExamplePureUsage from './examples/ExamplePureUsage';\r\nimport ExampleMuiUsage from './examples/ExampleMuiUsage';\r\nimport ExamplePrimeReact from './examples/ExamplePrimeReact';\r\nimport ExampleReactBootstrap from './examples/ExampleReactBootstrap';\r\nimport ExampleSetFormData from './examples/ExampleSetFormData';\r\nimport ExampleSetPathValue from './examples/ExampleSetPathValue';\r\nimport ExampleSetFormDataAndRules from './examples/ExampleSetFormDataAndRules';\r\nimport ExampleFormData from './examples/ExampleFormData';\r\nimport ApiUseValidatableForm from './api/ApiUseValidatableForm';\r\nimport ApiReactValidatableFormProvider from './api/ApiReactValidatableFormProvider';\r\nimport ApiRules from './api/ApiRules';\r\nimport ApiRule from './api/ApiRule';\r\nimport Settings from './Settings';\r\nimport ApiPath from './api/ApiPath';\r\nimport ExampleValidationError from './examples/ExampleValidationError';\r\nimport ExampleSetRules from './examples/ExampleSetRules';\r\nimport ExampleUnsetPathValue from './examples/ExampleUnsetPathValue';\r\nimport ExampleValidationErrorOriginalResult from './examples/ExampleValidationErrorOriginalResult';\r\n\r\nconst Routes = (props) => {\r\n    return (\r\n        <HashRouter>\r\n            <NavSidebar menuIsHidden={props.menuIsHidden} onMenuItemSelect={props.onMenuItemSelect} />\r\n            <div className=\"generalDiv\" onClick={props.onOutsideClick}>\r\n                <Settings openSettingsDialog={props.openSettingsDialog} />\r\n                <Switch>\r\n                    <Route exact path=\"/getting-started/installation\">\r\n                        <Installation />\r\n                    </Route>\r\n                    <Route exact path=\"/getting-started/usage\">\r\n                        <Usage openSettingsDialog={props.openSettingsDialog} />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/required\">\r\n                        <RuleRequired />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/number\">\r\n                        <RuleNumber />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/length\">\r\n                        <RuleLength />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/list-size\">\r\n                        <RuleListSize />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/date\">\r\n                        <RuleDate />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/email\">\r\n                        <RuleEmail />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/url\">\r\n                        <RuleUrl />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/iban\">\r\n                        <RuleIban />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/equality\">\r\n                        <RuleEquality />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/regex\">\r\n                        <RuleRegex />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/unique\">\r\n                        <RuleUnique />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/custom-on-hook\">\r\n                        <RuleCustomOnHook />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/custom-on-provider\">\r\n                        <RuleCustomOnProvider />\r\n                    </Route>\r\n                    <Route exact path=\"/advanced/validate-lists\">\r\n                        <AdvancedValidateLists />\r\n                    </Route>\r\n                    <Route exact path=\"/advanced/hide-before-submit\">\r\n                        <AdvancedHideBeforeSubmit />\r\n                    </Route>\r\n                    <Route exact path=\"/advanced/show-after-blur\">\r\n                        <AdvancedShowAfterBlur />\r\n                    </Route>\r\n                    <Route exact path=\"/advanced/focus-to-error-after-submit\">\r\n                        <AdvancedFocusToErrorAfterSubmit />\r\n                    </Route>\r\n                    <Route exact path=\"/advanced/focus-to-error-on-list-after-submit\">\r\n                        <AdvancedFocusToErrorOnListAfterSubmit />\r\n                    </Route>\r\n                    <Route exact path=\"/advanced/validate-list-of-objects\">\r\n                        <AdvancedValidateListOfObjects />\r\n                    </Route>\r\n                    <Route exact path=\"/advanced/validate-complex-forms\">\r\n                        <AdvancedValidateComplexForms />\r\n                    </Route>\r\n                    <Route exact path=\"/customizations/custom-message\">\r\n                        <CustomMessage />\r\n                    </Route>\r\n                    <Route exact path=\"/customizations/translations\">\r\n                        <CustomTranslations />\r\n                    </Route>\r\n                    <Route exact path=\"/customizations/conditional-rules\">\r\n                        <CustomConditionalRules />\r\n                    </Route>\r\n                    <Route exact path=\"/customizations/apply-to-nulls\">\r\n                        <CustomApplyToNulls />\r\n                    </Route>\r\n                    <Route exact path=\"/customizations/custom-element-focus-handler\">\r\n                        <CustomElementFocusHandler />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/pure\">\r\n                        <ExamplePureUsage />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/mui\">\r\n                        <ExampleMuiUsage />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/prime-react\">\r\n                        <ExamplePrimeReact />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/react-bootstrap\">\r\n                        <ExampleReactBootstrap />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/set-form-data\">\r\n                        <ExampleSetFormData />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/set-path-value\">\r\n                        <ExampleSetPathValue />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/unset-path-value\">\r\n                        <ExampleUnsetPathValue />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/set-rules\">\r\n                        <ExampleSetRules />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/set-form-data-and-rules\">\r\n                        <ExampleSetFormDataAndRules />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/form-data\">\r\n                        <ExampleFormData />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/validation-error\">\r\n                        <ExampleValidationError />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/validation-error-original-result\">\r\n                        <ExampleValidationErrorOriginalResult />\r\n                    </Route>\r\n                    <Route exact path=\"/api/react-validatable-form-provider\">\r\n                        <ApiReactValidatableFormProvider openSettingsDialog={props.openSettingsDialog} />\r\n                    </Route>\r\n                    <Route exact path=\"/api/use-validatable-form\">\r\n                        <ApiUseValidatableForm />\r\n                    </Route>\r\n                    <Route exact path=\"/api/rules\">\r\n                        <ApiRules />\r\n                    </Route>\r\n                    <Route exact path=\"/api/rule\">\r\n                        <ApiRule />\r\n                    </Route>\r\n                    <Route exact path=\"/api/path\">\r\n                        <ApiPath />\r\n                    </Route>\r\n                    <Route exact path=\"/\">\r\n                        <Homepage />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import { useEffect, useState } from 'react';\r\nimport { ReactValidatableFormProvider } from 'react-validatable-form';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport './Main.css';\r\nimport BodyWrapper from './BodyWrapper';\r\nimport Routes from './Routes';\r\nimport ExampleUsageWrapper from './ExampleUsageWrapper';\r\n\r\nconst MyCustomRuleFunction = (ruleParams) => {\r\n    const { value } = ruleParams;\r\n\r\n    if (!value) {\r\n        return 'this field include is a required field';\r\n    }\r\n\r\n    if (!value.includes('a') && value.length < 5) {\r\n        return `text ${value} should either include letter 'a' or its length should be greater than 4`;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nconst customRules = {\r\n    myCustomRule: MyCustomRuleFunction,\r\n};\r\n\r\nconst defaultSettings = {\r\n    lang: 'en',\r\n    translationsEnabled: false,\r\n    customDateFormatterFunctionEnabled: false,\r\n    customDateWithTimeFormatterFunctionEnabled: false,\r\n    hideBeforeSubmit: false,\r\n    showAfterBlur: false,\r\n    focusToErrorAfterSubmit: false,\r\n    customElementFocusHandlerEnabled: false,\r\n};\r\n\r\nconst customTranslations = {\r\n    en: {\r\n        required: 'This field is really required',\r\n        'length.greaterThan': 'Believe me, this field should really have greater than ${comparisonValue} characters',\r\n        'length.equalTo': 'You should be careful because this field should have ${comparisonValue} characters',\r\n    },\r\n    de: {\r\n        required: 'Dieses Feld wird benötigt',\r\n    },\r\n};\r\n\r\nconst customDateFormatterFunction = (dateParam) => {\r\n    const strArray = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    const d = dateParam.getDate();\r\n    const m = strArray[dateParam.getMonth()];\r\n    const y = dateParam.getFullYear();\r\n    return '' + (d <= 9 ? '0' + d : d) + '-' + m + '-' + y;\r\n};\r\n\r\nconst customDateWithTimeFormatterFunction = (dateParam) => {\r\n    const strArray = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    const d = dateParam.getDate();\r\n    const m = strArray[dateParam.getMonth()];\r\n    const y = dateParam.getFullYear();\r\n    const h = dateParam.getHours();\r\n    const mi = dateParam.getMinutes();\r\n    return '' + (d <= 9 ? '0' + d : d) + '-' + m + '-' + y + ' ' + h + ':' + mi;\r\n};\r\n\r\nconst defaultLangOptions = ['en', 'tr'];\r\n\r\nconst Main = () => {\r\n    const isMobile = useMediaQuery('(max-width:1024px)');\r\n    const [currentSettings, setCurrentSettings] = useState(defaultSettings);\r\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState(false);\r\n    const [menuIsHidden, setMenuIsHidden] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setMenuIsHidden(isMobile);\r\n    }, [isMobile]);\r\n\r\n    const handleOutsideClick = () => {\r\n        if (isMobile) {\r\n            setMenuIsHidden(true);\r\n        }\r\n    };\r\n\r\n    const handleOnMenuItemSelect = () => {\r\n        if (isMobile) {\r\n            setMenuIsHidden(true);\r\n        }\r\n    };\r\n\r\n    const openSettingsDialog = () => {\r\n        setSettingsDialogOpen(true);\r\n    };\r\n\r\n    const handleSettingChange = (key, value) => {\r\n        const newSettings = { ...currentSettings };\r\n        newSettings[key] = value;\r\n        if (key === 'translationsEnabled' && !value) {\r\n            if (currentSettings.lang === 'de') {\r\n                newSettings['lang'] = 'en';\r\n            }\r\n        }\r\n        setCurrentSettings(newSettings);\r\n    };\r\n\r\n    let translations = null;\r\n    if (currentSettings.translationsEnabled) {\r\n        translations = customTranslations;\r\n    }\r\n\r\n    let dateFormatterFunction = null;\r\n    if (currentSettings.customDateFormatterFunctionEnabled) {\r\n        dateFormatterFunction = customDateFormatterFunction;\r\n    }\r\n\r\n    let dateWithTimeFormatterFunction = null;\r\n    if (currentSettings.customDateWithTimeFormatterFunctionEnabled) {\r\n        dateWithTimeFormatterFunction = customDateWithTimeFormatterFunction;\r\n    }\r\n\r\n    const currentLangOptions = [...defaultLangOptions];\r\n    if (currentSettings.translationsEnabled) {\r\n        currentLangOptions.push('de');\r\n    }\r\n\r\n    let customElementFocusHandler = null;\r\n    if (currentSettings.customElementFocusHandlerEnabled) {\r\n        customElementFocusHandler = (elementId) => {\r\n            const element = document.getElementById(elementId);\r\n            if (!element) {\r\n                console.warn(`useValidatableForm warning. Dom element with id ${elementId} is not found to be focused`);\r\n            } else {\r\n                console.log(`I'm currently focusing Dom element with id ${elementId}`);\r\n                element.focus();\r\n            }\r\n        };\r\n    }\r\n\r\n    const dialogContent = (\r\n        <div className={'providerDialogContent'}>\r\n            <Autocomplete\r\n                value={currentSettings.lang}\r\n                onChange={(event, newValue) => {\r\n                    handleSettingChange('lang', newValue);\r\n                }}\r\n                options={currentLangOptions}\r\n                renderInput={(params) => <TextField {...params} label=\"lang\" />}\r\n                style={{ width: 200 }}\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={currentSettings.translationsEnabled}\r\n                        onChange={(e) => handleSettingChange('translationsEnabled', e.target.checked)}\r\n                    />\r\n                }\r\n                label=\"custom translations\"\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={currentSettings.customDateFormatterFunctionEnabled}\r\n                        onChange={(e) => handleSettingChange('customDateFormatterFunctionEnabled', e.target.checked)}\r\n                    />\r\n                }\r\n                label=\"custom dateFormatterFunction\"\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={currentSettings.customDateWithTimeFormatterFunctionEnabled}\r\n                        onChange={(e) =>\r\n                            handleSettingChange('customDateWithTimeFormatterFunctionEnabled', e.target.checked)\r\n                        }\r\n                    />\r\n                }\r\n                label=\"custom dateWithTimeFormatterFunction\"\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={currentSettings.hideBeforeSubmit}\r\n                        onChange={(e) => handleSettingChange('hideBeforeSubmit', e.target.checked)}\r\n                    />\r\n                }\r\n                label=\"hideBeforeSubmit\"\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={currentSettings.showAfterBlur}\r\n                        onChange={(e) => handleSettingChange('showAfterBlur', e.target.checked)}\r\n                    />\r\n                }\r\n                label=\"showAfterBlur\"\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={currentSettings.focusToErrorAfterSubmit}\r\n                        onChange={(e) => handleSettingChange('focusToErrorAfterSubmit', e.target.checked)}\r\n                    />\r\n                }\r\n                label=\"focusToErrorAfterSubmit\"\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={currentSettings.customElementFocusHandlerEnabled}\r\n                        onChange={(e) => handleSettingChange('customElementFocusHandlerEnabled', e.target.checked)}\r\n                    />\r\n                }\r\n                label=\"custom elementFocusHandler\"\r\n            />\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <div className=\"headerDiv\"></div>\r\n            <IconButton onClick={() => setMenuIsHidden(!menuIsHidden)} className=\"menuButton\">\r\n                <MenuIcon />\r\n            </IconButton>\r\n            <Dialog open={settingsDialogOpen} onClose={() => setSettingsDialogOpen(false)}>\r\n                <DialogTitle>\r\n                    <ExampleUsageWrapper\r\n                        header=\"Edit ReactValidatableFormProvider Props\"\r\n                        codeUrl=\"components/Main.js\"\r\n                        wrapperClassName=\"modalHeaderWrapper\"\r\n                    />\r\n                </DialogTitle>\r\n                {dialogContent}\r\n            </Dialog>\r\n            <ReactValidatableFormProvider\r\n                lang={currentSettings.lang}\r\n                customRules={customRules}\r\n                translations={translations}\r\n                dateFormatterFunction={dateFormatterFunction}\r\n                dateWithTimeFormatterFunction={dateWithTimeFormatterFunction}\r\n                hideBeforeSubmit={currentSettings.hideBeforeSubmit}\r\n                showAfterBlur={currentSettings.showAfterBlur}\r\n                focusToErrorAfterSubmit={currentSettings.focusToErrorAfterSubmit}\r\n                elementFocusHandler={customElementFocusHandler}\r\n            >\r\n                <BodyWrapper>\r\n                    <div className=\"flex h-screen\">\r\n                        <Routes\r\n                            onMenuItemSelect={handleOnMenuItemSelect}\r\n                            openSettingsDialog={openSettingsDialog}\r\n                            menuIsHidden={menuIsHidden}\r\n                            onOutsideClick={handleOutsideClick}\r\n                        />\r\n                    </div>\r\n                </BodyWrapper>\r\n            </ReactValidatableFormProvider>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import { GTMProvider } from '@elgorditosalsero/react-gtm-hook';\r\nimport './App.css';\r\nimport Main from './components/Main';\r\n\r\nfunction App() {\r\n    const gtmParams = { id: process.env.REACT_APP_GOOGLE_TAG_MANAGER_ID };\r\n    let appJsx = <Main />;\r\n    if (process.env.NODE_ENV === 'production') {\r\n        appJsx = (\r\n            <GTMProvider state={gtmParams}>\r\n                <Main />\r\n            </GTMProvider>\r\n        );\r\n    }\r\n    return appJsx;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './styles/sidenavigation.css';\r\nimport App from './App';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primereact/resources/themes/saga-blue/theme.css';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n            <App />\r\n        </LocalizationProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}