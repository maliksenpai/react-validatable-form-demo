{"version":3,"sources":["components/BodyWrapper.js","components/NavSidebar.js","components/Homepage.js","components/ExampleUsageWrapper.js","components/ValidationResult.js","components/CurrentRulesInfo.js","components/rules/RuleRequired.js","constants/Constants.js","components/rules/RuleNumber.js","components/rules/RuleLength.js","constants/Data.js","components/rules/RuleListSize.js","components/rules/RuleDate.js","components/rules/RuleEmail.js","components/rules/RuleUrl.js","components/rules/RuleIban.js","components/rules/RuleCustomOnHook.js","components/rules/RuleCustomOnProvider.js","components/FormSubmitResult.js","components/advanced/AdvancedHideBeforeSubmit.js","components/advanced/AdvancedShowAfterBlur.js","components/advanced/AdvancedFocusToErrorAfterSubmit.js","components/customizations/CustomMessage.js","components/customizations/CustomTranslations.js","components/advanced/AdvancedSubComponent.js","components/advanced/AdvancedValidateComplexForms.js","components/advanced/AdvancedValidateLists.js","components/customizations/CustomConditionalRules.js","components/rules/RuleRegex.js","components/advanced/AdvancedFocusToErrorOnListAfterSubmit.js","components/advanced/AdvancedValidateListOfObjects.js","components/getting-started/Installation.js","components/getting-started/Usage.js","components/customizations/CustomApplyToNulls.js","components/customizations/CustomElementFocusHandler.js","components/rules/RuleUnique.js","components/rules/RuleEquality.js","components/examples/ExamplePureUsage.js","components/examples/ExampleMuiUsage.js","components/examples/ExamplePrimeReact.js","components/examples/ExampleReactBootstrap.js","components/examples/ExampleSetFormData.js","components/examples/ExampleSetPathValue.js","components/examples/ExampleSetFormDataAndRules.js","components/examples/ExampleFormData.js","components/ApiInfo.js","components/CodeAccordion.js","components/api/ApiUseValidatableForm.js","components/api/ApiReactValidatableFormProvider.js","components/api/ApiRules.js","components/api/ApiRule.js","components/api/ApiPath.js","components/examples/ExampleValidationError.js","components/examples/ExampleSetRules.js","components/examples/ExampleUnsetPathValue.js","components/examples/ExampleValidationErrorOriginalResult.js","components/examples/ExampleUnsetPathIsBlurred.js","components/rules/RuleIncludes.js","components/getting-started/Home.js","components/Routes.js","components/Settings.js","components/MainDrawer.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["BodyWrapper","children","className","allMenuItems","title","itemId","subNav","keywords","NavSidebar","menuIsHidden","toggleDrawer","onMenuItemSelect","location","useHistory","useLocation","useState","searchInput","setSearchInput","setFirstPathname","expanded","setExpanded","useEffect","pathname","includes","handleClickList","filteredMenuItems","JSON","parse","stringify","filter","m","result","searchInputUpper","toUpperCase","length","subsList","i","subEl","replaceAll","k","push","accordionNavigations","map","fm","Accordion","onChange","id","AccordionSummary","expandIcon","ExpandMore","Typography","AccordionDetails","List","disablePadding","sn","onClick","to","ListItem","button","ListItemText","primary","menuStatus","TextField","label","InputProps","endAdornment","InputAdornment","position","Search","value","event","target","Box","flexGrow","pt","Homepage","ExampleUsageWrapper","props","urlsJsx","codeUrl","urls","Array","isArray","url","pageCodeUrl","href","rel","wrapperClassName","header","ValidationResult","isValid","imgSrc","process","validationResultText","src","alt","stringifyWithFunction","obj","placeholder","fns","json","key","RegExp","source","replace","shift","CurrentRulesInfo","currentRules","initialFormData","rules","path","ruleSet","rule","RuleRequired","useValidatableForm","setPathValue","getValue","getError","error","helperText","type","e","ruleOptions","numberRule","dependantPaths","val","ruleOption","comparisonValue","RuleNumber","setRules","setCurrentRules","setRuleOption","isFunc","setIsFunc","onlyIntegers","setOnlyIntegers","updateRules","funcParam","ruleParam","onlyIntegersParam","newRules","newRuleSet","newRule","formData","splice","join","Autocomplete","newValue","handleRuleOptionChange","options","disableClearable","renderInput","params","disabled","FormGroup","FormControlLabel","control","Checkbox","checked","lengthRule","RuleLength","listSizeRule","slice","RuleListSize","multiple","today","Date","defaultComparisonValue","yesterday","setDate","getDate","dateRule","RuleDate","withTime","setWithTime","withTimeParam","PickerComponent","DateTimePicker","DesktopDatePicker","pickerFormat","inputFormat","RuleEmail","RuleUrl","RuleIban","ruleParams","RuleCustomOnHook","RuleCustomOnProvider","FormSubmitResult","textVal1","textVal2","val3","textVal4","checkVal","greaterThanOrEqualTo","equalTo","AdvancedHideBeforeSubmit","hideBeforeSubmit","setFormIsSubmitted","resetForm","dialogOpen","setDialogOpen","Button","variant","Dialog","open","onClose","DialogTitle","AdvancedShowAfterBlur","showAfterBlur","setPathIsBlurred","onBlur","AdvancedFocusToErrorAfterSubmit","focusToErrorAfterSubmit","val1","val2","greaterThan","customMessage","errorParams","CustomMessage","CustomTranslations","AdvancedSubComponent","disableSubkey2","index","disableAllSubkey2Rule","listChild","disableSubkey2Rule","listPath","subRules","disableIf","elementId","applyToNulls","AdvancedValidateComplexForms","nextId","setNextId","listChildJsx","lc","newListChild","el","handleDeleteElement","style","marginLeft","AdvancedValidateLists","ind","handleAddElement","enableIf","CustomConditionalRules","regex","RuleRegex","AdvancedFocusToErrorOnListAfterSubmit","AdvancedValidateListOfObjects","width","npmCommand","yarnCommand","Installation","npmCopied","setNpmCopied","yarnCopied","setYarnCopied","Tooltip","placement","navigator","clipboard","writeText","setTimeout","Usage","openSettingsDialog","allow","sandbox","CustomApplyToNulls","myCustomElementFocusHandler","element","document","getElementById","grantParentElement","parentElement","classList","add","focus","remove","console","warn","CustomElementFocusHandler","elementFocusHandler","RuleUnique","listOfObjectsChild","subkey1","listOfObjectsChildJsx","newListOfObjectsChild","handleDeleteObjectElement","RuleEquality","FormControl","FormHelperText","ExamplePureUsage","htmlFor","op","alert","ExampleMuiUsage","primeReactElementsFocusHandler","tagName","inputNodes","getElementsByTagName","ExamplePrimeReact","visible","modal","onHide","onMaskClick","draggable","resizable","ExampleReactBootstrap","Form","Group","controlId","Label","Control","isInvalid","Feedback","Select","ExampleSetFormData","validationError","setFormData","formFilledState","setFormFilledState","numVal","selectVal","get","ExampleSetPathValue","rules2","rules3","ExampleSetFormDataAndRules","setFormDataAndRules","ExampleFormData","ApiInfo","apiInfoListJsx","apiInfoList","api","apiLabel","apiDesc","desc","apiIndent","indent","leftIndentStyle","paddingLeft","borderTop","CodeAccordion","code","hookParametersApiInfoList","returnValuesApiInfoList","ApiUseValidatableForm","providerParametersApiInfoList","ApiReactValidatableFormProvider","rulesParametersApiInfoList","ApiRules","ruleParametersApiInfoList","ApiRule","ApiPath","ExampleValidationError","ExampleSetRules","ExampleUnsetPathValue","unsetPathValue","ExampleValidationErrorOriginalResult","validationErrorOriginalResult","ExampleUnsetPathIsBlurred","unsetPathIsBlurred","RuleIncludes","Home","display","textAlign","justifyContent","alignItems","flexDirection","rowGap","flexWrap","gap","py","size","sx","borderRadius","autoPlay","loop","playsInline","muted","Routes","onOutsideClick","exact","Settings","versionInfo","SettingsOutlined","MainDrawer","Drawer","ModalProps","keepMounted","anchor","customRules","myCustomRule","defaultSettings","lang","translationsEnabled","customDateFormatterFunctionEnabled","customDateWithTimeFormatterFunctionEnabled","customElementFocusHandlerEnabled","customTranslations","en","required","de","customDateFormatterFunction","dateParam","d","getMonth","getFullYear","customDateWithTimeFormatterFunction","getHours","getMinutes","defaultLangOptions","Main","isMobile","useMediaQuery","currentSettings","setCurrentSettings","settingsDialogOpen","setSettingsDialogOpen","setMenuIsHidden","setAnchor","handleSettingChange","newSettings","translations","dateFormatterFunction","dateWithTimeFormatterFunction","currentLangOptions","customElementFocusHandler","log","dialogContent","AppBar","color","Toolbar","IconButton","App","state","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","LocalizationProvider","dateAdapter","AdapterDateFns"],"mappings":"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","file":"static/js/main.b26a2b3e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst BodyWrapper = ({ children }) => {\r\n    return (\r\n        <div className=\"relative min-h-screen\">\r\n            <main className=\"w-full min-h-screen\">{children}</main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BodyWrapper;\r\n","import { Link, useHistory, useLocation } from 'react-router-dom';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport 'react-minimal-side-navigation/lib/ReactMinimalSideNavigation.css';\r\nimport {\r\n    Accordion,\r\n    AccordionDetails,\r\n    AccordionSummary,\r\n    Box,\r\n    InputAdornment,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    TextField,\r\n    Typography,\r\n} from '@mui/material';\r\nimport { ExpandMore, Search } from '@mui/icons-material';\r\n\r\nconst allMenuItems = [\r\n    {\r\n        title: 'Getting Started',\r\n        itemId: 'group1',\r\n        subNav: [\r\n            {\r\n                title: 'Home',\r\n                itemId: '/getting-started/home',\r\n                keywords: ['home', 'npm', 'yarn'],\r\n            },\r\n            {\r\n                title: 'Installation',\r\n                itemId: '/getting-started/installation',\r\n                keywords: ['npm', 'yarn'],\r\n            },\r\n            {\r\n                title: 'Usage',\r\n                itemId: '/getting-started/usage',\r\n                keywords: ['ReactValidatableFormProvider', 'useValidatableForm'],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        title: 'Rules',\r\n        itemId: 'group2',\r\n        subNav: [\r\n            {\r\n                title: 'required',\r\n                itemId: '/rules/required',\r\n            },\r\n            {\r\n                title: 'number',\r\n                itemId: '/rules/number',\r\n                keywords: ['onlyIntegers'],\r\n            },\r\n            {\r\n                title: 'length',\r\n                itemId: '/rules/length',\r\n            },\r\n            {\r\n                title: 'listSize',\r\n                itemId: '/rules/list-size',\r\n            },\r\n            {\r\n                title: 'date',\r\n                itemId: '/rules/date',\r\n                keywords: ['time', 'withTime'],\r\n            },\r\n            {\r\n                title: 'email',\r\n                itemId: '/rules/email',\r\n            },\r\n            {\r\n                title: 'url',\r\n                itemId: '/rules/url',\r\n            },\r\n            {\r\n                title: 'iban',\r\n                itemId: '/rules/iban',\r\n            },\r\n            {\r\n                title: 'equality',\r\n                itemId: '/rules/equality',\r\n            },\r\n            {\r\n                title: 'includes',\r\n                itemId: '/rules/includes',\r\n            },\r\n            {\r\n                title: 'regex',\r\n                itemId: '/rules/regex',\r\n            },\r\n            {\r\n                title: 'unique',\r\n                itemId: '/rules/unique',\r\n            },\r\n            {\r\n                title: 'custom on hook',\r\n                itemId: '/rules/custom-on-hook',\r\n            },\r\n            {\r\n                title: 'custom on provider',\r\n                itemId: '/rules/custom-on-provider',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        title: 'Advanced Settings',\r\n        itemId: 'group3',\r\n        subNav: [\r\n            {\r\n                title: 'Validate Lists',\r\n                itemId: '/advanced/validate-lists',\r\n            },\r\n            {\r\n                title: 'Hide Before Submit',\r\n                itemId: '/advanced/hide-before-submit',\r\n                keywords: ['resetForm'],\r\n            },\r\n            {\r\n                title: 'Show After Blur',\r\n                itemId: '/advanced/show-after-blur',\r\n                keywords: ['resetForm'],\r\n            },\r\n            {\r\n                title: 'Focus to Error After Submit',\r\n                itemId: '/advanced/focus-to-error-after-submit',\r\n            },\r\n            {\r\n                title: 'Focus to Error on List After Submit',\r\n                itemId: '/advanced/focus-to-error-on-list-after-submit',\r\n            },\r\n            {\r\n                title: 'Validate List of Objects',\r\n                itemId: '/advanced/validate-list-of-objects',\r\n            },\r\n            {\r\n                title: 'Validate Complex Forms',\r\n                itemId: '/advanced/validate-complex-forms',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        title: 'Customizations',\r\n        itemId: 'group4',\r\n        subNav: [\r\n            {\r\n                title: 'Custom Message',\r\n                itemId: '/customizations/custom-message',\r\n            },\r\n            {\r\n                title: 'Custom Translations',\r\n                itemId: '/customizations/translations',\r\n            },\r\n            {\r\n                title: 'Conditional Rules',\r\n                itemId: '/customizations/conditional-rules',\r\n                keywords: ['disableIf', 'enableIf'],\r\n            },\r\n            {\r\n                title: 'Apply to Nulls',\r\n                itemId: '/customizations/apply-to-nulls',\r\n            },\r\n            {\r\n                title: 'Element Focus Handler',\r\n                itemId: '/customizations/custom-element-focus-handler',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        title: 'Example Usages',\r\n        itemId: 'group5',\r\n        subNav: [\r\n            {\r\n                title: 'Pure React Components',\r\n                itemId: '/examples/pure',\r\n            },\r\n            {\r\n                title: 'MUI Components',\r\n                itemId: '/examples/mui',\r\n                keywords: ['materialui', 'material-ui'],\r\n            },\r\n            {\r\n                title: 'PrimeReact Components',\r\n                itemId: '/examples/prime-react',\r\n            },\r\n            {\r\n                title: 'React-Bootstrap Components',\r\n                itemId: '/examples/react-bootstrap',\r\n            },\r\n            {\r\n                title: 'setFormData',\r\n                itemId: '/examples/set-form-data',\r\n            },\r\n            {\r\n                title: 'setPathValue',\r\n                itemId: '/examples/set-path-value',\r\n            },\r\n            {\r\n                title: 'unsetPathValue',\r\n                itemId: '/examples/unset-path-value',\r\n            },\r\n            {\r\n                title: 'setRules',\r\n                itemId: '/examples/set-rules',\r\n            },\r\n            {\r\n                title: 'setFormDataAndRules',\r\n                itemId: '/examples/set-form-data-and-rules',\r\n            },\r\n            {\r\n                title: 'formData',\r\n                itemId: '/examples/form-data',\r\n            },\r\n            {\r\n                title: 'validationError',\r\n                itemId: '/examples/validation-error',\r\n            },\r\n            {\r\n                title: 'validationErrorOriginalResult',\r\n                itemId: '/examples/validation-error-original-result',\r\n            },\r\n            {\r\n                title: 'unsetPathIsBlurred',\r\n                itemId: '/examples/unset-path-is-blurred',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        title: 'API',\r\n        itemId: 'group6',\r\n        subNav: [\r\n            {\r\n                title: 'ReactValidatableFormProvider',\r\n                itemId: '/api/react-validatable-form-provider',\r\n                keywords: [\r\n                    'lang',\r\n                    'customRules',\r\n                    'translations',\r\n                    'dateFormatterFunction',\r\n                    'dateWithTimeFormatterFunction',\r\n                    'hideBeforeSubmit',\r\n                    'showAfterBlur',\r\n                    'focusToErrorAfterSubmit',\r\n                    'elementFocusHandler',\r\n                ],\r\n            },\r\n            {\r\n                title: 'useValidatableForm',\r\n                itemId: '/api/use-validatable-form',\r\n                keywords: [\r\n                    'rules',\r\n                    'initialFormData',\r\n                    'hideBeforeSubmit',\r\n                    'showAfterBlur',\r\n                    'focusToErrorAfterSubmit',\r\n                    'elementFocusHandler',\r\n                    'isValid',\r\n                    'validationError',\r\n                    'validationErrorOriginalResult',\r\n                    'setPathValue',\r\n                    'unsetPathValue',\r\n                    'setFormIsSubmitted',\r\n                    'setPathIsBlurred',\r\n                    'unsetPathIsBlurred',\r\n                    'setFormData',\r\n                    'setRules',\r\n                    'setFormDataAndRules',\r\n                    'resetForm',\r\n                    'getValue',\r\n                    'getError',\r\n                    'forceRunAllValidations',\r\n                ],\r\n            },\r\n            {\r\n                title: 'rules',\r\n                itemId: '/api/rules',\r\n                keywords: [\r\n                    'path',\r\n                    'listPath',\r\n                    'ruleSet',\r\n                    'elementId',\r\n                    'listElementId',\r\n                    'dependantPaths',\r\n                    'disableFocusAfterSubmit',\r\n                    'subRules',\r\n                ],\r\n            },\r\n            {\r\n                title: 'Rule',\r\n                itemId: '/api/rule',\r\n                keywords: [\r\n                    'equalTo',\r\n                    'lessThan',\r\n                    'lessThanOrEqualTo',\r\n                    'greaterThan',\r\n                    'greaterThanOrEqualTo',\r\n                    'notEqualTo',\r\n                    'onlyIntegers',\r\n                    'withTime',\r\n                    'applyToNulls',\r\n                    'disableIf',\r\n                    'enableIf',\r\n                    'customMessage',\r\n                ],\r\n            },\r\n            {\r\n                title: 'path & listPath',\r\n                itemId: '/api/path',\r\n                keywords: ['lodash', 'path', 'listPath'],\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\nexport const NavSidebar = ({ menuIsHidden, onMenuItemSelect, toggleDrawer }) => {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const [searchInput, setSearchInput] = useState('');\r\n    const [firstPathname, setFirstPathname] = useState(null);\r\n    const [expanded, setExpanded] = useState('');\r\n\r\n    useEffect(() => {\r\n        setSearchInput('');\r\n        if (location.pathname === '/') {\r\n            setFirstPathname('/getting-started/home');\r\n        } else {\r\n            setFirstPathname(location.pathname);\r\n        }\r\n        if (location.pathname.includes('/getting-started/')) {\r\n            setExpanded('group1');\r\n        } else if (location.pathname.includes('/rules/')) {\r\n            setExpanded('group2');\r\n        } else if (location.pathname.includes('/advanced/')) {\r\n            setExpanded('group3');\r\n        } else if (location.pathname.includes('/customizations/')) {\r\n            setExpanded('group4');\r\n        } else if (location.pathname.includes('/examples/')) {\r\n            setExpanded('group5');\r\n        } else if (location.pathname.includes('/api/')) {\r\n            setExpanded('group6');\r\n        }\r\n    }, [location]);\r\n\r\n    const handleTextInput = (event) => {\r\n        setSearchInput(event.target.value);\r\n        if (event.target.value !== '') {\r\n            setExpanded('open');\r\n        } else {\r\n            setExpanded('');\r\n        }\r\n    };\r\n\r\n    const handleAccordionChange = (id) => {\r\n        if (id === expanded) {\r\n            setExpanded('');\r\n        } else {\r\n            setExpanded(id);\r\n        }\r\n    };\r\n\r\n    const handleClickList = () => {\r\n        toggleDrawer(false);\r\n    };\r\n\r\n    let filteredMenuItems = JSON.parse(JSON.stringify(allMenuItems));\r\n    if (searchInput) {\r\n        filteredMenuItems = filteredMenuItems.filter((m) => {\r\n            let result = false;\r\n            let searchInputUpper = searchInput.toUpperCase();\r\n            if (m.subNav && m.subNav.length > 0) {\r\n                let subsList = [];\r\n                for (let i = 0; i < m.subNav.length; i++) {\r\n                    const subEl = m.subNav[i];\r\n                    const keywords = subEl.keywords || [];\r\n                    if (\r\n                        subEl.title.toUpperCase().includes(searchInputUpper) ||\r\n                        subEl.title.replaceAll(/\\s/g, '').toUpperCase().includes(searchInputUpper) ||\r\n                        keywords.filter((k) => k.toUpperCase().includes(searchInputUpper)).length > 0\r\n                    ) {\r\n                        subsList.push(subEl);\r\n                        result = true;\r\n                    }\r\n                }\r\n                if (subsList && subsList.length > 0) {\r\n                    m.subNav = subsList;\r\n                }\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    const accordionNavigations = filteredMenuItems.map((fm) => {\r\n        return (\r\n            <Accordion\r\n                expanded={expanded === fm.itemId || expanded === 'open'}\r\n                key={fm.itemId}\r\n                onChange={() => handleAccordionChange(fm.itemId)}\r\n            >\r\n                <AccordionSummary aria-controls=\"panel1a-content\" expandIcon={<ExpandMore />}>\r\n                    <Typography> {fm.title} </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <List disablePadding>\r\n                        {fm.subNav.map((sn) => {\r\n                            return (\r\n                                <div\r\n                                    className={location.pathname.includes(sn.itemId) ? 'selectedSideItem' : null}\r\n                                    key={sn.itemId}\r\n                                    onClick={handleClickList}\r\n                                >\r\n                                    <Link to={sn.itemId}>\r\n                                        <ListItem button>\r\n                                            <ListItemText primary={sn.title} />\r\n                                        </ListItem>\r\n                                    </Link>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </List>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        );\r\n    });\r\n\r\n    const menuStatus = menuIsHidden ? 'sideMenuHidden' : 'sideMenuOpen';\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className={`${menuStatus} mysidemenu inset-y-0 left-0 z-30 overflow-y-auto transition duration-300 ease-out transform translate-x-0 bg-white border-r-2 lg:translate-x-0 lg:static lg:inset-0 ${'ease-out translate-x-0'}`}\r\n            >\r\n                <div className=\"flex items-center justify-center text-center\">\r\n                    <TextField\r\n                        className=\"menu-search-input\"\r\n                        label=\"Search\"\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                    <Search />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                        value={searchInput}\r\n                        onChange={handleTextInput}\r\n                    />\r\n                </div>\r\n                <Box flexGrow={1} pt={1}>\r\n                    {accordionNavigations}\r\n                </Box>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import { Redirect } from 'react-router';\r\n\r\nconst Homepage = () => {\r\n    return <Redirect to=\"/getting-started/home\" />;\r\n};\r\n\r\nexport default Homepage;\r\n","import './ExampleUsageWrapper.css';\r\n\r\nconst CODE_BASE_URL = 'https://github.com/obss/react-validatable-form-demo/blob/master/src/';\r\n\r\nconst ExampleUsageWrapper = (props) => {\r\n    let urlsJsx = null;\r\n\r\n    if (props.codeUrl) {\r\n        let urls = [];\r\n        if (Array.isArray(props.codeUrl)) {\r\n            urls = [...props.codeUrl];\r\n        } else {\r\n            urls.push(props.codeUrl);\r\n        }\r\n        urlsJsx = urls.map((url) => {\r\n            const pageCodeUrl = CODE_BASE_URL + url;\r\n            return (\r\n                <span key={url} className=\"pageCodeUrlSpan\">\r\n                    <a href={pageCodeUrl} target=\"_blank\" rel=\"noreferrer\">\r\n                        View on GitHub\r\n                    </a>\r\n                </span>\r\n            );\r\n        });\r\n    }\r\n\r\n    const wrapperClassName = props.wrapperClassName || 'examplesUsageWrapperDiv';\r\n\r\n    return (\r\n        <div className={wrapperClassName}>\r\n            <span className=\"pageTitle\">{props.header}</span>\r\n            {urlsJsx}\r\n            <div className=\"mainWrapperDiv\">{props.children}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExampleUsageWrapper;\r\n","import './ValidationResult.css';\r\n\r\nconst ValidationResult = ({ isValid }) => {\r\n    let imgSrc = process.env.PUBLIC_URL + '/';\r\n    let validationResultText = '';\r\n    if (isValid) {\r\n        imgSrc += 'valid.png';\r\n        validationResultText = 'valid';\r\n    } else {\r\n        imgSrc += 'invalid.png';\r\n        validationResultText = 'invalid';\r\n    }\r\n\r\n    return (\r\n        <div className={'validationResultDiv'}>\r\n            <span>Validation Result: </span>\r\n            <img src={imgSrc} alt=\"validationresult\" className={'validationResultIcon'} />\r\n            <span className={isValid ? 'validationResultInfoSuccess' : 'validationResultInfoFail'}>\r\n                {validationResultText}\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ValidationResult;\r\n","import './CurrentRulesInfo.css';\r\nimport Accordion from '@mui/material/Accordion';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport AccordionDetails from '@mui/material/AccordionDetails';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\n\r\nconst stringifyWithFunction = (obj) => {\r\n    var placeholder = '____PLACEHOLDER____';\r\n    var fns = [];\r\n    var json = JSON.stringify(\r\n        obj,\r\n        function (key, value) {\r\n            if (typeof value === 'function') {\r\n                fns.push(value);\r\n                return placeholder;\r\n            }\r\n            if (value instanceof RegExp) {\r\n                fns.push('/' + value.source + '/');\r\n                return placeholder;\r\n            }\r\n            return value;\r\n        },\r\n        2\r\n    );\r\n    json = json.replace(new RegExp('\"' + placeholder + '\"', 'g'), function () {\r\n        return fns.shift();\r\n    });\r\n    return json;\r\n};\r\n\r\nconst CurrentRulesInfo = ({ currentRules, header = 'Current Rules' }) => {\r\n    return (\r\n        <div className={'currentRuleInfoDiv'}>\r\n            <Accordion>\r\n                <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\">\r\n                    <span className={'currentRuleLabel'}>{header}</span>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <span className={'currentRuleString'}>{stringifyWithFunction(currentRules)}</span>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrentRulesInfo;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {};\r\n\r\nconst rules = [{ path: 'val', ruleSet: [{ rule: 'required' }] }];\r\n\r\nconst RuleRequired = () => {\r\n    const { isValid, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"required\" codeUrl=\"components/rules/RuleRequired.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>required</b> rule checks if the given value is <b>undefined</b>, <b>null</b>, <b>empty string</b> or{' '}\r\n                <b>empty array</b>.\r\n            </p>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val')}\r\n                    helperText={getError('val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={getValue('val') || ''}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleRequired;\r\n","export const ruleOptions = [\r\n    'equalTo',\r\n    'lessThan',\r\n    'lessThanOrEqualTo',\r\n    'greaterThan',\r\n    'greaterThanOrEqualTo',\r\n    'notEqualTo',\r\n];\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { ruleOptions } from '../../constants/Constants';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst defaultComparisonValue = 5;\r\nconst numberRule = { rule: 'number' };\r\nnumberRule[ruleOptions[0]] = defaultComparisonValue;\r\nconst rules = [{ path: 'val', ruleSet: ['required', numberRule], dependantPaths: ['comparisonValue'] }];\r\nconst initialFormData = {\r\n    val: 3,\r\n    ruleOption: ruleOptions[0],\r\n    comparisonValue: defaultComparisonValue,\r\n};\r\n\r\nconst RuleNumber = () => {\r\n    const { isValid, setPathValue, setRules, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [ruleOption, setRuleOption] = useState(ruleOptions[0]);\r\n    const [isFunc, setIsFunc] = useState(false);\r\n    const [onlyIntegers, setOnlyIntegers] = useState(false);\r\n\r\n    const updateRules = (funcParam, ruleParam, onlyIntegersParam) => {\r\n        const newRules = JSON.parse(JSON.stringify(rules));\r\n        const newRuleSet = [...newRules[0].ruleSet];\r\n        const newRule = { rule: 'number' };\r\n        if (ruleParam) {\r\n            if (funcParam) {\r\n                newRule[ruleParam] = (formData) => formData['comparisonValue'];\r\n            } else {\r\n                newRule[ruleParam] = defaultComparisonValue;\r\n            }\r\n        }\r\n        if (onlyIntegersParam) {\r\n            newRule['onlyIntegers'] = true;\r\n        }\r\n        newRuleSet.splice(1, 1, newRule);\r\n        newRules[0].ruleSet = newRuleSet;\r\n        setCurrentRules(newRules);\r\n        setRules(newRules);\r\n    };\r\n\r\n    const handleSetIsFunc = (newValue) => {\r\n        updateRules(newValue, ruleOption, onlyIntegers);\r\n        setIsFunc(newValue);\r\n    };\r\n\r\n    const handleRuleOptionChange = (newValue) => {\r\n        updateRules(isFunc, newValue, onlyIntegers);\r\n        setRuleOption(newValue);\r\n    };\r\n\r\n    const handleOnlyIntegersChange = (newValue) => {\r\n        updateRules(isFunc, ruleOption, newValue);\r\n        setOnlyIntegers(newValue);\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"number\" codeUrl=\"components/rules/RuleNumber.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>number</b> rule checks if the given value is a valid number. If <b>onlyIntegers</b> parameter is set,\r\n                it also checks if given value is an integer. <b>{ruleOptions.join(', ')}</b> parameters are used to make\r\n                comparisons with given comparison values.\r\n            </p>\r\n            <div className=\"comparisonDiv\">\r\n                <TextField\r\n                    error={!!getError('val')}\r\n                    helperText={getError('val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"number\"\r\n                    value={getValue('val')}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n\r\n                <Autocomplete\r\n                    className=\"ruleOptionComponent\"\r\n                    value={ruleOption}\r\n                    onChange={(event, newValue) => {\r\n                        handleRuleOptionChange(newValue);\r\n                    }}\r\n                    options={ruleOptions}\r\n                    disableClearable={false}\r\n                    renderInput={(params) => <TextField {...params} label=\"ruleOption\" />}\r\n                />\r\n                {isFunc ? (\r\n                    <TextField\r\n                        className=\"comparisonComponent\"\r\n                        label=\"comparisonValue\"\r\n                        type=\"number\"\r\n                        value={getValue('comparisonValue')}\r\n                        onChange={(e) => setPathValue('comparisonValue', e.target.value)}\r\n                    />\r\n                ) : (\r\n                    <TextField\r\n                        disabled={true}\r\n                        className=\"comparisonComponent\"\r\n                        label=\"comparisonValue\"\r\n                        type=\"number\"\r\n                        value={defaultComparisonValue}\r\n                        onChange={() => {}}\r\n                    />\r\n                )}\r\n                <FormGroup className={'checkboxOnRight'}>\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={isFunc} onChange={(e) => handleSetIsFunc(e.target.checked)} />}\r\n                        label=\"as Function\"\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n            <div className=\"comparisonDiv\">\r\n                <FormGroup className={'checkboxOnRight'}>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={onlyIntegers}\r\n                                onChange={(e) => handleOnlyIntegersChange(e.target.checked)}\r\n                            />\r\n                        }\r\n                        label=\"onlyIntegers\"\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={currentRules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleNumber;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { ruleOptions } from '../../constants/Constants';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst defaultComparisonValue = 5;\r\nconst lengthRule = { rule: 'length' };\r\nlengthRule[ruleOptions[0]] = defaultComparisonValue;\r\nconst rules = [{ path: 'val', ruleSet: ['required', lengthRule], dependantPaths: ['comparisonValue'] }];\r\nconst initialFormData = {\r\n    val: 'aa',\r\n    ruleOption: ruleOptions[0],\r\n    comparisonValue: defaultComparisonValue,\r\n};\r\n\r\nconst RuleLength = () => {\r\n    const { isValid, setPathValue, setRules, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [ruleOption, setRuleOption] = useState(ruleOptions[0]);\r\n    const [isFunc, setIsFunc] = useState(false);\r\n\r\n    const updateRules = (funcParam, ruleParam) => {\r\n        const newRules = JSON.parse(JSON.stringify(rules));\r\n        const newRuleSet = [...newRules[0].ruleSet];\r\n        const newRule = { rule: 'length' };\r\n        if (funcParam) {\r\n            newRule[ruleParam] = (formData) => formData['comparisonValue'];\r\n        } else {\r\n            newRule[ruleParam] = defaultComparisonValue;\r\n        }\r\n        newRuleSet.splice(1, 1, newRule);\r\n        newRules[0].ruleSet = newRuleSet;\r\n        setCurrentRules(newRules);\r\n        setRules(newRules);\r\n    };\r\n\r\n    const handleSetIsFunc = (newValue) => {\r\n        updateRules(newValue, ruleOption);\r\n        setIsFunc(newValue);\r\n    };\r\n\r\n    const handleRuleOptionChange = (newValue) => {\r\n        updateRules(isFunc, newValue);\r\n        setRuleOption(newValue);\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"length\" codeUrl=\"components/rules/RuleLength.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>length</b> rule checks the length of a string. <b>{ruleOptions.join(', ')}</b> parameters are used to\r\n                make comparisons with given comparison values.\r\n            </p>\r\n            <div className=\"comparisonDiv\">\r\n                <TextField\r\n                    error={!!getError('val')}\r\n                    helperText={getError('val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={getValue('val')}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n\r\n                <Autocomplete\r\n                    className=\"ruleOptionComponent\"\r\n                    value={ruleOption}\r\n                    onChange={(event, newValue) => {\r\n                        handleRuleOptionChange(newValue);\r\n                    }}\r\n                    options={ruleOptions}\r\n                    disableClearable={true}\r\n                    renderInput={(params) => <TextField {...params} label=\"ruleOption\" />}\r\n                />\r\n                {isFunc ? (\r\n                    <TextField\r\n                        className=\"comparisonComponent\"\r\n                        label=\"comparisonValue\"\r\n                        type=\"number\"\r\n                        value={getValue('comparisonValue')}\r\n                        onChange={(e) => setPathValue('comparisonValue', e.target.value)}\r\n                    />\r\n                ) : (\r\n                    <TextField\r\n                        disabled={true}\r\n                        className=\"comparisonComponent\"\r\n                        label=\"comparisonValue\"\r\n                        type=\"number\"\r\n                        value={defaultComparisonValue}\r\n                        onChange={() => {}}\r\n                    />\r\n                )}\r\n                <FormGroup className={'checkboxOnRight'}>\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={isFunc} onChange={(e) => handleSetIsFunc(e.target.checked)} />}\r\n                        label=\"as Function\"\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={currentRules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleLength;\r\n","export const options = ['Asia', 'Europe', 'North America', 'South America', 'Africa', 'Australia', 'Antarctica'];\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { ruleOptions } from '../../constants/Constants';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { options } from '../../constants/Data';\r\n\r\nconst defaultComparisonValue = 3;\r\nconst listSizeRule = { rule: 'listSize' };\r\nlistSizeRule[ruleOptions[0]] = defaultComparisonValue;\r\nconst rules = [{ path: 'val', ruleSet: ['required', listSizeRule], dependantPaths: ['comparisonValue'] }];\r\nconst initialFormData = {\r\n    val: [...options].slice(0, 2),\r\n    ruleOption: ruleOptions[0],\r\n    comparisonValue: defaultComparisonValue,\r\n};\r\n\r\nconst RuleListSize = () => {\r\n    const { isValid, setPathValue, setRules, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [ruleOption, setRuleOption] = useState(ruleOptions[0]);\r\n    const [isFunc, setIsFunc] = useState(false);\r\n\r\n    const updateRules = (funcParam, ruleParam) => {\r\n        const newRules = JSON.parse(JSON.stringify(rules));\r\n        const newRuleSet = [...newRules[0].ruleSet];\r\n        const newRule = { rule: 'listSize' };\r\n        if (funcParam) {\r\n            newRule[ruleParam] = (formData) => formData['comparisonValue'];\r\n        } else {\r\n            newRule[ruleParam] = defaultComparisonValue;\r\n        }\r\n        newRuleSet.splice(1, 1, newRule);\r\n        newRules[0].ruleSet = newRuleSet;\r\n        setCurrentRules(newRules);\r\n        setRules(newRules);\r\n    };\r\n\r\n    const handleSetIsFunc = (newValue) => {\r\n        updateRules(newValue, ruleOption);\r\n        setIsFunc(newValue);\r\n    };\r\n\r\n    const handleRuleOptionChange = (newValue) => {\r\n        updateRules(isFunc, newValue);\r\n        setRuleOption(newValue);\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"listSize\" codeUrl=\"components/rules/RuleListSize.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>listSize</b> rule checks the length of an array. <b>{ruleOptions.join(', ')}</b> parameters are used\r\n                to make comparisons with given comparison values.\r\n            </p>\r\n            <div className=\"comparisonDiv\">\r\n                <Autocomplete\r\n                    multiple\r\n                    value={getValue('val')}\r\n                    onChange={(event, newValue) => {\r\n                        setPathValue('val', newValue);\r\n                    }}\r\n                    options={options}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            error={!!getError('val')}\r\n                            helperText={getError('val') || ' '}\r\n                            label=\"equalTo\"\r\n                        />\r\n                    )}\r\n                />\r\n\r\n                <Autocomplete\r\n                    className=\"ruleOptionComponent\"\r\n                    value={ruleOption}\r\n                    onChange={(event, newValue) => {\r\n                        handleRuleOptionChange(newValue);\r\n                    }}\r\n                    options={ruleOptions}\r\n                    disableClearable={true}\r\n                    renderInput={(params) => <TextField {...params} label=\"ruleOption\" />}\r\n                />\r\n                {isFunc ? (\r\n                    <TextField\r\n                        className=\"comparisonComponent\"\r\n                        label=\"comparisonValue\"\r\n                        type=\"number\"\r\n                        value={getValue('comparisonValue')}\r\n                        onChange={(e) => setPathValue('comparisonValue', e.target.value)}\r\n                    />\r\n                ) : (\r\n                    <TextField\r\n                        disabled={true}\r\n                        className=\"comparisonComponent\"\r\n                        label=\"comparisonValue\"\r\n                        type=\"number\"\r\n                        value={defaultComparisonValue}\r\n                        onChange={() => {}}\r\n                    />\r\n                )}\r\n                <FormGroup className={'checkboxOnRight'}>\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={isFunc} onChange={(e) => handleSetIsFunc(e.target.checked)} />}\r\n                        label=\"as Function\"\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={currentRules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleListSize;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { ruleOptions } from '../../constants/Constants';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst today = new Date();\r\nconst defaultComparisonValue = today;\r\nvar yesterday = new Date();\r\nyesterday.setDate(yesterday.getDate() - 1);\r\nconst dateRule = { rule: 'date' };\r\ndateRule[ruleOptions[0]] = defaultComparisonValue;\r\nconst rules = [{ path: 'val', ruleSet: ['required', dateRule], dependantPaths: ['comparisonValue'] }];\r\nconst initialFormData = {\r\n    val: yesterday,\r\n    ruleOption: ruleOptions[0],\r\n    comparisonValue: defaultComparisonValue,\r\n};\r\n\r\nconst RuleDate = () => {\r\n    const { isValid, setPathValue, setRules, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [ruleOption, setRuleOption] = useState(ruleOptions[0]);\r\n    const [isFunc, setIsFunc] = useState(false);\r\n    const [withTime, setWithTime] = useState(false);\r\n\r\n    const updateRules = (funcParam, ruleParam, withTimeParam) => {\r\n        const newRules = JSON.parse(JSON.stringify(rules));\r\n        const newRuleSet = [...newRules[0].ruleSet];\r\n        const newRule = { rule: 'date' };\r\n        if (ruleParam) {\r\n            if (funcParam) {\r\n                newRule[ruleParam] = (formData) => formData['comparisonValue'];\r\n            } else {\r\n                newRule[ruleParam] = defaultComparisonValue;\r\n            }\r\n        }\r\n        if (withTimeParam) {\r\n            newRule['withTime'] = true;\r\n        }\r\n        newRuleSet.splice(1, 1, newRule);\r\n        newRules[0].ruleSet = newRuleSet;\r\n        setCurrentRules(newRules);\r\n        setRules(newRules);\r\n    };\r\n\r\n    const handleSetIsFunc = (newValue) => {\r\n        updateRules(newValue, ruleOption, withTime);\r\n        setIsFunc(newValue);\r\n    };\r\n\r\n    const handleRuleOptionChange = (newValue) => {\r\n        updateRules(isFunc, newValue, withTime);\r\n        setRuleOption(newValue);\r\n    };\r\n\r\n    const handleWithTimeChange = (newValue) => {\r\n        updateRules(isFunc, ruleOption, newValue);\r\n        setWithTime(newValue);\r\n    };\r\n\r\n    const PickerComponent = withTime ? DateTimePicker : DesktopDatePicker;\r\n    const pickerFormat = withTime ? null : 'MM/dd/yyyy';\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"date\" codeUrl=\"components/rules/RuleDate.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>date</b> rule checks if the given value is a valid date. If <b>withTime</b> parameter is set, it\r\n                compares hours and minutes, too. <b>{ruleOptions.join(', ')}</b> parameters are used to make comparisons\r\n                with given comparison values.\r\n            </p>\r\n            <div className=\"comparisonDiv\">\r\n                <PickerComponent\r\n                    label=\"val\"\r\n                    inputFormat={pickerFormat}\r\n                    value={getValue('val')}\r\n                    onChange={(val) => setPathValue('val', val)}\r\n                    renderInput={(params) => (\r\n                        <TextField {...params} error={!!getError('val')} helperText={getError('val') || ' '} />\r\n                    )}\r\n                />\r\n\r\n                <Autocomplete\r\n                    className=\"ruleOptionComponent\"\r\n                    value={ruleOption}\r\n                    onChange={(event, newValue) => {\r\n                        handleRuleOptionChange(newValue);\r\n                    }}\r\n                    options={ruleOptions}\r\n                    disableClearable={false}\r\n                    renderInput={(params) => <TextField {...params} label=\"ruleOption\" />}\r\n                />\r\n                {isFunc ? (\r\n                    <PickerComponent\r\n                        label=\"comparisonValue\"\r\n                        inputFormat={pickerFormat}\r\n                        value={getValue('comparisonValue')}\r\n                        onChange={(val) => setPathValue('comparisonValue', val)}\r\n                        renderInput={(params) => <TextField className=\"comparisonDateComponent\" {...params} />}\r\n                    />\r\n                ) : (\r\n                    <PickerComponent\r\n                        disabled={true}\r\n                        label=\"comparisonValue\"\r\n                        inputFormat={pickerFormat}\r\n                        value={today}\r\n                        onChange={() => {}}\r\n                        renderInput={(params) => <TextField className=\"comparisonDateComponent\" {...params} />}\r\n                    />\r\n                )}\r\n                <FormGroup className={'checkboxOnRight'}>\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={isFunc} onChange={(e) => handleSetIsFunc(e.target.checked)} />}\r\n                        label=\"as Function\"\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n            <div className=\"comparisonDiv\">\r\n                <FormGroup className={'checkboxOnRight'}>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox checked={withTime} onChange={(e) => handleWithTimeChange(e.target.checked)} />\r\n                        }\r\n                        label=\"withTime\"\r\n                    />\r\n                </FormGroup>\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={currentRules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleDate;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val: 'aa',\r\n};\r\n\r\nconst rules = [{ path: 'val', ruleSet: [{ rule: 'required' }, { rule: 'email' }] }];\r\n\r\nconst RuleEmail = () => {\r\n    const { isValid, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"email\" codeUrl=\"components/rules/RuleEmail.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>email</b> rule checks if the given value is a valid email.\r\n            </p>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val')}\r\n                    helperText={getError('val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={getValue('val') || ''}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleEmail;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val: 'aa',\r\n};\r\n\r\nconst rules = [{ path: 'val', ruleSet: [{ rule: 'required' }, { rule: 'url' }] }];\r\n\r\nconst RuleUrl = () => {\r\n    const { isValid, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"url\" codeUrl=\"components/rules/RuleUrl.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>url</b> rule checks if the given value is a valid url.\r\n            </p>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val')}\r\n                    helperText={getError('val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={getValue('val') || ''}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleUrl;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val: 'aa',\r\n};\r\n\r\nconst rules = [{ path: 'val', ruleSet: [{ rule: 'required' }, { rule: 'iban' }] }];\r\n\r\nconst RuleIban = () => {\r\n    const { isValid, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"iban\" codeUrl=\"components/rules/RuleIban.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>iban</b> rule checks if the given value is a valid IBAN.\r\n            </p>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val')}\r\n                    helperText={getError('val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={getValue('val') || ''}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleIban;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val: 'aa',\r\n};\r\n\r\nconst customRule = (ruleParams) => {\r\n    const { value } = ruleParams;\r\n    if (value && (!value.includes('g') || value.length < 5)) {\r\n        return 'this field should include letter `g` and its length should be greater than 5';\r\n    }\r\n    return null;\r\n};\r\n\r\nconst rules = [{ path: 'val', ruleSet: ['required', { rule: customRule }] }];\r\n\r\nconst RuleCustomOnHook = () => {\r\n    const { isValid, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"customly defined on hook\" codeUrl=\"components/rules/RuleCustomOnHook.js\">\r\n            <p className=\"infoParagraph\">Custom rules can be defined as a function and given as a rule definition.</p>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val')}\r\n                    helperText={getError('val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={getValue('val') || ''}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleCustomOnHook;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport { Link } from 'react-router-dom';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val: 'b',\r\n};\r\n\r\nconst rules = [{ path: 'val', ruleSet: [{ rule: 'required' }, { rule: 'myCustomRule' }] }];\r\n\r\nconst RuleCustomOnProvider = () => {\r\n    const { isValid, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"custom on provider\"\r\n            codeUrl={['components/rules/RuleCustomOnProvider.js', 'components/Main.js']}\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                Custom rules can be defined as a function and passed to{' '}\r\n                <Link className=\"inner-link\" to=\"/api/react-validatable-form-provider\">\r\n                    ReactValidatableFormProvider\r\n                </Link>{' '}\r\n                with a unique name and can be used anywhere in the app.\r\n            </p>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val')}\r\n                    helperText={getError('val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={getValue('val') || ''}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleCustomOnProvider;\r\n","import './FormSubmitResult.css';\r\n\r\nconst stringifyWithFunction = (obj) => {\r\n    var placeholder = '____PLACEHOLDER____';\r\n    var fns = [];\r\n    var json = JSON.stringify(\r\n        obj,\r\n        function (key, value) {\r\n            if (typeof value === 'function') {\r\n                fns.push(value);\r\n                return placeholder;\r\n            }\r\n            return value;\r\n        },\r\n        2\r\n    );\r\n    json = json.replace(new RegExp('\"' + placeholder + '\"', 'g'), function () {\r\n        return fns.shift();\r\n    });\r\n    return json;\r\n};\r\n\r\nconst FormSubmitResult = ({ formData }) => {\r\n    return (\r\n        <div>\r\n            <span className={'formDataString'}>{stringifyWithFunction(formData)}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormSubmitResult;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Button from '@mui/material/Button';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\n\r\nconst initialFormData = {\r\n    textVal1: '',\r\n    textVal2: '',\r\n    val3: [],\r\n    textVal4: '',\r\n    checkVal: false,\r\n};\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 7 }] },\r\n    { path: 'val3', ruleSet: [{ rule: 'required' }, { rule: 'listSize', equalTo: 2 }] },\r\n    { path: 'textVal4', ruleSet: [{ rule: 'required' }, { rule: 'url' }] },\r\n];\r\n\r\nconst AdvancedHideBeforeSubmit = () => {\r\n    const { isValid, formData, setPathValue, setFormIsSubmitted, resetForm, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n        hideBeforeSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"hideBeforeSubmit\" codeUrl=\"components/advanced/AdvancedHideBeforeSubmit.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>hideBeforeSubmit</b> parameter is used to hide validation errors before <b>setFormIsSubmitted()</b>{' '}\r\n                function is called. Later, validation errors can also be hidden by calling <b>resetForm()</b> function.\r\n            </p>\r\n            <div>\r\n                <div className={'formField'}>\r\n                    <TextField\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"requiredField\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1')}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                    />\r\n                    <TextField\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"requiredAndLengthField\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2')}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                    />\r\n                    <Autocomplete\r\n                        multiple\r\n                        value={getValue('val3')}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('val3', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('val3')}\r\n                                helperText={getError('val3') || ' '}\r\n                                label=\"requiredAndListSize\"\r\n                            />\r\n                        )}\r\n                    />\r\n                    <TextField\r\n                        error={!!getError('textVal4')}\r\n                        helperText={getError('textVal4') || ' '}\r\n                        label=\"requiredAndUrl\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal4')}\r\n                        onChange={(e) => setPathValue('textVal4', e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={handleFormSubmit}>\r\n                        Submit Form\r\n                    </Button>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={resetForm}>\r\n                        Reset Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default AdvancedHideBeforeSubmit;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Button from '@mui/material/Button';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\n\r\nconst initialFormData = {};\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 7 }] },\r\n    { path: 'val3', ruleSet: [{ rule: 'required' }, { rule: 'listSize', equalTo: 2 }] },\r\n    { path: 'textVal4', ruleSet: [{ rule: 'required' }, { rule: 'url' }] },\r\n];\r\n\r\nconst AdvancedShowAfterBlur = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        resetForm,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"showAfterBlur\" codeUrl=\"components/advanced/AdvancedShowAfterBlur.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>showAfterBlur</b> parameter is used to show validation error of a path after{' '}\r\n                <b>setPathIsBlurred(path)</b> function is called. Later, validation errors can also be hidden by calling{' '}\r\n                <b>resetForm()</b> function.\r\n            </p>\r\n            <div>\r\n                <div className={'formField'}>\r\n                    <TextField\r\n                        id={'textVal1'}\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"requiredField\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                    />\r\n                    <TextField\r\n                        id={'textVal2'}\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"requiredAndLengthField\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                    />\r\n                    <Autocomplete\r\n                        id={'val3'}\r\n                        multiple\r\n                        value={getValue('val3') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('val3', newValue);\r\n                        }}\r\n                        onBlur={() => setPathIsBlurred('val3')}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('val3')}\r\n                                helperText={getError('val3') || ' '}\r\n                                label=\"requiredAndListSize\"\r\n                            />\r\n                        )}\r\n                    />\r\n                    <TextField\r\n                        id={'textVal4'}\r\n                        error={!!getError('textVal4')}\r\n                        helperText={getError('textVal4') || ' '}\r\n                        label=\"requiredAndUrl\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal4') || ''}\r\n                        onChange={(e) => setPathValue('textVal4', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal4')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={handleFormSubmit}>\r\n                        Submit Form\r\n                    </Button>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={resetForm}>\r\n                        Reset Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default AdvancedShowAfterBlur;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Button from '@mui/material/Button';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\n\r\nconst initialFormData = {\r\n    textVal1: '',\r\n    textVal2: '',\r\n    val3: [],\r\n    textVal4: '',\r\n    checkVal: false,\r\n};\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    {\r\n        path: 'textVal2',\r\n        ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 7 }],\r\n    },\r\n    { path: 'val3', ruleSet: [{ rule: 'required' }, { rule: 'listSize', equalTo: 2 }] },\r\n    { path: 'textVal4', ruleSet: [{ rule: 'required' }, { rule: 'url' }] },\r\n];\r\n\r\nconst AdvancedFocusToErrorAfterSubmit = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"focusToErrorAfterSubmit\"\r\n            codeUrl=\"components/advanced/AdvancedFocusToErrorAfterSubmit.js\"\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                <b>focusToErrorAfterSubmit</b> parameter is used to automatically focus to the first element with a\r\n                validation error. In order to find the element on DOM, <b>path</b> value should be equal to the HTML\r\n                element ID. If DOM element ID is different than <b>path</b> value, then the DOM element ID should be\r\n                passed as <b>elementId</b> param to the rule definition.\r\n            </p>\r\n            <div>\r\n                <div className={'formField'}>\r\n                    <TextField\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"requiredField\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1')}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                    <TextField\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"requiredAndLengthField\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2')}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                    <Autocomplete\r\n                        multiple\r\n                        value={getValue('val3')}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('val3', newValue);\r\n                        }}\r\n                        onBlur={() => setPathIsBlurred('val3')}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('val3')}\r\n                                helperText={getError('val3') || ' '}\r\n                                label=\"requiredAndListSize\"\r\n                            />\r\n                        )}\r\n                        id=\"val3\"\r\n                    />\r\n                    <TextField\r\n                        error={!!getError('textVal4')}\r\n                        helperText={getError('textVal4') || ' '}\r\n                        label=\"requiredAndUrl\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal4')}\r\n                        onChange={(e) => setPathValue('textVal4', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal4')}\r\n                        id=\"textVal4\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={handleFormSubmit}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default AdvancedFocusToErrorAfterSubmit;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val1: 'a',\r\n    val2: 'a',\r\n    checkVal: false,\r\n};\r\n\r\nconst customMessageFunc = (errorParams) => {\r\n    if (errorParams.value > errorParams.comparisonValue) {\r\n        return `This field's length should be ${errorParams.comparisonValue}, your input's (${errorParams.value}) is greater than this value`;\r\n    }\r\n    return `This field's length should be ${errorParams.comparisonValue}, your input's (${errorParams.value}) is less than this value`;\r\n};\r\n\r\nconst rules = [\r\n    {\r\n        path: 'val1',\r\n        ruleSet: [\r\n            'required',\r\n            {\r\n                rule: 'length',\r\n                greaterThan: 8,\r\n                customMessage: \"This field's length is ${value}, however it should be greater than ${comparisonValue}\",\r\n            },\r\n        ],\r\n    },\r\n    { path: 'val2', ruleSet: ['required', { rule: 'length', equalTo: 5, customMessage: customMessageFunc }] },\r\n];\r\n\r\nconst CustomMessage = () => {\r\n    const { isValid, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"customMessage\" codeUrl=\"components/customizations/CustomMessage.js\">\r\n            <p className=\"infoParagraph\">\r\n                Validation error message of a rule can be customized by passing <b>customMessage</b> param to the rule.\r\n            </p>\r\n            <div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('val1')}\r\n                        helperText={getError('val1') || ' '}\r\n                        label=\"val1 (customMessage as string)\"\r\n                        type=\"text\"\r\n                        value={getValue('val1')}\r\n                        onChange={(e) => setPathValue('val1', e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('val2')}\r\n                        helperText={getError('val2') || ' '}\r\n                        label=\"val2 (customMessage as function)\"\r\n                        type=\"text\"\r\n                        value={getValue('val2')}\r\n                        onChange={(e) => setPathValue('val2', e.target.value)}\r\n                    />\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default CustomMessage;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport { Link } from 'react-router-dom';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val1: '',\r\n    val2: '',\r\n    checkVal: false,\r\n};\r\n\r\nconst rules = [\r\n    { path: 'val1', ruleSet: ['required', { rule: 'length', greaterThan: 8 }] },\r\n    { path: 'val2', ruleSet: ['required', { rule: 'length', equalTo: 5 }] },\r\n];\r\n\r\nconst CustomTranslations = () => {\r\n    const { isValid, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"translations\"\r\n            codeUrl={['components/customizations/CustomTranslations.js', 'components/Main.js']}\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                Validation error messages of any rules can be customized in app by passing <b>translations</b> param to{' '}\r\n                <Link className=\"inner-link\" to=\"/api/react-validatable-form-provider\">\r\n                    ReactValidatableFormProvider\r\n                </Link>\r\n                .\r\n            </p>\r\n            <div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('val1')}\r\n                        helperText={getError('val1') || ' '}\r\n                        label=\"val1 (requiredAndLengthGreaterThan)\"\r\n                        type=\"text\"\r\n                        value={getValue('val1')}\r\n                        onChange={(e) => setPathValue('val1', e.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('val2')}\r\n                        helperText={getError('val2') || ' '}\r\n                        label=\"val2 (requiredAndLengthEqualTo)\"\r\n                        type=\"text\"\r\n                        value={getValue('val2')}\r\n                        onChange={(e) => setPathValue('val2', e.target.value)}\r\n                    />\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default CustomTranslations;\r\n","import TextField from '@mui/material/TextField';\r\n\r\nconst AdvancedSubComponent = (props) => {\r\n    const { setPathValue, setPathIsBlurred, getValue, getError } = props;\r\n    return (\r\n        <div>\r\n            <div className={'formField'}>\r\n                <TextField\r\n                    error={!!getError('subComponentElement1')}\r\n                    helperText={getError('subComponentElement1') || ' '}\r\n                    label=\"subComponentElement1\"\r\n                    type=\"text\"\r\n                    value={getValue('subComponentElement1') || ''}\r\n                    onChange={(e) => setPathValue('subComponentElement1', e.target.value)}\r\n                    onBlur={() => setPathIsBlurred('subComponentElement1')}\r\n                    id=\"subComponentElement1\"\r\n                />\r\n                <TextField\r\n                    error={!!getError('subComponentElement2')}\r\n                    helperText={getError('subComponentElement2') || ' '}\r\n                    label=\"subComponentElement2\"\r\n                    type=\"text\"\r\n                    value={getValue('subComponentElement2') || ''}\r\n                    onChange={(e) => setPathValue('subComponentElement2', e.target.value)}\r\n                    onBlur={() => setPathIsBlurred('subComponentElement2')}\r\n                    id=\"subComponentElement2\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdvancedSubComponent;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport AdvancedSubComponent from './AdvancedSubComponent';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\n\r\nconst disableSubkey2 = (formData, index) => {\r\n    return formData.disableAllSubkey2Rule || formData.listChild[index].disableSubkey2Rule;\r\n};\r\n\r\nconst rules = [\r\n    { path: 'child1', ruleSet: ['required'] },\r\n    { path: 'child2', ruleSet: ['required'] },\r\n    { path: 'child3.subchild1', ruleSet: ['required'] },\r\n    { path: 'child3.subchild2', ruleSet: ['required'] },\r\n    {\r\n        listPath: 'listChild',\r\n        subRules: [\r\n            {\r\n                path: 'subkey1',\r\n                ruleSet: ['required', { rule: 'length', greaterThan: 3 }],\r\n            },\r\n            {\r\n                path: 'subkey2',\r\n                ruleSet: [\r\n                    {\r\n                        rule: 'required',\r\n                        disableIf: disableSubkey2,\r\n                    },\r\n                    {\r\n                        rule: 'number',\r\n                        greaterThan: 5,\r\n                        disableIf: disableSubkey2,\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n        dependantPaths: ['disableAllSubkey2Rule'],\r\n    },\r\n    {\r\n        path: 'listChild',\r\n        ruleSet: [\r\n            { rule: 'required', customMessage: 'This list should not be empty' },\r\n            { rule: 'listSize', greaterThan: 2 },\r\n        ],\r\n        elementId: 'listErrorFocusElement',\r\n    },\r\n    { path: 'bottomElement1', ruleSet: ['required'] },\r\n    { path: 'bottomElement2', ruleSet: [{ rule: 'length', greaterThan: 3, applyToNulls: true }] },\r\n    { path: 'subComponentElement1', ruleSet: ['required'] },\r\n    { path: 'subComponentElement2', ruleSet: ['required'] },\r\n];\r\n\r\nconst AdvancedValidateComplexForms = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [nextId, setNextId] = useState(1);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    const handleAddElement = () => {\r\n        const newListChild = formData.listChild ? [...formData.listChild] : [];\r\n        newListChild.push({ id: nextId });\r\n        setNextId(nextId + 1);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    const handleDeleteElement = (id) => {\r\n        const newListChild = formData.listChild.filter((el) => el.id !== id);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    let listChildJsx = null;\r\n\r\n    if (formData.listChild && formData.listChild.length > 0) {\r\n        listChildJsx = formData.listChild.map((lc, index) => {\r\n            return (\r\n                <div key={lc.id} className=\"formListItem\">\r\n                    <TextField\r\n                        error={!!getError(`listChild{${index}}.subkey1`)}\r\n                        helperText={getError(`listChild{${index}}.subkey1`) || ' '}\r\n                        label=\"lengthGreaterThan3\"\r\n                        type=\"text\"\r\n                        value={getValue(`listChild[${index}].subkey1`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}].subkey1`, e.target.value)}\r\n                        onBlur={() => setPathIsBlurred(`listChild{${index}}.subkey1`)}\r\n                        id={`listChild{${index}}.subkey1`}\r\n                    />\r\n                    <TextField\r\n                        error={!!getError(`listChild{${index}}.subkey2`)}\r\n                        helperText={getError(`listChild{${index}}.subkey2`) || ' '}\r\n                        label=\"numberGreaterThan5\"\r\n                        type=\"number\"\r\n                        value={getValue(`listChild[${index}].subkey2`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}].subkey2`, e.target.value)}\r\n                        onBlur={() => setPathIsBlurred(`listChild{${index}}.subkey2`)}\r\n                        id={`listChild{${index}}.subkey2`}\r\n                    />\r\n                    disable\r\n                    {\r\n                        <Checkbox\r\n                            checked={getValue(`listChild[${index}].disableSubkey2Rule`) || false}\r\n                            onChange={(e) => setPathValue(`listChild[${index}].disableSubkey2Rule`, e.target.checked)}\r\n                        />\r\n                    }\r\n                    <Button className=\"myDeleteButton\" variant=\"contained\" onClick={() => handleDeleteElement(lc.id)}>\r\n                        <span className=\"myShinkableButtonSpan\">Delete Element</span>\r\n                        <DeleteIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"Validate Complex Forms\"\r\n            codeUrl={[\r\n                'components/advanced/AdvancedValidateComplexForms.js',\r\n                'components/advanced/AdvancedSubComponent.js',\r\n            ]}\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                <b>react-validatable-form</b> can handle validation of complex forms. The form can have multiple paths,\r\n                listPaths and subcomponents.\r\n            </p>\r\n            <div>\r\n                <div className={'formField'}>\r\n                    <TextField\r\n                        error={!!getError('child1')}\r\n                        helperText={getError('child1') || ' '}\r\n                        label=\"child1\"\r\n                        type=\"text\"\r\n                        value={getValue('child1') || ''}\r\n                        onChange={(e) => setPathValue('child1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('child1')}\r\n                        id=\"child1\"\r\n                    />\r\n                    <TextField\r\n                        error={!!getError('child2')}\r\n                        helperText={getError('child2') || ' '}\r\n                        label=\"child2\"\r\n                        type=\"text\"\r\n                        value={getValue('child2') || ''}\r\n                        onChange={(e) => setPathValue('child2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('child2')}\r\n                        id=\"child2\"\r\n                    />\r\n                    <TextField\r\n                        error={!!getError('child3.subchild1')}\r\n                        helperText={getError('child3.subchild1') || ' '}\r\n                        label=\"child3.subchild1\"\r\n                        type=\"text\"\r\n                        value={getValue('child3.subchild1') || ''}\r\n                        onChange={(e) => setPathValue('child3.subchild1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('child3.subchild1')}\r\n                        id=\"child3.subchild1\"\r\n                    />\r\n                    <TextField\r\n                        error={!!getError('child3.subchild2')}\r\n                        helperText={getError('child3.subchild2') || ' '}\r\n                        label=\"child3.subchild2\"\r\n                        type=\"text\"\r\n                        value={getValue('child3.subchild2') || ''}\r\n                        onChange={(e) => setPathValue('child3.subchild2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('child3.subchild2')}\r\n                        id=\"child3.subchild2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        className=\"myAddButton\"\r\n                        variant=\"contained\"\r\n                        onClick={handleAddElement}\r\n                        id={'listErrorFocusElement'}\r\n                    >\r\n                        <span className=\"myShinkableButtonSpan\">Add New Element</span>\r\n                        <AddIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                    <span style={{ marginLeft: 10 }}>disable all subkey2 rows</span>\r\n                    {\r\n                        <Checkbox\r\n                            checked={getValue(`disableAllSubkey2Rule`) || false}\r\n                            onChange={(e) => setPathValue(`disableAllSubkey2Rule`, e.target.checked)}\r\n                        />\r\n                    }\r\n                </div>\r\n                <div className={'complexFormListField'}>{listChildJsx}</div>\r\n                <div className={'errorInfoText'}>{getError('listChild')}</div>\r\n                <div className={'formField'}>\r\n                    <TextField\r\n                        error={!!getError('bottomElement1')}\r\n                        helperText={getError('bottomElement1') || ' '}\r\n                        label=\"bottomElement1\"\r\n                        type=\"text\"\r\n                        value={getValue('bottomElement1') || ''}\r\n                        onChange={(e) => setPathValue('bottomElement1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('bottomElement1')}\r\n                        id=\"bottomElement1\"\r\n                    />\r\n                    <TextField\r\n                        error={!!getError('bottomElement2')}\r\n                        helperText={getError('bottomElement2') || ' '}\r\n                        label=\"bottomElement2\"\r\n                        type=\"text\"\r\n                        value={getValue('bottomElement2') || ''}\r\n                        onChange={(e) => setPathValue('bottomElement2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('bottomElement2')}\r\n                        id=\"bottomElement2\"\r\n                    />\r\n                </div>\r\n                <AdvancedSubComponent\r\n                    getValue={getValue}\r\n                    getError={getError}\r\n                    formData={formData}\r\n                    setPathValue={setPathValue}\r\n                    setPathIsBlurred={setPathIsBlurred}\r\n                />\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={handleFormSubmit}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default AdvancedValidateComplexForms;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport { Link } from 'react-router-dom';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\n\r\nconst rules = [\r\n    { path: 'listChild', ruleSet: ['required', { rule: 'listSize', greaterThan: 2 }] },\r\n    {\r\n        listPath: 'listChild',\r\n        ruleSet: ['required', { rule: 'length', greaterThan: 3 }],\r\n    },\r\n];\r\n\r\nconst AdvancedValidateLists = () => {\r\n    const { isValid, formData, setPathValue, setFormIsSubmitted, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData: { listChild: [''] },\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    let listChildJsx = null;\r\n\r\n    const handleAddElement = () => {\r\n        const newListChild = [...formData.listChild];\r\n        newListChild.push('');\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    const handleDeleteElement = (index) => {\r\n        const newListChild = formData.listChild.filter((el, ind) => ind !== index);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    if (formData.listChild && formData.listChild.length > 0) {\r\n        listChildJsx = formData.listChild.map((lc, index) => {\r\n            return (\r\n                <div key={index}>\r\n                    <TextField\r\n                        error={!!getError(`listChild{${index}}`)}\r\n                        helperText={getError(`listChild{${index}}`) || ' '}\r\n                        label=\"lengthGreaterThan3\"\r\n                        type=\"text\"\r\n                        value={getValue(`listChild[${index}]`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}]`, e.target.value)}\r\n                    />\r\n                    <Button className=\"myDeleteButton\" variant=\"contained\" onClick={() => handleDeleteElement(index)}>\r\n                        <span className=\"myShinkableButtonSpan\">Delete Element</span>\r\n                        <DeleteIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"Validate Lists\" codeUrl=\"components/advanced/AdvancedValidateLists.js\">\r\n            <p className=\"infoParagraph\">\r\n                An array of values can be validated using{' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    listPath\r\n                </Link>{' '}\r\n                key.\r\n            </p>\r\n            <div>\r\n                <div>\r\n                    <Button className=\"myAddButton\" variant=\"contained\" onClick={() => handleAddElement()}>\r\n                        <span className=\"myShinkableButtonSpan\">Add New Element</span>\r\n                        <AddIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n                <div className={'formListField'}>{listChildJsx}</div>\r\n                <div className={'errorInfoText'}>{getError('listChild')}</div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default AdvancedValidateLists;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {};\r\n\r\nconst rules = [\r\n    {\r\n        path: 'val1',\r\n        ruleSet: [\r\n            {\r\n                rule: 'required',\r\n                disableIf: (formData) => formData['disableVal1Rule'],\r\n            },\r\n        ],\r\n        dependantPaths: ['disableVal1Rule'],\r\n    },\r\n    {\r\n        path: 'val2',\r\n        ruleSet: [\r\n            {\r\n                rule: 'required',\r\n                enableIf: (formData) => formData['enableVal2Rule'],\r\n            },\r\n        ],\r\n        dependantPaths: ['enableVal2Rule'],\r\n    },\r\n];\r\n\r\nconst CustomConditionalRules = () => {\r\n    const { isValid, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"disableIf & enableIf\"\r\n            codeUrl={'components/customizations/CustomConditionalRules.js'}\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                Any validation rule can be disabled if the defined <b>disableIf</b> function returns true. Any\r\n                validation rule can only be enabled if the defined <b>enableIf</b> function returns true.\r\n            </p>\r\n            <div>\r\n                <div className={'textAndCheckboxDiv'}>\r\n                    <TextField\r\n                        error={!!getError('val1')}\r\n                        helperText={getError('val1') || ' '}\r\n                        label=\"val1\"\r\n                        type=\"text\"\r\n                        value={getValue('val1') || ''}\r\n                        onChange={(e) => setPathValue('val1', e.target.value)}\r\n                    />\r\n                    <FormGroup className={'checkboxOnRight'}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={getValue('disableVal1Rule') || false}\r\n                                    onChange={(e) => setPathValue('disableVal1Rule', e.target.checked)}\r\n                                />\r\n                            }\r\n                            label=\"Disable val1 Rule\"\r\n                        />\r\n                    </FormGroup>\r\n                </div>\r\n                <div className={'textAndCheckboxDiv'}>\r\n                    <TextField\r\n                        error={!!getError('val2')}\r\n                        helperText={getError('val2') || ' '}\r\n                        label=\"val2\"\r\n                        type=\"text\"\r\n                        value={getValue('val2') || ''}\r\n                        onChange={(e) => setPathValue('val2', e.target.value)}\r\n                    />\r\n                    <FormGroup className={'checkboxOnRight'}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={getValue('enableVal2Rule') || false}\r\n                                    onChange={(e) => setPathValue('enableVal2Rule', e.target.checked)}\r\n                                />\r\n                            }\r\n                            label=\"Enable val2 Rule\"\r\n                        />\r\n                    </FormGroup>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default CustomConditionalRules;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst initialFormData = {\r\n    val: 'ab',\r\n    val2: 'a1',\r\n};\r\n\r\nconst rules = [\r\n    { path: 'val', ruleSet: [{ rule: 'required' }, { rule: 'regex', regex: /ab+c/ }] },\r\n    { path: 'val2', ruleSet: [{ rule: 'required' }, { rule: 'regex', regex: /\\D\\d\\D/ }] },\r\n];\r\n\r\nconst RuleRegex = () => {\r\n    const { isValid, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"regex\" codeUrl=\"components/rules/RuleRegex.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>regex</b> rule checks if the given value is a valid string according to given{' '}\r\n                <a\r\n                    className=\"outsideUrlSpan\"\r\n                    href={'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions'}\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    regex\r\n                </a>\r\n                .\r\n            </p>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val')}\r\n                    helperText={getError('val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={getValue('val') || ''}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n                <span className=\"regexInfo\">regex: /ab+c/</span>\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val2')}\r\n                    helperText={getError('val2') || ' '}\r\n                    label=\"val2\"\r\n                    type=\"text\"\r\n                    value={getValue('val2') || ''}\r\n                    onChange={(e) => setPathValue('val2', e.target.value)}\r\n                />\r\n                <span className=\"regexInfo\">regex: /\\D\\d\\D/</span>\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleRegex;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\n\r\nconst rules = [\r\n    {\r\n        listPath: 'listChild',\r\n        ruleSet: ['required', { rule: 'length', greaterThan: 3 }],\r\n    },\r\n    {\r\n        path: 'listChild',\r\n        ruleSet: ['required', { rule: 'listSize', greaterThan: 2 }],\r\n        elementId: 'listErrorFocusElement',\r\n    },\r\n];\r\n\r\nconst AdvancedFocusToErrorOnListAfterSubmit = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        initialFormData: { listChild: [''] },\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    let listChildJsx = null;\r\n\r\n    const handleAddElement = () => {\r\n        const newListChild = [...formData.listChild];\r\n        newListChild.push('');\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    const handleDeleteElement = (index) => {\r\n        const newListChild = formData.listChild.filter((el, ind) => ind !== index);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    if (formData.listChild && formData.listChild.length > 0) {\r\n        listChildJsx = formData.listChild.map((lc, index) => {\r\n            return (\r\n                <div key={index}>\r\n                    <TextField\r\n                        error={!!getError(`listChild{${index}}`)}\r\n                        helperText={getError(`listChild{${index}}`) || ' '}\r\n                        label=\"lengthGreaterThan3\"\r\n                        type=\"text\"\r\n                        value={getValue(`listChild[${index}]`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}]`, e.target.value)}\r\n                        onBlur={() => setPathIsBlurred(`listChild{${index}}`)}\r\n                        id={`listChild{${index}}`}\r\n                    />\r\n                    <Button className=\"myDeleteButton\" variant=\"contained\" onClick={() => handleDeleteElement(index)}>\r\n                        <span className=\"myShinkableButtonSpan\">Delete Element</span>\r\n                        <DeleteIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"focusToErrorAfterSubmit on Lists\"\r\n            codeUrl=\"components/advanced/AdvancedFocusToErrorOnListAfterSubmit.js\"\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                <b>focusToErrorAfterSubmit</b> parameter is used to automatically focus to the first element of list\r\n                with validation errors. In order to find the element on DOM, <b>listPath</b> value and index of the list\r\n                should be equal to the HTML element ID in a format <b>{'listPath{index}'}</b>. If DOM list element ID\r\n                prefix is different than <b>listPath</b> value, then the DOM element ID prefix should be passed as{' '}\r\n                <b>listElementId</b> param to the rule definition.\r\n            </p>\r\n            <div>\r\n                <div>\r\n                    <Button\r\n                        className=\"myAddButton\"\r\n                        variant=\"contained\"\r\n                        onClick={() => handleAddElement()}\r\n                        id={'listErrorFocusElement'}\r\n                    >\r\n                        <span className=\"myShinkableButtonSpan\">Add New Element</span>\r\n                        <AddIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n                <div className={'formListField'}>{listChildJsx}</div>\r\n                <div className={'errorInfoText'}>{getError('listChild')}</div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={handleFormSubmit}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default AdvancedFocusToErrorOnListAfterSubmit;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport { Link } from 'react-router-dom';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\n\r\nconst disableSubkey2 = (formData, index) => {\r\n    return formData.disableAllSubkey2Rule || formData.listChild[index].disableSubkey2Rule;\r\n};\r\n\r\nconst rules = [\r\n    {\r\n        listPath: 'listChild',\r\n        subRules: [\r\n            {\r\n                path: 'subkey1',\r\n                ruleSet: ['required', { rule: 'length', greaterThan: 3 }],\r\n            },\r\n            {\r\n                path: 'subkey2',\r\n                ruleSet: [\r\n                    {\r\n                        rule: 'required',\r\n                        disableIf: disableSubkey2,\r\n                    },\r\n                    {\r\n                        rule: 'number',\r\n                        greaterThan: 5,\r\n                        disableIf: disableSubkey2,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                path: 'subkey3',\r\n                ruleSet: ['required'],\r\n                elementId: 'subkey3ElementId',\r\n            },\r\n        ],\r\n        dependantPaths: ['disableAllSubkey2Rule'],\r\n    },\r\n    {\r\n        path: 'listChild',\r\n        ruleSet: ['required', { rule: 'listSize', greaterThan: 2 }],\r\n        elementId: 'listErrorFocusElement',\r\n    },\r\n];\r\n\r\nconst AdvancedValidateListOfObjects = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        initialFormData: { listChild: [{ id: 1 }] },\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [nextId, setNextId] = useState(2);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    let listChildJsx = null;\r\n\r\n    const handleAddElement = () => {\r\n        const newListChild = [...formData.listChild];\r\n        newListChild.push({ id: nextId });\r\n        setNextId(nextId + 1);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    const handleDeleteElement = (id) => {\r\n        const newListChild = formData.listChild.filter((el) => el.id !== id);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    if (formData.listChild && formData.listChild.length > 0) {\r\n        listChildJsx = formData.listChild.map((lc, index) => {\r\n            return (\r\n                <div key={lc.id} className=\"formListItem\">\r\n                    <TextField\r\n                        style={{ width: 200 }}\r\n                        error={!!getError(`listChild{${index}}.subkey1`)}\r\n                        helperText={getError(`listChild{${index}}.subkey1`) || ' '}\r\n                        label=\"lengthGreaterThan3\"\r\n                        type=\"text\"\r\n                        value={getValue(`listChild[${index}].subkey1`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}].subkey1`, e.target.value)}\r\n                        onBlur={() => setPathIsBlurred(`listChild{${index}}.subkey1`)}\r\n                        id={`listChild{${index}}.subkey1`}\r\n                    />\r\n                    <TextField\r\n                        style={{ width: 200 }}\r\n                        error={!!getError(`listChild{${index}}.subkey2`)}\r\n                        helperText={getError(`listChild{${index}}.subkey2`) || ' '}\r\n                        label=\"numberGreaterThan5\"\r\n                        type=\"number\"\r\n                        value={getValue(`listChild[${index}].subkey2`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}].subkey2`, e.target.value)}\r\n                        onBlur={() => setPathIsBlurred(`listChild{${index}}.subkey2`)}\r\n                        id={`listChild{${index}}.subkey2`}\r\n                    />\r\n                    disable\r\n                    {\r\n                        <Checkbox\r\n                            checked={getValue(`listChild[${index}].disableSubkey2Rule`) || false}\r\n                            onChange={(e) => setPathValue(`listChild[${index}].disableSubkey2Rule`, e.target.checked)}\r\n                        />\r\n                    }\r\n                    <TextField\r\n                        style={{ width: 200 }}\r\n                        error={!!getError(`listChild{${index}}.subkey3`)}\r\n                        helperText={getError(`listChild{${index}}.subkey3`) || ' '}\r\n                        label=\"required\"\r\n                        type=\"text\"\r\n                        value={getValue(`listChild[${index}].subkey3`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}].subkey3`, e.target.value)}\r\n                        onBlur={() => setPathIsBlurred(`listChild{${index}}.subkey3`)}\r\n                        id={`listChild{${index}}.subkey3ElementId`}\r\n                    />\r\n                    <Button className=\"myDeleteButton\" variant=\"contained\" onClick={() => handleDeleteElement(lc.id)}>\r\n                        <span className=\"myShinkableButtonSpan\">Delete Element</span>\r\n                        <DeleteIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"Validate List of Objects\"\r\n            codeUrl=\"components/advanced/AdvancedValidateListOfObjects.js\"\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                An array of objects with more than one subkeys can be validated using{' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    listPath\r\n                </Link>{' '}\r\n                and each subkey can have different rules which should be defined in <b>subRules</b> key.\r\n            </p>\r\n            <div>\r\n                <div>\r\n                    <Button\r\n                        className=\"myAddButton\"\r\n                        variant=\"contained\"\r\n                        onClick={() => handleAddElement()}\r\n                        id={'listErrorFocusElement'}\r\n                    >\r\n                        <span className=\"myShinkableButtonSpan\">Add New Element</span>\r\n                        <AddIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                    <span style={{ marginLeft: 10 }}>disable all subkey2 rows</span>\r\n                    {\r\n                        <Checkbox\r\n                            checked={getValue(`disableAllSubkey2Rule`) || false}\r\n                            onChange={(e) => setPathValue(`disableAllSubkey2Rule`, e.target.checked)}\r\n                        />\r\n                    }\r\n                </div>\r\n                <div className={'formListField'}>{listChildJsx}</div>\r\n                <div className={'errorInfoText'}>{getError('listChild')}</div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={handleFormSubmit}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default AdvancedValidateListOfObjects;\r\n","import Button from '@mui/material/Button';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport './Installation.css';\r\nimport { useState } from 'react';\r\n\r\nconst npmCommandHeader = '// with npm';\r\nconst npmCommand = 'npm install react-validatable-form';\r\nconst yarnCommandHeader = '// with yarn';\r\nconst yarnCommand = 'yarn add react-validatable-form';\r\n\r\nconst Installation = () => {\r\n    const [npmCopied, setNpmCopied] = useState(false);\r\n    const [yarnCopied, setYarnCopied] = useState(false);\r\n\r\n    const handleNpmCopy = () => {\r\n        setYarnCopied(false);\r\n        setNpmCopied(true);\r\n        navigator.clipboard.writeText(npmCommand);\r\n        setTimeout(() => {\r\n            setNpmCopied(false);\r\n        }, 1000);\r\n    };\r\n\r\n    const handleYarnCopy = () => {\r\n        setNpmCopied(false);\r\n        setYarnCopied(true);\r\n        navigator.clipboard.writeText(yarnCommand);\r\n        setTimeout(() => {\r\n            setYarnCopied(false);\r\n        }, 1000);\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"Installation\">\r\n            <p className=\"infoParagraph\">\r\n                <a\r\n                    className=\"outsideUrlSpan\"\r\n                    href={'https://www.npmjs.com/package/react-validatable-form'}\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    react-validatable-form\r\n                </a>{' '}\r\n                is a{' '}\r\n                <a\r\n                    className=\"outsideUrlSpan\"\r\n                    href={'https://reactjs.org/docs/hooks-intro.html'}\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    React hook\r\n                </a>{' '}\r\n                that is used to create dynamic client side validations on React forms.\r\n            </p>\r\n            <div className=\"outsideUrlSpan\">\r\n                <a href={'https://www.npmjs.com/package/react-validatable-form'} target=\"_blank\" rel=\"noreferrer\">\r\n                    View on npmjs\r\n                </a>\r\n            </div>\r\n\r\n            <div className=\"outsideUrlSpan\">\r\n                <a href={'https://github.com/obss/react-validatable-form'} target=\"_blank\" rel=\"noreferrer\">\r\n                    View on GitHub\r\n                </a>\r\n            </div>\r\n\r\n            <div className=\"installButtonsDiv\">\r\n                <Tooltip open={npmCopied} placement=\"top\" title=\"copied!\">\r\n                    <Button variant=\"outlined\" onClick={handleNpmCopy}>\r\n                        <div className=\"commandBox\">\r\n                            <p>{npmCommandHeader}</p>\r\n                            <p className=\"commandText\">{npmCommand}</p>\r\n                        </div>\r\n                        <span className=\"installButtonIcon\">\r\n                            {npmCopied ? <DoneOutlineIcon /> : <ContentCopyIcon />}\r\n                        </span>\r\n                    </Button>\r\n                </Tooltip>\r\n                <Tooltip open={yarnCopied} placement=\"bottom\" title=\"copied!\">\r\n                    <Button variant=\"outlined\" onClick={handleYarnCopy}>\r\n                        <div className=\"commandBox\">\r\n                            <p>{yarnCommandHeader}</p>\r\n                            <p className=\"commandText\">{yarnCommand}</p>\r\n                        </div>\r\n                        <span className=\"installButtonIcon\">\r\n                            {yarnCopied ? <DoneOutlineIcon /> : <ContentCopyIcon />}\r\n                        </span>\r\n                    </Button>\r\n                </Tooltip>\r\n            </div>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default Installation;\r\n","import { Link } from 'react-router-dom';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport './Usage.css';\r\n\r\nconst Usage = (props) => {\r\n    const providerCode = `import { ReactValidatableFormProvider } from 'react-validatable-form';\r\n\r\n    //....\r\n    return <ReactValidatableFormProvider>\r\n                <App />\r\n        </ReactValidatableFormProvider>;\r\n    `;\r\n\r\n    const hookCode = `import { useValidatableForm } from 'react-validatable-form';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n//....\r\n    \r\nconst initialFormData = {};\r\nconst rules = [{ path: 'val', ruleSet: [{ rule: 'required' }] }];\r\n\r\n//....\r\n\r\n    const { isValid, formData, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return <TextField\r\n        error={!!getError('val')}\r\n        helperText={getError('val') || ' '}\r\n        label=\"val\"\r\n        type=\"text\"\r\n        value={getValue('val') || ''}\r\n        onChange={(e) => setPathValue('val', e.target.value)}\r\n    />;\r\n    `;\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"Usage\">\r\n            <div className=\"infoParagraph\">\r\n                <b>react-validatable-form</b> is based on{' '}\r\n                <a\r\n                    className=\"outsideUrlSpan\"\r\n                    href={'https://reactjs.org/docs/context.html'}\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    Context\r\n                </a>\r\n                . <b>useValidatableForm</b> hook should be used inside <b>ReactValidatableFormProvider</b>. Wrap your\r\n                App inside <b>ReactValidatableFormProvider</b> and pass the app-scoped{' '}\r\n                <span className=\"inner-link\" onClick={props.openSettingsDialog}>\r\n                    props\r\n                </span>\r\n                . Example usage of <b>ReactValidatableFormProvider</b>:{' '}\r\n                <Link className=\"inner-link\" to=\"/api/react-validatable-form-provider\">\r\n                    See API\r\n                </Link>\r\n            </div>\r\n            <div className=\"codeBox\">\r\n                <span>{providerCode}</span>\r\n            </div>\r\n            <div className=\"infoParagraph\">\r\n                <b>useValidatableForm</b> is a React hook that runs validations according to given form data and rules\r\n                and returns validation results. <b>isValid</b> a boolean value that returns true if form does not\r\n                contain any validation errors. validationError is a JSON object that keeps the validation errors on the\r\n                form according to the{' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    path\r\n                </Link>{' '}\r\n                keys. Example usage of <b>useValidatableForm</b> hook:{' '}\r\n                <Link className=\"inner-link\" to=\"/api/use-validatable-form\">\r\n                    See API\r\n                </Link>\r\n            </div>\r\n            <div className=\"codeBox\">\r\n                <span>{hookCode}</span>\r\n            </div>\r\n            <iframe\r\n                src=\"https://codesandbox.io/embed/vigorous-paper-dht66q\"\r\n                className=\"codesandboxIFrame\"\r\n                title=\"vigorous-paper-dht66q\"\r\n                allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\r\n                sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\r\n            ></iframe>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default Usage;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { DesktopDatePicker } from '@mui/lab';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { options } from '../../constants/Data';\r\n\r\nconst initialFormData = { listChild: ['', ''] };\r\n\r\nconst rules = [\r\n    { path: 'val1', ruleSet: [{ rule: 'required', applyToNulls: true }] },\r\n    { path: 'val2', ruleSet: [{ rule: 'number', equalTo: 3, applyToNulls: true }] },\r\n    { path: 'val3', ruleSet: [{ rule: 'length', equalTo: 3, applyToNulls: true }] },\r\n    { path: 'val4', ruleSet: [{ rule: 'listSize', equalTo: 3, applyToNulls: true }] },\r\n    { path: 'val5', ruleSet: [{ rule: 'date', applyToNulls: true }] },\r\n    { path: 'val6', ruleSet: [{ rule: 'email', applyToNulls: true }] },\r\n    { path: 'val7', ruleSet: [{ rule: 'url', applyToNulls: true }] },\r\n    { path: 'val8', ruleSet: [{ rule: 'iban', applyToNulls: true }] },\r\n    { path: 'val9', ruleSet: [{ rule: 'equality', equalTo: 'aaa', applyToNulls: true }] },\r\n    { path: 'val10', ruleSet: [{ rule: 'regex', regex: /a/, applyToNulls: true }] },\r\n    {\r\n        listPath: 'listChild',\r\n        ruleSet: [{ rule: 'unique', applyToNulls: true }],\r\n    },\r\n];\r\n\r\nconst CustomApplyToNulls = () => {\r\n    const { isValid, formData, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    let listChildJsx = null;\r\n\r\n    const handleAddElement = () => {\r\n        const newListChild = formData.listChild ? [...formData.listChild] : [];\r\n        newListChild.push('');\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    const handleDeleteElement = (index) => {\r\n        const newListChild = formData.listChild.filter((el, ind) => ind !== index);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    if (formData.listChild && formData.listChild.length > 0) {\r\n        listChildJsx = formData.listChild.map((lc, index) => {\r\n            return (\r\n                <div key={index}>\r\n                    <TextField\r\n                        error={!!getError(`listChild{${index}}`)}\r\n                        helperText={getError(`listChild{${index}}`) || ' '}\r\n                        label=\"unique\"\r\n                        type=\"text\"\r\n                        value={getValue(`listChild[${index}]`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}]`, e.target.value)}\r\n                    />\r\n                    <Button className=\"myDeleteButton\" variant=\"contained\" onClick={() => handleDeleteElement(index)}>\r\n                        <span className=\"myShinkableButtonSpan\">Delete Element</span>\r\n                        <DeleteIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"applyToNulls\" codeUrl=\"components/customizations/CustomApplyToNulls.js\">\r\n            <p className=\"infoParagraph\">\r\n                By default <b>react-validatable-form</b> interprets <b>undefined</b>, <b>null</b>, <b>empty string</b>{' '}\r\n                or <b>empty array</b> values as valid values. If you want any rule to be applied to these values,{' '}\r\n                <b>applyToNulls</b> parameter should be used.\r\n            </p>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val1')}\r\n                    helperText={getError('val1') || ' '}\r\n                    label=\"requiredApplyToNulls\"\r\n                    type=\"text\"\r\n                    value={getValue('val1') || ''}\r\n                    onChange={(e) => setPathValue('val1', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val2')}\r\n                    helperText={getError('val2') || ' '}\r\n                    label=\"numberApplyToNulls\"\r\n                    type=\"number\"\r\n                    value={getValue('val2') || ''}\r\n                    onChange={(e) => setPathValue('val2', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val3')}\r\n                    helperText={getError('val3') || ' '}\r\n                    label=\"lengthApplyToNulls\"\r\n                    type=\"text\"\r\n                    value={getValue('val3') || ''}\r\n                    onChange={(e) => setPathValue('val3', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Autocomplete\r\n                    multiple\r\n                    value={getValue('val4') || []}\r\n                    onChange={(event, newValue) => {\r\n                        setPathValue('val4', newValue);\r\n                    }}\r\n                    options={options}\r\n                    renderInput={(params) => (\r\n                        <TextField\r\n                            {...params}\r\n                            error={!!getError('val4')}\r\n                            helperText={getError('val4') || ' '}\r\n                            label=\"listSizeApplyToNulls\"\r\n                        />\r\n                    )}\r\n                />\r\n            </div>\r\n            <div>\r\n                <DesktopDatePicker\r\n                    label=\"dateApplyToNulls\"\r\n                    inputFormat=\"MM/dd/yyyy\"\r\n                    value={getValue('val5') || null}\r\n                    onChange={(val) => setPathValue('val5', val)}\r\n                    renderInput={(params) => (\r\n                        <TextField {...params} error={!!getError('val5')} helperText={getError('val5') || ' '} />\r\n                    )}\r\n                />\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val6')}\r\n                    helperText={getError('val6') || ' '}\r\n                    label=\"emailApplyToNulls\"\r\n                    type=\"text\"\r\n                    value={getValue('val6') || ''}\r\n                    onChange={(e) => setPathValue('val6', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val7')}\r\n                    helperText={getError('val7') || ' '}\r\n                    label=\"urlApplyToNulls\"\r\n                    type=\"text\"\r\n                    value={getValue('val7') || ''}\r\n                    onChange={(e) => setPathValue('val7', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val8')}\r\n                    helperText={getError('val8') || ' '}\r\n                    label=\"ibanApplyToNulls\"\r\n                    type=\"text\"\r\n                    value={getValue('val8') || ''}\r\n                    onChange={(e) => setPathValue('val8', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val9')}\r\n                    helperText={getError('val9') || ' '}\r\n                    label=\"equalityApplyToNulls\"\r\n                    type=\"text\"\r\n                    value={getValue('val9') || ''}\r\n                    onChange={(e) => setPathValue('val9', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    error={!!getError('val10')}\r\n                    helperText={getError('val10') || ' '}\r\n                    label=\"regexApplyToNulls\"\r\n                    type=\"text\"\r\n                    value={getValue('val10') || ''}\r\n                    onChange={(e) => setPathValue('val10', e.target.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Button className=\"myAddButton\" variant=\"contained\" onClick={handleAddElement}>\r\n                    <span className=\"myShinkableButtonSpan\">Add New Element</span>\r\n                    <AddIcon className=\"myShinkableButtonIcon\" />\r\n                </Button>\r\n            </div>\r\n            <div className={'formListField'}>{listChildJsx}</div>\r\n            <div className={'errorInfoText'}>{getError('listChild')}</div>\r\n\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default CustomApplyToNulls;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport './CustomElementFocusHandler.css';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Button from '@mui/material/Button';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\n\r\nconst myCustomElementFocusHandler = (elementId) => {\r\n    const element = document.getElementById(elementId);\r\n    if (!element) {\r\n        console.warn(`Dom element with id ${elementId} could not be found`);\r\n    } else {\r\n        const parentElement = element.parentElement;\r\n        const grantParentElement = parentElement.parentElement;\r\n        grantParentElement.classList.add('element-shaking');\r\n        element.focus();\r\n        setTimeout(() => {\r\n            grantParentElement.classList.remove('element-shaking');\r\n        }, 600);\r\n    }\r\n};\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    {\r\n        path: 'textVal2',\r\n        ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 7 }],\r\n    },\r\n    { path: 'val3', ruleSet: [{ rule: 'required' }, { rule: 'listSize', equalTo: 2 }] },\r\n    { path: 'textVal4', ruleSet: [{ rule: 'required' }, { rule: 'url' }] },\r\n];\r\n\r\nconst CustomElementFocusHandler = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n        elementFocusHandler: myCustomElementFocusHandler,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"elementFocusHandler\"\r\n            codeUrl=\"components/customizations/CustomElementFocusHandler.js\"\r\n        >\r\n            <p className=\"infoParagraph\">\r\n                <b>elementFocusHandler</b> parameter is used to manually handle focusing to the first element with a\r\n                validation error.\r\n            </p>\r\n            <div>\r\n                <div className={'formField'}>\r\n                    <TextField\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"requiredField\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                    <TextField\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"requiredAndLengthField\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                    <Autocomplete\r\n                        multiple\r\n                        value={getValue('val3') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('val3', newValue);\r\n                        }}\r\n                        onBlur={() => setPathIsBlurred('val3')}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('val3')}\r\n                                helperText={getError('val3') || ' '}\r\n                                label=\"requiredAndListSize\"\r\n                            />\r\n                        )}\r\n                        id=\"val3\"\r\n                    />\r\n                    <TextField\r\n                        error={!!getError('textVal4')}\r\n                        helperText={getError('textVal4') || ' '}\r\n                        label=\"requiredAndUrl\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal4') || ''}\r\n                        onChange={(e) => setPathValue('textVal4', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal4')}\r\n                        id=\"textVal4\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={handleFormSubmit}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default CustomElementFocusHandler;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport { Link } from 'react-router-dom';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { useState } from 'react';\r\n\r\nconst rules = [\r\n    {\r\n        listPath: 'listChild',\r\n        ruleSet: ['required', { rule: 'unique' }],\r\n    },\r\n    {\r\n        listPath: 'listOfObjectsChild',\r\n        subRules: [\r\n            {\r\n                path: 'subkey1',\r\n                ruleSet: ['required', { rule: 'unique' }],\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\nconst RuleUnique = () => {\r\n    const { isValid, formData, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData: {\r\n            listChild: ['a', 'a'],\r\n            listOfObjectsChild: [\r\n                { id: 1, subkey1: 'b' },\r\n                { id: 2, subkey1: 'b' },\r\n            ],\r\n        },\r\n    });\r\n    const [nextId, setNextId] = useState(3);\r\n\r\n    let listChildJsx = null;\r\n\r\n    const handleAddElement = () => {\r\n        const newListChild = [...formData.listChild];\r\n        newListChild.push('');\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    const handleDeleteElement = (index) => {\r\n        const newListChild = formData.listChild.filter((el, ind) => ind !== index);\r\n        setPathValue('listChild', newListChild);\r\n    };\r\n\r\n    if (formData.listChild && formData.listChild.length > 0) {\r\n        listChildJsx = formData.listChild.map((lc, index) => {\r\n            return (\r\n                <div key={index}>\r\n                    <TextField\r\n                        error={!!getError(`listChild{${index}}`)}\r\n                        helperText={getError(`listChild{${index}}`) || ' '}\r\n                        label=\"unique\"\r\n                        type=\"text\"\r\n                        value={getValue(`listChild[${index}]`) || ''}\r\n                        onChange={(e) => setPathValue(`listChild[${index}]`, e.target.value)}\r\n                    />\r\n                    <Button className=\"myDeleteButton\" variant=\"contained\" onClick={() => handleDeleteElement(index)}>\r\n                        <span className=\"myShinkableButtonSpan\">Delete Element</span>\r\n                        <DeleteIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    const handleAddObjectElement = () => {\r\n        const newListOfObjectsChild = [...formData.listOfObjectsChild];\r\n        newListOfObjectsChild.push({ id: nextId });\r\n        setNextId(nextId + 1);\r\n        setPathValue('listOfObjectsChild', newListOfObjectsChild);\r\n    };\r\n\r\n    const handleDeleteObjectElement = (id) => {\r\n        const newListOfObjectsChild = formData.listOfObjectsChild.filter((el) => el.id !== id);\r\n        setPathValue('listOfObjectsChild', newListOfObjectsChild);\r\n    };\r\n\r\n    let listOfObjectsChildJsx = null;\r\n\r\n    if (formData.listOfObjectsChild && formData.listOfObjectsChild.length > 0) {\r\n        listOfObjectsChildJsx = formData.listOfObjectsChild.map((lc, index) => {\r\n            return (\r\n                <div key={lc.id}>\r\n                    <TextField\r\n                        error={!!getError(`listOfObjectsChild{${index}}.subkey1`)}\r\n                        helperText={getError(`listOfObjectsChild{${index}}.subkey1`) || ' '}\r\n                        label=\"unique subkey\"\r\n                        type=\"text\"\r\n                        value={getValue(`listOfObjectsChild[${index}].subkey1`) || ''}\r\n                        onChange={(e) => setPathValue(`listOfObjectsChild[${index}].subkey1`, e.target.value)}\r\n                        id={`listOfObjectsChild{${index}}.subkey1`}\r\n                    />\r\n                    <Button\r\n                        className=\"myDeleteButton\"\r\n                        variant=\"contained\"\r\n                        onClick={() => handleDeleteObjectElement(lc.id)}\r\n                    >\r\n                        <span className=\"myShinkableButtonSpan\">Delete Element</span>\r\n                        <DeleteIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"Unique\" codeUrl=\"components/rules/RuleUnique.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>unique</b> rule checks if non-unique values exist on a{' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    listPath\r\n                </Link>\r\n                .\r\n            </p>\r\n            <div>\r\n                <div>\r\n                    <Button className=\"myAddButton\" variant=\"contained\" onClick={handleAddElement}>\r\n                        <span className=\"myShinkableButtonSpan\">Add New Element</span>\r\n                        <AddIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n                <div className={'formListField'}>{listChildJsx}</div>\r\n                <div className={'errorInfoText'}>{getError('listChild')}</div>\r\n\r\n                <div>\r\n                    <Button className=\"myAddButton\" variant=\"contained\" onClick={handleAddObjectElement}>\r\n                        <span className=\"myShinkableButtonSpan\">Add New Element</span>\r\n                        <AddIcon className=\"myShinkableButtonIcon\" />\r\n                    </Button>\r\n                </div>\r\n                <div className={'formListField'}>{listOfObjectsChildJsx}</div>\r\n                <div className={'errorInfoText'}>{getError('listOfObjectsChild')}</div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleUnique;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormHelperText } from '@mui/material';\r\n\r\nconst initialFormData = {\r\n    val: false,\r\n    val2: 'aa',\r\n    comparisonValue: 'aba',\r\n};\r\n\r\nconst rules = [\r\n    { path: 'val', ruleSet: [{ rule: 'required' }, { rule: 'equality', equalTo: true }] },\r\n    {\r\n        path: 'val2',\r\n        ruleSet: [{ rule: 'required' }, { rule: 'equality', equalTo: (formData) => formData['comparisonValue'] }],\r\n        dependantPaths: ['comparisonValue'],\r\n    },\r\n];\r\n\r\nconst RuleEquality = () => {\r\n    const { isValid, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"equality\" codeUrl=\"components/rules/RuleEquality.js\">\r\n            <p className=\"infoParagraph\">\r\n                <b>equality</b> rule checks if the given value is equal to comparison value.\r\n            </p>\r\n            <div>\r\n                <FormGroup className={'checkboxOnRight'}>\r\n                    <FormControl error={!!getError('val')}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={getValue('val') || false}\r\n                                    onChange={(e) => setPathValue('val', e.target.checked)}\r\n                                />\r\n                            }\r\n                            label={<FormHelperText>{getError('val') || ' '}</FormHelperText>}\r\n                        />\r\n                    </FormControl>\r\n                </FormGroup>\r\n            </div>\r\n            <div className=\"comparisonDiv\">\r\n                <TextField\r\n                    error={!!getError('val2')}\r\n                    helperText={getError('val2') || ' '}\r\n                    label=\"val2\"\r\n                    type=\"text\"\r\n                    value={getValue('val2') || ''}\r\n                    onChange={(e) => setPathValue('val2', e.target.value)}\r\n                />\r\n                <TextField\r\n                    className=\"comparisonComponent\"\r\n                    label=\"comparisonValue\"\r\n                    type=\"text\"\r\n                    value={getValue('comparisonValue')}\r\n                    onChange={(e) => setPathValue('comparisonValue', e.target.value)}\r\n                />\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleEquality;\r\n","import { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExamplePureUsage = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            alert(JSON.stringify(formData));\r\n        }\r\n    };\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"Example Usage with Pure React Components\"\r\n            codeUrl=\"components/examples/ExamplePureUsage.js\"\r\n        >\r\n            <div>\r\n                <div className={getError('textVal1') && 'hasError'}>\r\n                    <label htmlFor=\"textVal1\">Text1: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                    <div className=\"errorText\">{getError('textVal1') || ' '}</div>\r\n                </div>\r\n                <div className={getError('textVal2') && 'hasError'}>\r\n                    <label htmlFor=\"textVal2\">Text2: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                    <div className=\"errorText\">{getError('textVal2') || ' '}</div>\r\n                </div>\r\n                <div className={getError('numVal') && 'hasError'}>\r\n                    <label htmlFor=\"numVal\">Num Val: </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                    <div className=\"errorText\">{getError('numVal') || ' '}</div>\r\n                </div>\r\n                <div className={getError('selectVal') && 'hasError'}>\r\n                    <label htmlFor=\"selectVal\">Select Val: </label>\r\n                    <select\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        value={getValue('selectVal') || ''}\r\n                        onChange={(e) => setPathValue('selectVal', e.target.value)}\r\n                    >\r\n                        <option key={'empty'} value={''}>\r\n                            {''}\r\n                        </option>\r\n                        {options.map((op) => {\r\n                            return (\r\n                                <option key={op} value={op}>\r\n                                    {op}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                    </select>\r\n                    <div className=\"errorText\">{getError('selectVal') || ' '}</div>\r\n                </div>\r\n                <div>\r\n                    <button className=\"mySubmitButton pureButton\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExamplePureUsage;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleMuiUsage = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"Example Usage with MUI Components\"\r\n            codeUrl=\"components/examples/ExampleMuiUsage.js\"\r\n        >\r\n            <div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('numVal')}\r\n                        helperText={getError('numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={getValue('selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('selectVal')}\r\n                                helperText={getError('selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleMuiUsage;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { Button } from 'primereact/button';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst primeReactElementsFocusHandler = (elementId) => {\r\n    const element = document.getElementById(elementId);\r\n    if (!element) {\r\n        console.warn(`Dom element with id ${elementId} could not be found`);\r\n    } else {\r\n        const tagName = element.tagName;\r\n        if (tagName.toUpperCase() === 'INPUT') {\r\n            element.focus();\r\n        } else {\r\n            var inputNodes = element.getElementsByTagName('INPUT');\r\n            for (var i = 0; i < inputNodes.length; ++i) {\r\n                var inputNode = inputNodes[i];\r\n                inputNode.focus();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst ExamplePrimeReact = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n        elementFocusHandler: primeReactElementsFocusHandler,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"Example Usage with PrimeReact Components\"\r\n            codeUrl=\"components/examples/ExamplePrimeReact.js\"\r\n        >\r\n            <div>\r\n                <div className=\"my-prime-div\">\r\n                    <label htmlFor=\"textVal1\">Text1</label>\r\n                    <InputText\r\n                        className={getError('textVal1') && 'p-invalid'}\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                    <small className=\"p-error\">{getError('textVal1') || ' '}</small>\r\n                </div>\r\n                <div className=\"my-prime-div\">\r\n                    <label htmlFor=\"textVal2\">Text2</label>\r\n                    <InputText\r\n                        className={getError('textVal2') && 'p-invalid'}\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                    <small className=\"p-error\">{getError('textVal2') || ' '}</small>\r\n                </div>\r\n                <div className=\"my-prime-div\">\r\n                    <label htmlFor=\"numVal\">Num Val</label>\r\n                    <InputNumber\r\n                        className={getError('numVal') && 'p-invalid'}\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                    <small className=\"p-error\">{getError('numVal') || ' '}</small>\r\n                </div>\r\n                <div className=\"my-prime-div\">\r\n                    <label htmlFor=\"selectVal\">Select Val</label>\r\n                    <MultiSelect\r\n                        className={getError('selectVal') && 'p-invalid'}\r\n                        value={getValue('selectVal') || []}\r\n                        options={options}\r\n                        onChange={(e) => setPathValue('selectVal', e.value)}\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        id=\"selectVal\"\r\n                    />\r\n                    <small className=\"p-error\">{getError('selectVal') || ' '}</small>\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog\r\n                header=\"Form Data Submitted\"\r\n                visible={dialogOpen}\r\n                modal\r\n                style={{ width: '50vw' }}\r\n                onHide={() => setDialogOpen(false)}\r\n                onMaskClick={() => setDialogOpen(false)}\r\n                draggable={false}\r\n                resizable={false}\r\n            >\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExamplePrimeReact;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport ValidationResult from '../ValidationResult';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport './MyBootstrap.css';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleReactBootstrap = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"Example Usage with React-Bootstrap Components\"\r\n            codeUrl=\"components/examples/ExampleReactBootstrap.js\"\r\n        >\r\n            <Form className=\"my-bootstrap-form\">\r\n                <Form.Group controlId=\"textVal1\">\r\n                    <Form.Label>Text1</Form.Label>\r\n                    <Form.Control\r\n                        placeholder=\"Text1\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        isInvalid={!!getError('textVal1')}\r\n                    />\r\n                    {getError('textVal1') ? (\r\n                        <Form.Control.Feedback type=\"invalid\">{getError('textVal1') || ' '}</Form.Control.Feedback>\r\n                    ) : (\r\n                        <div className={'my-bootstrap-empty-feedback'}></div>\r\n                    )}\r\n                </Form.Group>\r\n                <Form.Group controlId=\"textVal2\">\r\n                    <Form.Label>Text2</Form.Label>\r\n                    <Form.Control\r\n                        placeholder=\"Text2\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        isInvalid={!!getError('textVal2')}\r\n                    />\r\n                    {getError('textVal2') ? (\r\n                        <Form.Control.Feedback type=\"invalid\">{getError('textVal2') || ' '}</Form.Control.Feedback>\r\n                    ) : (\r\n                        <div className={'my-bootstrap-empty-feedback'}></div>\r\n                    )}\r\n                </Form.Group>\r\n                <Form.Group controlId=\"numVal\">\r\n                    <Form.Label>Num Val</Form.Label>\r\n                    <Form.Control\r\n                        type=\"number\"\r\n                        placeholder=\"Num Val\"\r\n                        value={getValue('numVal') || ''}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        isInvalid={!!getError('numVal')}\r\n                    />\r\n                    {getError('numVal') ? (\r\n                        <Form.Control.Feedback type=\"invalid\">{getError('numVal') || ' '}</Form.Control.Feedback>\r\n                    ) : (\r\n                        <div className={'my-bootstrap-empty-feedback'}></div>\r\n                    )}\r\n                </Form.Group>\r\n                <Form.Group controlId=\"selectVal\">\r\n                    <Form.Label>Select Val</Form.Label>\r\n                    <Form.Select\r\n                        value={getValue('selectVal') || ''}\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        onChange={(e) => setPathValue('selectVal', e.target.value)}\r\n                        isInvalid={!!getError('selectVal')}\r\n                    >\r\n                        <option key={'empty'} value={''}>\r\n                            {''}\r\n                        </option>\r\n                        {options.map((op) => {\r\n                            return (\r\n                                <option key={op} value={op}>\r\n                                    {op}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                    </Form.Select>\r\n                    {getError('selectVal') ? (\r\n                        <Form.Control.Feedback type=\"invalid\">{getError('selectVal') || ' '}</Form.Control.Feedback>\r\n                    ) : (\r\n                        <div className={'my-bootstrap-empty-feedback'}></div>\r\n                    )}\r\n                </Form.Group>\r\n                <Button className=\"mySubmitButton\" variant=\"primary\" onClick={() => handleFormSubmit()}>\r\n                    Submit\r\n                </Button>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </Form>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleReactBootstrap;\r\n","import { useEffect, useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleSetFormData = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        formData,\r\n        setPathValue,\r\n        setFormData,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n    } = useValidatableForm({\r\n        rules,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormData({\r\n                textVal1: 'aa',\r\n                textVal2: 'bb',\r\n                numVal: 5,\r\n                selectVal: ['Europe', 'South America'],\r\n            });\r\n            setFormFilledState(1);\r\n        }, 2000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormData({\r\n                textVal1: 'aa',\r\n                numVal: 8,\r\n                selectVal: ['Europe'],\r\n            });\r\n            setFormFilledState(2);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"setFormData\" codeUrl=\"components/examples/ExampleSetFormData.js\">\r\n            <div>\r\n                {formFilledState === 0\r\n                    ? 'Please wait for 2 seconds...'\r\n                    : formFilledState === 1\r\n                    ? 'Wait for another 2 seconds...'\r\n                    : 'Thanks for waiting 4 seconds'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal1')}\r\n                        helperText={get(validationError, 'textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal2')}\r\n                        helperText={get(validationError, 'textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'numVal')}\r\n                        helperText={get(validationError, 'numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={get(formData, 'numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={get(formData, 'selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!get(validationError, 'selectVal')}\r\n                                helperText={get(validationError, 'selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleSetFormData;\r\n","import { useEffect, useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleSetPathValue = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n    } = useValidatableForm({\r\n        rules,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setPathValue('textVal1', 'aaa');\r\n            setPathValue('textVal2', 'bbb');\r\n            setPathValue('numVal', 5);\r\n            setPathValue('selectVal', ['Europe', 'South America']);\r\n            setFormFilledState(1);\r\n        }, 2000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setPathValue('textVal1', 'aaa');\r\n            setPathValue('textVal2', null);\r\n            setPathValue('numVal', 9);\r\n            setPathValue('selectVal', ['Europe']);\r\n            setFormFilledState(2);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"setPathValue\" codeUrl=\"components/examples/ExampleSetPathValue.js\">\r\n            <div>\r\n                {formFilledState === 0\r\n                    ? 'Please wait for 2 seconds...'\r\n                    : formFilledState === 1\r\n                    ? 'Wait for another 2 seconds...'\r\n                    : 'Thanks for waiting 4 seconds'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal1')}\r\n                        helperText={get(validationError, 'textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal2')}\r\n                        helperText={get(validationError, 'textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'numVal')}\r\n                        helperText={get(validationError, 'numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={get(formData, 'numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={get(formData, 'selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!get(validationError, 'selectVal')}\r\n                                helperText={get(validationError, 'selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleSetPathValue;\r\n","import { useEffect, useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules2 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 10 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 15 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules3 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 13 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 25 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleSetFormDataAndRules = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormDataAndRules,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    textVal2: 'bb',\r\n                    numVal: 5,\r\n                    selectVal: ['Europe', 'South America'],\r\n                },\r\n                rules2\r\n            );\r\n            setFormFilledState(1);\r\n            setCurrentRules(rules2);\r\n        }, 2000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    numVal: 8,\r\n                    selectVal: ['Europe'],\r\n                },\r\n                rules3\r\n            );\r\n            setFormFilledState(2);\r\n            setCurrentRules(rules3);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"setFormDataAndRules\" codeUrl=\"components/examples/ExampleSetFormDataAndRules.js\">\r\n            <div>\r\n                {formFilledState === 0\r\n                    ? 'Please wait for 2 seconds...'\r\n                    : formFilledState === 1\r\n                    ? 'Wait for another 2 seconds...'\r\n                    : 'Thanks for waiting 4 seconds'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('numVal')}\r\n                        helperText={getError('numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={getValue('selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('selectVal')}\r\n                                helperText={getError('selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={currentRules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleSetFormDataAndRules;\r\n","import { useEffect, useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules2 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 10 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 15 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules3 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 13 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 25 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleFormData = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setFormDataAndRules,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    textVal2: 'bb',\r\n                    numVal: 5,\r\n                    selectVal: ['Europe', 'South America'],\r\n                },\r\n                rules2\r\n            );\r\n            setFormFilledState(1);\r\n            setCurrentRules(rules2);\r\n        }, 2000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    numVal: 8,\r\n                    selectVal: ['Europe'],\r\n                },\r\n                rules3\r\n            );\r\n            setFormFilledState(2);\r\n            setCurrentRules(rules3);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"formData\" codeUrl=\"components/examples/ExampleFormData.js\">\r\n            <div>\r\n                {formFilledState === 0\r\n                    ? 'Please wait for 2 seconds...'\r\n                    : formFilledState === 1\r\n                    ? 'Wait for another 2 seconds...'\r\n                    : 'Thanks for waiting 4 seconds'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('numVal')}\r\n                        helperText={getError('numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={getValue('selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('selectVal')}\r\n                                helperText={getError('selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={formData} header=\"Current formData\" />\r\n                <CurrentRulesInfo currentRules={currentRules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleFormData;\r\n","import './ApiInfo.css';\r\n\r\nconst ApiInfo = ({ apiInfoList }) => {\r\n    const apiInfoListJsx = apiInfoList.map((api, index) => {\r\n        const apiLabel = api.label;\r\n        const apiDesc = api.desc;\r\n        const apiIndent = api.indent || 0;\r\n        const pLeft = 20 * apiIndent + 10;\r\n        const leftIndentStyle = { paddingLeft: pLeft + 'px' };\r\n        if (apiIndent) {\r\n            leftIndentStyle.borderTop = '1px dashed black';\r\n        }\r\n        return (\r\n            <div key={index} style={leftIndentStyle} className=\"apiInfo\">\r\n                <div className={'apiLabel'}>{apiLabel}</div>\r\n                <div className={'apiDesc'}>{apiDesc}</div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return <div className={'apiInfoWrapper'}>{apiInfoListJsx}</div>;\r\n};\r\n\r\nexport default ApiInfo;\r\n","import './CodeAccordion.css';\r\nimport Accordion from '@mui/material/Accordion';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport AccordionDetails from '@mui/material/AccordionDetails';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\n\r\nconst CodeAccordion = ({ code }) => {\r\n    return (\r\n        <div className={'codeExampleDiv'}>\r\n            <Accordion>\r\n                <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\">\r\n                    <span className={'codeExampleLabel'}>Example Source Code</span>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <span className={'codeExample'}>{code}</span>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CodeAccordion;\r\n","import { Link } from 'react-router-dom';\r\nimport ApiInfo from '../ApiInfo';\r\nimport CodeAccordion from '../CodeAccordion';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\n\r\nconst useValidatableFormCode = `const {isValid, validationError, validationErrorOriginalResult, formData, setPathValue, \r\n    unsetPathValue, setFormIsSubmitted, setPathIsBlurred, unsetPathIsBlurred, setFormData, \r\n    setRules, setFormDataAndRules, resetForm, getValue, getError, forceRunAllValidations } = \r\n    useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n        hideBeforeSubmit,\r\n        showAfterBlur,\r\n        focusToErrorAfterSubmit,\r\n});`;\r\n\r\nconst hookParametersApiInfoList = [\r\n    {\r\n        label: (\r\n            <div>\r\n                rules (array){' '}\r\n                <Link className=\"inner-link\" to=\"/api/rules\">\r\n                    See rules API\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Array of validation rules to be run on current form.',\r\n    },\r\n    {\r\n        label: 'initialFormData (object)',\r\n        desc: 'Initial form data to set default values of current form.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                hideBeforeSubmit (boolean){' '}\r\n                <Link className=\"inner-link\" to=\"/advanced/hide-before-submit\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Flag to hide validation errors before setFormIsSubmitted function is called.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                showAfterBlur (boolean){' '}\r\n                <Link className=\"inner-link\" to=\"/advanced/show-after-blur\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Flag to hide validation errors before setPathIsBlurred function is called for any path.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                focusToErrorAfterSubmit (boolean){' '}\r\n                <Link className=\"inner-link\" to=\"/advanced/focus-to-error-after-submit\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc:\r\n            'Flag to automatically focus to first HTML element with validation error after setFormIsSubmitted function is called.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                elementFocusHandler (function){' '}\r\n                <Link className=\"inner-link\" to=\"/customizations/custom-element-focus-handler\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc:\r\n            'Function that accepts the first \"elementId\" of current validation errors as parameter that is used to customly manage DOM after submit.',\r\n    },\r\n];\r\n\r\nconst returnValuesApiInfoList = [\r\n    {\r\n        label: 'isValid (boolean)',\r\n        desc: \"Always returns the form's combined validation result according to current formData and rules.\",\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                validationError (object){' '}\r\n                <Link className=\"inner-link\" to=\"/examples/validation-error\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc:\r\n            'Returns the validation result info of each rule with each path according to current formData and rules. Some validation results can be hide before submit or before blur.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                validationErrorOriginalResult (object){' '}\r\n                <Link className=\"inner-link\" to=\"/examples/validation-error-original-result\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc:\r\n            'Returns the validation result info of each rule with each path according to current formData and rules. (is not hidden before submit or before blur).',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                formData (object){' '}\r\n                <Link className=\"inner-link\" to=\"/examples/form-data\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Returns current formData.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                setPathValue(path, value){' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    See Path API\r\n                </Link>\r\n                {' - '}\r\n                <Link className=\"inner-link\" to=\"/examples/set-path-value\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Function to update given path of formData with given value.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                unsetPathValue(path, value){' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    See Path API\r\n                </Link>\r\n                {' - '}\r\n                <Link className=\"inner-link\" to=\"/examples/unset-path-value\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Function to remove value and key for given path of formData.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                setFormIsSubmitted(){' '}\r\n                <Link className=\"inner-link\" to=\"/advanced/hide-before-submit\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc:\r\n            'Function to set form is submitted info true and show all current validation results if hideBeforeSubmit parameter is set true.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                setPathIsBlurred(path){' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    See Path API\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc:\r\n            'Function to set element of path is blurred info true and unhide its current validation result if showAfterBlur parameter is set true.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                unsetPathIsBlurred(path){' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    See Path API\r\n                </Link>\r\n                {' - '}\r\n                <Link className=\"inner-link\" to=\"/examples/unset-path-is-blurred\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc:\r\n            'Function to unset element of path is blurred info and hide its current validation result if showAfterBlur parameter is set true.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                setFormData(newFormData, pathToBeRun){' '}\r\n                <Link className=\"inner-link\" to=\"/examples/set-form-data\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Function to update whole formData and run validation rules of given pathToBeRun array.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                setRules(newRules){' '}\r\n                <Link className=\"inner-link\" to=\"/examples/set-rules\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Function to update rules and run all validations according to these rules.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                setFormDataAndRules(newFormData, newRules){' '}\r\n                <Link className=\"inner-link\" to=\"/examples/set-form-data-and-rules\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc:\r\n            'Function to update whole formData and rules simultaneously and run all validations according to these formData and rules.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                resetForm(){' '}\r\n                <Link className=\"inner-link\" to=\"/advanced/show-after-blur\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Function to reset form submitted info and elements blurred info.',\r\n    },\r\n    {\r\n        label: 'getValue(path)',\r\n        desc: 'Function to get value of given path on formData object.',\r\n    },\r\n    {\r\n        label: 'getError(path)',\r\n        desc: 'Function to get validation error of given path on validationError object.',\r\n    },\r\n    {\r\n        label: 'forceRunAllValidations()',\r\n        desc: 'Function to run all validations according to current rules.',\r\n    },\r\n];\r\n\r\nconst ApiUseValidatableForm = () => {\r\n    return (\r\n        <ExampleUsageWrapper header=\"useValidatableForm\">\r\n            <CodeAccordion code={useValidatableFormCode} />\r\n            <div className=\"apiInfoSectionHeader\">Hook Parameters</div>\r\n            <ApiInfo apiInfoList={hookParametersApiInfoList} />\r\n            <div className=\"apiInfoSectionHeader\">Return Values</div>\r\n            <ApiInfo apiInfoList={returnValuesApiInfoList} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ApiUseValidatableForm;\r\n","import ApiInfo from '../ApiInfo';\r\nimport CodeAccordion from '../CodeAccordion';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\n\r\nconst providerFormCode = `<ReactValidatableFormProvider\r\nlang={lang}\r\ncustomRules={customRules}\r\ntranslations={translations}\r\ndateFormatterFunction={dateFormatterFunction}\r\ndateWithTimeFormatterFunction={dateWithTimeFormatterFunction}\r\nhideBeforeSubmit={hideBeforeSubmit}\r\nshowAfterBlur={showAfterBlur}\r\nfocusToErrorAfterSubmit={focusToErrorAfterSubmit}\r\nelementFocusHandler={elementFocusHandler}\r\n>\r\n    <App />\r\n</ReactValidatableFormProvider>`;\r\n\r\nconst providerParametersApiInfoList = [\r\n    {\r\n        label: 'lang (string)',\r\n        desc: 'Selected language to show validation errors.',\r\n    },\r\n    {\r\n        label: 'customRules (object)',\r\n        desc: 'Custom rules that are specific to app and that can used at any component wrapped by the provider.',\r\n    },\r\n    {\r\n        label: 'translations (object)',\r\n        desc:\r\n            'Custom translation objects to override default error messages or to add a new language for error messages.',\r\n    },\r\n    {\r\n        label: 'dateFormatterFunction (function)',\r\n        desc: 'Function that is used to format dates used in date rule without withTime option.',\r\n    },\r\n    {\r\n        label: 'dateWithTimeFormatterFunction (function)',\r\n        desc: 'Function that is used to format dates used in date rule with withTime option.',\r\n    },\r\n    {\r\n        label: 'hideBeforeSubmit (boolean)',\r\n        desc: 'Flag to hide validation errors before setFormIsSubmitted function is called.',\r\n    },\r\n    {\r\n        label: 'showAfterBlur (boolean)',\r\n        desc: 'Flag to hide validation errors before setPathIsBlurred function is called for any path.',\r\n    },\r\n    {\r\n        label: 'focusToErrorAfterSubmit (boolean)',\r\n        desc:\r\n            'Flag to automatically focus to first HTML element with validation error after setFormIsSubmitted function is called.',\r\n    },\r\n    {\r\n        label: 'elementFocusHandler (function)',\r\n        desc:\r\n            'Function that accepts the first \"elementId\" of current validation errors as parameter that is used to customly manage DOM after submit.',\r\n    },\r\n];\r\n\r\nconst ApiReactValidatableFormProvider = (props) => {\r\n    return (\r\n        <ExampleUsageWrapper header=\"ReactValidatableFormProvider\">\r\n            <CodeAccordion code={providerFormCode} />\r\n            <div className=\"apiInfoSectionHeader\">\r\n                Provider Parameters\r\n                <div>\r\n                    ruleSet (array){' '}\r\n                    <span className=\"inner-link\" onClick={props.openSettingsDialog}>\r\n                        See Example Usages\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <ApiInfo apiInfoList={providerParametersApiInfoList} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ApiReactValidatableFormProvider;\r\n","import { Link } from 'react-router-dom';\r\nimport ApiInfo from '../ApiInfo';\r\nimport CodeAccordion from '../CodeAccordion';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\n\r\nconst rulesFormCode = `const rules = [\r\n    {\r\n        listPath: 'listChild',\r\n        subRules: [\r\n            {\r\n                path: 'subkey1',\r\n                ruleSet: ['required', { rule: 'length', greaterThan: 3 }],\r\n                disableFocusAfterSubmit: true,\r\n            },\r\n            {\r\n                path: 'subkey2',\r\n                ruleSet: [\r\n                    {\r\n                        rule: 'required',\r\n                        disableIf: disableSubkey2,\r\n                    },\r\n                    {\r\n                        rule: 'number',\r\n                        greaterThan: 5,\r\n                        disableIf: disableSubkey2,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                path: 'subkey3',\r\n                ruleSet: ['required'],\r\n                elementId: 'subkey3ElementId',\r\n            },\r\n        ],\r\n        dependantPaths: ['disableAllSubkey2Rule'],\r\n    },\r\n    {\r\n        path: 'listChild',\r\n        ruleSet: [\r\n            { rule: 'required', customMessage: 'This list should not be empty' },\r\n            { rule: 'listSize', greaterThan: 2 },\r\n        ],\r\n        elementId: 'listErrorFocusElement',\r\n    },\r\n    { path: 'bottomElement1', ruleSet: ['required'] },\r\n    { path: 'bottomElement2', ruleSet: [{ rule: 'length', greaterThan: 3, applyToNulls: true }] },\r\n    { path: 'subComponentElement1', ruleSet: ['required'] },\r\n    { path: 'subComponentElement2', ruleSet: ['required'] },\r\n];`;\r\n\r\nconst rulesParametersApiInfoList = [\r\n    {\r\n        label: (\r\n            <div>\r\n                path (string){' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    See Path API\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Path of the value on formData to run the rule.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                listPath (string){' '}\r\n                <Link className=\"inner-link\" to=\"/api/path\">\r\n                    See Path API\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Path of the values of a list on formData to run the rules on each elements of the list.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                ruleSet (array){' '}\r\n                <Link className=\"inner-link\" to=\"/api/rule\">\r\n                    See Rule API\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Rules to be applied to the value on path (Can be string or rule object).',\r\n    },\r\n    {\r\n        label: 'elementId (string)',\r\n        desc: 'Custom elementId to focus after submit (path is used if empty).',\r\n    },\r\n    {\r\n        label: 'listElementId (string)',\r\n        desc:\r\n            'Custom listElementId prefix to focus to elements with validation errors after submit (listPath is used if empty).',\r\n    },\r\n    {\r\n        label: 'dependantPaths (array)',\r\n        desc: 'Array of paths that should trigger running the validation when there is a change on those paths.',\r\n    },\r\n    {\r\n        label: 'disableFocusAfterSubmit (boolean)',\r\n        desc: 'Disable searching for element with given path to focus after submit if there is a validation error.',\r\n    },\r\n    {\r\n        label: 'subRules (array)',\r\n        desc: 'Rules to be applied to the subpaths of the given list (can only be used with listPath).',\r\n    },\r\n];\r\n\r\nconst ApiRules = () => {\r\n    return (\r\n        <ExampleUsageWrapper header=\"rules\">\r\n            <CodeAccordion code={rulesFormCode} />\r\n            <div className=\"apiInfoSectionHeader\">Rules Array Parameters</div>\r\n            <ApiInfo apiInfoList={rulesParametersApiInfoList} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ApiRules;\r\n","import { Link } from 'react-router-dom';\r\nimport ApiInfo from '../ApiInfo';\r\nimport CodeAccordion from '../CodeAccordion';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\n\r\nconst rulesFormCode = `ruleSet: [\r\n    { rule: 'required', customMessage: 'This list should not be empty' },\r\n    { rule: 'listSize', greaterThan: 2 },\r\n],`;\r\n\r\nconst ruleParametersApiInfoList = [\r\n    {\r\n        label: 'rule (string || func)',\r\n        desc: (\r\n            <span>\r\n                Identifier (name) of the rule to be run. (Can also be a{' '}\r\n                <Link className=\"inner-link\" to=\"/rules/custom-on-hook\">\r\n                    custom function\r\n                </Link>\r\n                )\r\n            </span>\r\n        ),\r\n    },\r\n    {\r\n        label: 'equalTo, lessThan, lessThanOrEqualTo, greaterThan, greaterThanOrEqualTo, notEqualTo (any || function)',\r\n        desc: (\r\n            <span>\r\n                Comparison identifier that can be used only by{' '}\r\n                <Link className=\"inner-link\" to=\"/rules/number\">\r\n                    number\r\n                </Link>\r\n                {', '}\r\n                <Link className=\"inner-link\" to=\"/rules/length\">\r\n                    length\r\n                </Link>\r\n                {', '}\r\n                <Link className=\"inner-link\" to=\"/rules/list-size\">\r\n                    listSize\r\n                </Link>\r\n                {' and '}\r\n                <Link className=\"inner-link\" to=\"/rules/date\">\r\n                    date\r\n                </Link>{' '}\r\n                rules.\r\n            </span>\r\n        ),\r\n    },\r\n    {\r\n        label: 'onlyIntegers (boolean)',\r\n        desc: (\r\n            <span>\r\n                Decides whether only integer are allowed that can be used only by{' '}\r\n                <Link className=\"inner-link\" to=\"/rules/number\">\r\n                    number\r\n                </Link>{' '}\r\n                rule.\r\n            </span>\r\n        ),\r\n    },\r\n    {\r\n        label: 'withTime (boolean)',\r\n        desc: (\r\n            <span>\r\n                Decides whether hours and minutes are taken into account that can be used only by{' '}\r\n                <Link className=\"inner-link\" to=\"/rules/date\">\r\n                    date\r\n                </Link>{' '}\r\n                rule.\r\n            </span>\r\n        ),\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                applyToNulls (boolean){' '}\r\n                <Link className=\"inner-link\" to=\"/customizations/apply-to-nulls\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Decides whether the rule should also be run on null values.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                disableIf (func){' '}\r\n                <Link className=\"inner-link\" to=\"/customizations/conditional-rules\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Disables running the rule if the return value of the function is truthy.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                enableIf (func){' '}\r\n                <Link className=\"inner-link\" to=\"/customizations/conditional-rules\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Enables running the rule if the return value of the function is truthy.',\r\n    },\r\n    {\r\n        label: (\r\n            <div>\r\n                customMessage (string || func){' '}\r\n                <Link className=\"inner-link\" to=\"/customizations/custom-message\">\r\n                    See Example\r\n                </Link>\r\n            </div>\r\n        ),\r\n        desc: 'Function to override default error message for the rule.',\r\n    },\r\n];\r\n\r\nconst ApiRule = () => {\r\n    return (\r\n        <ExampleUsageWrapper header=\"Rule\">\r\n            <CodeAccordion code={rulesFormCode} />\r\n            <div className=\"apiInfoSectionHeader\">Rule Definition Parameters</div>\r\n            <ApiInfo apiInfoList={ruleParametersApiInfoList} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ApiRule;\r\n","import ExampleUsageWrapper from '../ExampleUsageWrapper';\r\n\r\nconst pathFormCode = `\r\n////////////-- example rules --///////////\r\nconst rules = [\r\n    { path: 'child1', ruleSet: ['required'] },\r\n    { path: 'child2', ruleSet: ['required'] },\r\n    { path: 'child3.subchild1', ruleSet: ['required'] },\r\n    { path: 'child3.subchild2', ruleSet: ['required'] },\r\n    {\r\n        listPath: 'listChild',\r\n        subRules: [\r\n            {path: 'subkey1', ruleSet: ['required', { rule: 'length', greaterThan: 3 }]},\r\n            {path: 'subkey2', ruleSet: [{rule: 'required', }, { rule: 'number', greaterThan: 5 }]}\r\n        ]\r\n    },\r\n    {path: 'listChild', ruleSet: [{ rule: 'required'}, { rule: 'listSize', greaterThan: 2 }]}\r\n];\r\n\r\n////////////-- example formData --///////////\r\nconst formData = {\r\n    child1: \"child1 value\",\r\n    child2: \"child2 value\",\r\n    child3: {\r\n        subchild1: \"child3 subchild1 value\",\r\n        subchild2: \"child3 subchild2 value\",\r\n    },\r\n    listChild: [\r\n        {\r\n            subkey1: \"list 0th element subkey1 value\",\r\n            subkey2: \"list 0th element subkey2 value\",\r\n        },\r\n        {\r\n            subkey1: \"list 1st element subkey1 value\",\r\n            subkey2: \"list 1st element subkey2 value\",\r\n        }\r\n    ]\r\n};\r\n\r\n////////////-- example validationError result object --///////////\r\nconst validationError = {\r\n    \"child1\": \"This field is required\",                 // first level child\r\n    \"child2\": \"This field is required\",                 // first level child\r\n    \"child3.subchild1\": \"This field is required\",       // second level child\r\n    \"child3.subchild2\": \"This field is required\",       // second level child\r\n    \"listChild\": \"This field is required\",              // first level list child\r\n    \"listChild{0}.subkey1\": \"This field is required\",   // list of object's child\r\n    \"listChild{0}.subkey2\": \"This field is required\",   // list of object's child\r\n    \"listChild{1}.subkey1\": \"This field is required\",   // list of object's child\r\n    \"listChild{1}.subkey2\": \"This field is required\",   // list of object's child\r\n}\r\n\r\n`;\r\n\r\nconst ApiPath = () => {\r\n    return (\r\n        <ExampleUsageWrapper header=\"Path\">\r\n            <div className=\"infoParagraph\">\r\n                <p>\r\n                    <b>Path</b> is a string value that is used to access any value on the formData using{' '}\r\n                    <a\r\n                        className=\"inner-link\"\r\n                        href=\"https://lodash.com/docs/4.17.15#get\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        lodash get\r\n                    </a>{' '}\r\n                    method.\r\n                </p>\r\n                <p>This table shows how to use path and listPath keys for the following code.</p>\r\n                <table className=\"pathApiTable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <td className=\"pathApiTableInfoCol\">Path Type</td>\r\n                            <td className=\"pathApiTableExampleCol\">Usage Example</td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Update value of first level child</td>\r\n                            <td>setPathValue({\"'child1'\"}, newValue)</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Update value of second level child</td>\r\n                            <td>setPathValue({\"'child3.subchild1'\"}, newValue)</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Update value of list&apos;s element at 0th index</td>\r\n                            <td>setPathValue({\"'listChild[0]'\"}, newValue)</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Update value of list of object&apos;s element at 0th index with key subkey1</td>\r\n                            <td>setPathValue({\"'listChild[0].subkey1'\"}, newValue)</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get value of first level child</td>\r\n                            <td>getValue({\"'child1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get value of second level child</td>\r\n                            <td>getValue({\"'child3.subchild1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get value of list&apos;s element at 0th index</td>\r\n                            <td>getValue({\"'listChild[0]'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get value of list of object&apos;s element at 0th index with key subkey1</td>\r\n                            <td>getValue({\"'listChild[0].subkey1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get error of first level child</td>\r\n                            <td>getError({\"'child1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get error of second level child</td>\r\n                            <td>getError({\"'child3.subchild1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get error of list&apos;s element at 0th index</td>\r\n                            <td>getError({\"'listChild{0}'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Get error of list of object&apos;s element at 0th index with key subkey1</td>\r\n                            <td>getError({\"'listChild{0}.subkey1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Unset value and key of first level child</td>\r\n                            <td>unsetPathValue({\"'child1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Unset value and key of second level child</td>\r\n                            <td>unsetPathValue({\"'child3.subchild1'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Unset value and key of list&apos;s element at 0th index</td>\r\n                            <td>unsetPathValue({\"'listChild[0]'\"})</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Unset value and key of list of object&apos;s element at 0th index with key subkey1</td>\r\n                            <td>unsetPathValue({\"'listChild[0].subkey1'\"})</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div className=\"pageCodeWrapper\">\r\n                <span className=\"pageCode\">{pathFormCode}</span>\r\n            </div>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ApiPath;\r\n","import { useEffect, useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules2 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 10 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 15 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules3 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 13 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 25 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleValidationError = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        formData,\r\n        setPathValue,\r\n        setFormDataAndRules,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    textVal2: 'bb',\r\n                    numVal: 5,\r\n                    selectVal: ['Europe', 'South America'],\r\n                },\r\n                rules2\r\n            );\r\n            setFormFilledState(1);\r\n            setCurrentRules(rules2);\r\n        }, 2000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    numVal: 8,\r\n                    selectVal: ['Europe'],\r\n                },\r\n                rules3\r\n            );\r\n            setFormFilledState(2);\r\n            setCurrentRules(rules3);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"validationError\" codeUrl=\"components/examples/ExampleValidationError.js\">\r\n            <div>\r\n                {formFilledState === 0\r\n                    ? 'Please wait for 2 seconds...'\r\n                    : formFilledState === 1\r\n                    ? 'Wait for another 2 seconds...'\r\n                    : 'Thanks for waiting 4 seconds'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('numVal')}\r\n                        helperText={getError('numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={getValue('selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('selectVal')}\r\n                                helperText={getError('selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={validationError} header=\"Current validationError\" />\r\n                <CurrentRulesInfo currentRules={currentRules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleValidationError;\r\n","import { useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules2 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 10 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 15 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules3 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 13 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 2 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleSetRules = () => {\r\n    const {\r\n        isValid,\r\n        formData,\r\n        setPathValue,\r\n        setRules,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        initialFormData: { textVal1: 'aaa', textVal2: 'bbb', numVal: 5, selectVal: ['Europe'] },\r\n        rules,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    const changeRule = () => {\r\n        if (formFilledState === 0) {\r\n            setRules(rules2);\r\n            setFormFilledState(1);\r\n            setCurrentRules(rules2);\r\n        } else if (formFilledState === 1) {\r\n            setRules(rules3);\r\n            setFormFilledState(2);\r\n            setCurrentRules(rules3);\r\n        } else if (formFilledState === 2) {\r\n            setRules(rules);\r\n            setFormFilledState(0);\r\n            setCurrentRules(rules);\r\n        }\r\n    };\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"setRules\" codeUrl=\"components/examples/ExampleSetRules.js\">\r\n            <div>\r\n                {'Click \"Change Rule\" button to set new rules'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('numVal')}\r\n                        helperText={getError('numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={getValue('selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('selectVal')}\r\n                                helperText={getError('selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => changeRule()}>\r\n                        Change Rule\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={currentRules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleSetRules;\r\n","import { useEffect, useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleUnsetPathValue = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        formData,\r\n        setPathValue,\r\n        unsetPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n    } = useValidatableForm({\r\n        rules,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setPathValue('textVal1', 'aaa');\r\n            setPathValue('textVal2', 'bbb');\r\n            setPathValue('numVal', 5);\r\n            setPathValue('selectVal', ['Europe', 'South America']);\r\n            setFormFilledState(1);\r\n        }, 2000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setPathValue('textVal1', 'aaa');\r\n            setPathValue('textVal2', null);\r\n            unsetPathValue('numVal');\r\n            setPathValue('selectVal', ['Europe']);\r\n            setFormFilledState(2);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setPathValue('textVal1', 'aaa');\r\n            setPathValue('textVal2', 'gagag');\r\n            setPathValue('numVal', 9);\r\n            setPathValue('selectVal', ['Europe']);\r\n            setFormFilledState(3);\r\n        }, 6000);\r\n    }, []);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"unsetPathValue\" codeUrl=\"components/examples/ExampleUnsetPathValue.js\">\r\n            <div>\r\n                {formFilledState === 0\r\n                    ? 'Please wait for 2 seconds...'\r\n                    : formFilledState === 1\r\n                    ? 'Wait for another 2 seconds...'\r\n                    : formFilledState === 2\r\n                    ? 'And Wait for another 2 seconds...'\r\n                    : 'Thanks for waiting 6 seconds'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal1')}\r\n                        helperText={get(validationError, 'textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal2')}\r\n                        helperText={get(validationError, 'textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'numVal')}\r\n                        helperText={get(validationError, 'numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={get(formData, 'numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={get(formData, 'selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!get(validationError, 'selectVal')}\r\n                                helperText={get(validationError, 'selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={formData} header=\"Current formData\" />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleUnsetPathValue;\r\n","import { useEffect, useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules2 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 10 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 15 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst rules3 = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 13 }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }, { rule: 'length', greaterThanOrEqualTo: 25 }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleValidationErrorOriginalResult = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        validationErrorOriginalResult,\r\n        formData,\r\n        setPathValue,\r\n        setFormDataAndRules,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        getValue,\r\n        getError,\r\n    } = useValidatableForm({\r\n        rules,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [currentRules, setCurrentRules] = useState(rules);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    textVal2: 'bb',\r\n                    numVal: 5,\r\n                    selectVal: ['Europe', 'South America'],\r\n                },\r\n                rules2\r\n            );\r\n            setFormFilledState(1);\r\n            setCurrentRules(rules2);\r\n        }, 2000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setFormDataAndRules(\r\n                {\r\n                    textVal1: 'aa',\r\n                    numVal: 8,\r\n                    selectVal: ['Europe'],\r\n                },\r\n                rules3\r\n            );\r\n            setFormFilledState(2);\r\n            setCurrentRules(rules3);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper\r\n            header=\"validationErrorOriginalResult\"\r\n            codeUrl=\"components/examples/ExampleValidationErrorOriginalResult.js\"\r\n        >\r\n            <div>\r\n                {formFilledState === 0\r\n                    ? 'Please wait for 2 seconds...'\r\n                    : formFilledState === 1\r\n                    ? 'Wait for another 2 seconds...'\r\n                    : 'Thanks for waiting 4 seconds'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal1')}\r\n                        helperText={getError('textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('textVal2')}\r\n                        helperText={getError('textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={getValue('textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!getError('numVal')}\r\n                        helperText={getError('numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={getValue('numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={getValue('selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!getError('selectVal')}\r\n                                helperText={getError('selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={validationError} header=\"Current validationError\" />\r\n                <CurrentRulesInfo\r\n                    currentRules={validationErrorOriginalResult}\r\n                    header=\"Current validationErrorOriginalResult\"\r\n                />\r\n                <CurrentRulesInfo currentRules={currentRules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleValidationErrorOriginalResult;\r\n","import { useEffect, useState } from 'react';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\nimport get from 'lodash.get';\r\nimport ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport TextField from '@mui/material/TextField';\r\nimport ValidationResult from '../ValidationResult';\r\nimport { Autocomplete, Button } from '@mui/material';\r\nimport { Dialog, DialogTitle } from '@mui/material';\r\nimport FormSubmitResult from '../FormSubmitResult';\r\nimport { options } from '../../constants/Data';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\n\r\nconst rules = [\r\n    { path: 'textVal1', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'textVal2', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'numVal', ruleSet: [{ rule: 'required' }] },\r\n    { path: 'selectVal', ruleSet: [{ rule: 'required' }] },\r\n];\r\n\r\nconst ExampleUnsetPathIsBlurred = () => {\r\n    const {\r\n        isValid,\r\n        validationError,\r\n        formData,\r\n        setPathValue,\r\n        setFormIsSubmitted,\r\n        setPathIsBlurred,\r\n        unsetPathIsBlurred,\r\n    } = useValidatableForm({\r\n        rules,\r\n        hideBeforeSubmit: true,\r\n        showAfterBlur: true,\r\n        focusToErrorAfterSubmit: true,\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [formFilledState, setFormFilledState] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setPathIsBlurred('textVal1');\r\n            setPathIsBlurred('numVal');\r\n            setFormFilledState(1);\r\n        }, 2000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            unsetPathIsBlurred('textVal1');\r\n            setPathIsBlurred('textVal2');\r\n            setPathIsBlurred('numVal');\r\n            setFormFilledState(2);\r\n        }, 4000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            unsetPathIsBlurred('numVal');\r\n            unsetPathIsBlurred('selectVal');\r\n            setFormFilledState(3);\r\n        }, 6000);\r\n    }, []);\r\n\r\n    const handleFormSubmit = () => {\r\n        const submitResultValid = setFormIsSubmitted();\r\n        if (submitResultValid) {\r\n            setDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ExampleUsageWrapper header=\"unsetPathIsBlurred\" codeUrl=\"components/examples/ExampleUnsetPathIsBlurred.js\">\r\n            <div>\r\n                {formFilledState === 0\r\n                    ? 'Please wait for 2 seconds...'\r\n                    : formFilledState === 1\r\n                    ? 'Wait for another 2 seconds...'\r\n                    : formFilledState === 2\r\n                    ? 'And Wait for another 2 seconds...'\r\n                    : 'Thanks for waiting 6 seconds'}\r\n                <br />\r\n                <br />\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal1')}\r\n                        helperText={get(validationError, 'textVal1') || ' '}\r\n                        label=\"Text1\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal1') || ''}\r\n                        onChange={(e) => setPathValue('textVal1', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal1')}\r\n                        id=\"textVal1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'textVal2')}\r\n                        helperText={get(validationError, 'textVal2') || ' '}\r\n                        label=\"Text2\"\r\n                        type=\"text\"\r\n                        value={get(formData, 'textVal2') || ''}\r\n                        onChange={(e) => setPathValue('textVal2', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('textVal2')}\r\n                        id=\"textVal2\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <TextField\r\n                        error={!!get(validationError, 'numVal')}\r\n                        helperText={get(validationError, 'numVal') || ' '}\r\n                        label=\"Num Val\"\r\n                        type=\"number\"\r\n                        value={get(formData, 'numVal') || ''}\r\n                        onChange={(e) => setPathValue('numVal', e.target.value)}\r\n                        onBlur={() => setPathIsBlurred('numVal')}\r\n                        id=\"numVal\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"selectVal\"\r\n                        onBlur={() => setPathIsBlurred('selectVal')}\r\n                        multiple\r\n                        value={get(formData, 'selectVal') || []}\r\n                        onChange={(event, newValue) => {\r\n                            setPathValue('selectVal', newValue);\r\n                        }}\r\n                        options={options}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                error={!!get(validationError, 'selectVal')}\r\n                                helperText={get(validationError, 'selectVal') || ' '}\r\n                                label=\"Select Val\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button className=\"mySubmitButton\" variant=\"contained\" onClick={() => handleFormSubmit()}>\r\n                        Submit Form\r\n                    </Button>\r\n                </div>\r\n                <ValidationResult isValid={isValid} />\r\n                <CurrentRulesInfo currentRules={formData} header=\"Current formData\" />\r\n                <CurrentRulesInfo currentRules={rules} />\r\n            </div>\r\n            <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n                <DialogTitle>Form Data Submitted</DialogTitle>\r\n                <FormSubmitResult formData={formData} />\r\n            </Dialog>\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default ExampleUnsetPathIsBlurred;\r\n","import ExampleUsageWrapper from '../ExampleUsageWrapper';\r\nimport '../../App.css';\r\nimport { TextField } from '@mui/material';\r\nimport ValidationResult from '../ValidationResult';\r\nimport CurrentRulesInfo from '../CurrentRulesInfo';\r\nimport { useValidatableForm } from 'react-validatable-form';\r\n\r\nconst initialFormData = {\r\n    val: 'example',\r\n    val2: 'abc',\r\n    comparisonValue: 'bcc',\r\n};\r\n\r\nconst rules = [\r\n    {\r\n        path: 'val',\r\n        ruleSet: [{ rule: 'required' }, { rule: 'includes', includes: 'exe' }],\r\n        dependantPaths: ['comparisonValue'],\r\n    },\r\n    {\r\n        path: 'val2',\r\n        ruleSet: [{ rule: 'required' }, { rule: 'includes', includes: (formData) => formData['comparisonValue'] }],\r\n        dependantPaths: ['comparisonValue'],\r\n    },\r\n];\r\n\r\nconst RuleIncludes = () => {\r\n    const { isValid, setPathValue, getValue, getError } = useValidatableForm({\r\n        rules,\r\n        initialFormData,\r\n    });\r\n\r\n    return (\r\n        <ExampleUsageWrapper header={'includes'} codeUrl={'components/rules/RuleIncludes.js'}>\r\n            <p className={'infoParagraph'}>\r\n                <b> includes </b> rule checks if the given value includes comparison value.\r\n            </p>\r\n            <div className={'comparisonDiv'}>\r\n                <TextField\r\n                    error={!!getError('val')}\r\n                    helperText={getError('val') || ' '}\r\n                    label=\"val\"\r\n                    type=\"text\"\r\n                    value={getValue('val')}\r\n                    onChange={(e) => setPathValue('val', e.target.value)}\r\n                />\r\n            </div>\r\n            <div className={'comparisonDiv'}>\r\n                <TextField\r\n                    error={!!getError('val2')}\r\n                    helperText={getError('val2') || ' '}\r\n                    label=\"val2\"\r\n                    type=\"text\"\r\n                    value={getValue('val2')}\r\n                    onChange={(e) => setPathValue('val2', e.target.value)}\r\n                />\r\n                <TextField\r\n                    className=\"comparisonComponent\"\r\n                    label=\"comparisonValue\"\r\n                    type=\"text\"\r\n                    value={getValue('comparisonValue')}\r\n                    onChange={(e) => setPathValue('comparisonValue', e.target.value)}\r\n                />\r\n            </div>\r\n            <ValidationResult isValid={isValid} />\r\n            <CurrentRulesInfo currentRules={rules} />\r\n        </ExampleUsageWrapper>\r\n    );\r\n};\r\n\r\nexport default RuleIncludes;\r\n","import { Box, Typography } from '@mui/material';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Button from '@mui/material/Button';\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport './Installation.css';\r\nimport { useState } from 'react';\r\nimport './Home.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst npmCommand = 'npm install react-validatable-form';\r\nconst yarnCommand = 'yarn add react-validatable-form';\r\n\r\nconst Home = () => {\r\n    const [npmCopied, setNpmCopied] = useState(false);\r\n    const [yarnCopied, setYarnCopied] = useState(false);\r\n\r\n    const handleNpmCopy = () => {\r\n        setYarnCopied(false);\r\n        setNpmCopied(true);\r\n        navigator.clipboard.writeText(npmCommand);\r\n        setTimeout(() => {\r\n            setNpmCopied(false);\r\n        }, 1000);\r\n    };\r\n\r\n    const handleYarnCopy = () => {\r\n        setNpmCopied(false);\r\n        setYarnCopied(true);\r\n        navigator.clipboard.writeText(yarnCommand);\r\n        setTimeout(() => {\r\n            setYarnCopied(false);\r\n        }, 1000);\r\n    };\r\n\r\n    return (\r\n        <Box\r\n            className={'homeContainer'}\r\n            display={'flex'}\r\n            textAlign={'center'}\r\n            justifyContent={'center'}\r\n            alignItems={'center'}\r\n            flexDirection={'column'}\r\n            rowGap={5}\r\n            pt={2}\r\n        >\r\n            <img width={'200px'} src={process.env.PUBLIC_URL + '/logo.png'} alt={'logo'} />\r\n            <Typography variant={'h3'}> react-validatable-form </Typography>\r\n            <Typography variant={'h6'}>\r\n                {' '}\r\n                <a\r\n                    className=\"outsideUrlSpan\"\r\n                    href={'https://www.npmjs.com/package/react-validatable-form'}\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    react-validatable-form\r\n                </a>{' '}\r\n                is a{' '}\r\n                <a\r\n                    className=\"outsideUrlSpan\"\r\n                    href={'https://reactjs.org/docs/hooks-intro.html'}\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    React hook\r\n                </a>{' '}\r\n                that is used to create dynamic client side validations on React forms.{' '}\r\n            </Typography>\r\n            <Box display={'flex'} flexWrap={'wrap'} flexDirection={'row'} gap={1}>\r\n                <Tooltip className={'copyButtons'} open={npmCopied} placement=\"top\" title=\"copied!\">\r\n                    <Button variant=\"outlined\" onClick={handleNpmCopy}>\r\n                        <div className=\"commandBox\">\r\n                            <p className=\"commandText\">{npmCommand}</p>\r\n                        </div>\r\n                        <span className=\"installButtonIcon\">\r\n                            {npmCopied ? <DoneOutlineIcon /> : <ContentCopyIcon />}\r\n                        </span>\r\n                    </Button>\r\n                </Tooltip>\r\n                <Tooltip className={'copyButtons'} open={yarnCopied} placement=\"bottom\" title=\"copied!\">\r\n                    <Button variant=\"outlined\" onClick={handleYarnCopy}>\r\n                        <div className=\"commandBox\">\r\n                            <p className=\"commandText\">{yarnCommand}</p>\r\n                        </div>\r\n                        <span className=\"installButtonIcon\">\r\n                            {yarnCopied ? <DoneOutlineIcon /> : <ContentCopyIcon />}\r\n                        </span>\r\n                    </Button>\r\n                </Tooltip>\r\n            </Box>\r\n            <Box display={'flex'} gap={1} flexWrap={'wrap'} py={1}>\r\n                <a href={'https://www.npmjs.com/package/react-validatable-form'} target={'_blank'} rel=\"noreferrer\">\r\n                    <img\r\n                        src={'https://img.shields.io/npm/v/react-validatable-form?label=npm%20%7C%20web'}\r\n                        alt={'npm'}\r\n                    />\r\n                </a>\r\n                <a\r\n                    href={'https://github.com/obss/react-validatable-form/blob/master/LICENSE'}\r\n                    target={'_blank'}\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    <img\r\n                        src={'https://img.shields.io/github/license/obss/react-validatable-form.svg'}\r\n                        alt={'license'}\r\n                    />\r\n                </a>\r\n                <a\r\n                    href={'https://github.com/obss/react-validatable-form/graphs/contributors'}\r\n                    target={'_blank'}\r\n                    rel=\"noreferrer\"\r\n                >\r\n                    <img\r\n                        src={'https://img.shields.io/github/contributors/obss/react-validatable-form'}\r\n                        alt={'github'}\r\n                    />\r\n                </a>\r\n                <a href={'https://github.com/obss/react-validatable-form/issues'} target={'_blank'} rel=\"noreferrer\">\r\n                    <img src={'https://img.shields.io/github/issues/obss/react-validatable-form.svg'} alt={'issue'} />\r\n                </a>\r\n                <a href={'https://github.com/obss/react-validatable-form'} target={'_blank'} rel=\"noreferrer\">\r\n                    <img\r\n                        src={'https://img.shields.io/snyk/vulnerabilities/github/obss/react-validatable-form'}\r\n                        alt={'vulnerabilities'}\r\n                    />\r\n                </a>\r\n                <a href={'https://www.npmjs.com/package/react-validatable-form'} target={'_blank'} rel=\"noreferrer\">\r\n                    <img src={'https://img.shields.io/npm/dw/react-validatable-form.svg'} alt={'download'} />\r\n                </a>\r\n                <a href={'https://www.npmjs.com/package/react-validatable-form'} target={'_blank'} rel=\"noreferrer\">\r\n                    <img src={'https://img.shields.io/bundlephobia/min/react-validatable-form'} alt={'size'} />\r\n                </a>\r\n            </Box>\r\n            <Box display={'flex'} flexWrap={'wrap'} gap={1} justifyContent={'center'} py={1}>\r\n                <Button\r\n                    size={'large'}\r\n                    href={'https://github.com/obss/react-validatable-form'}\r\n                    target={'_blank'}\r\n                    variant={'outlined'}\r\n                    sx={{ borderRadius: '30px' }}\r\n                >\r\n                    GitHub\r\n                </Button>\r\n                <Link to={'/getting-started/installation'}>\r\n                    <Button size={'large'} variant={'contained'} sx={{ borderRadius: '30px' }}>\r\n                        Get Started\r\n                    </Button>\r\n                </Link>\r\n                <Button\r\n                    size={'large'}\r\n                    href={'https://github.com/obss/react-validatable-form/issues'}\r\n                    target={'_blank'}\r\n                    variant={'outlined'}\r\n                    sx={{ borderRadius: '30px' }}\r\n                >\r\n                    Contact Us\r\n                </Button>\r\n            </Box>\r\n            <video width={'500px'} autoPlay loop playsInline muted>\r\n                <source src={process.env.PUBLIC_URL + '/example_video.mp4'} type={'video/mp4'} />\r\n            </video>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import { Switch, Route } from 'react-router-dom';\r\nimport { NavSidebar } from './NavSidebar';\r\nimport Homepage from './Homepage';\r\nimport RuleRequired from './rules/RuleRequired';\r\nimport RuleNumber from './rules/RuleNumber';\r\nimport RuleLength from './rules/RuleLength';\r\nimport RuleListSize from './rules/RuleListSize';\r\nimport RuleDate from './rules/RuleDate';\r\nimport RuleEmail from './rules/RuleEmail';\r\nimport RuleUrl from './rules/RuleUrl';\r\nimport RuleIban from './rules/RuleIban';\r\nimport RuleCustomOnHook from './rules/RuleCustomOnHook';\r\nimport RuleCustomOnProvider from './rules/RuleCustomOnProvider';\r\nimport AdvancedHideBeforeSubmit from './advanced/AdvancedHideBeforeSubmit';\r\nimport AdvancedShowAfterBlur from './advanced/AdvancedShowAfterBlur';\r\nimport AdvancedFocusToErrorAfterSubmit from './advanced/AdvancedFocusToErrorAfterSubmit';\r\nimport CustomMessage from './customizations/CustomMessage';\r\nimport CustomTranslations from './customizations/CustomTranslations';\r\nimport AdvancedValidateComplexForms from './advanced/AdvancedValidateComplexForms';\r\nimport AdvancedValidateLists from './advanced/AdvancedValidateLists';\r\nimport CustomConditionalRules from './customizations/CustomConditionalRules';\r\nimport RuleRegex from './rules/RuleRegex';\r\nimport AdvancedFocusToErrorOnListAfterSubmit from './advanced/AdvancedFocusToErrorOnListAfterSubmit';\r\nimport AdvancedValidateListOfObjects from './advanced/AdvancedValidateListOfObjects';\r\nimport Installation from './getting-started/Installation';\r\nimport Usage from './getting-started/Usage';\r\nimport CustomApplyToNulls from './customizations/CustomApplyToNulls';\r\nimport CustomElementFocusHandler from './customizations/CustomElementFocusHandler';\r\nimport RuleUnique from './rules/RuleUnique';\r\nimport RuleEquality from './rules/RuleEquality';\r\nimport ExamplePureUsage from './examples/ExamplePureUsage';\r\nimport ExampleMuiUsage from './examples/ExampleMuiUsage';\r\nimport ExamplePrimeReact from './examples/ExamplePrimeReact';\r\nimport ExampleReactBootstrap from './examples/ExampleReactBootstrap';\r\nimport ExampleSetFormData from './examples/ExampleSetFormData';\r\nimport ExampleSetPathValue from './examples/ExampleSetPathValue';\r\nimport ExampleSetFormDataAndRules from './examples/ExampleSetFormDataAndRules';\r\nimport ExampleFormData from './examples/ExampleFormData';\r\nimport ApiUseValidatableForm from './api/ApiUseValidatableForm';\r\nimport ApiReactValidatableFormProvider from './api/ApiReactValidatableFormProvider';\r\nimport ApiRules from './api/ApiRules';\r\nimport ApiRule from './api/ApiRule';\r\nimport ApiPath from './api/ApiPath';\r\nimport ExampleValidationError from './examples/ExampleValidationError';\r\nimport ExampleSetRules from './examples/ExampleSetRules';\r\nimport ExampleUnsetPathValue from './examples/ExampleUnsetPathValue';\r\nimport ExampleValidationErrorOriginalResult from './examples/ExampleValidationErrorOriginalResult';\r\nimport ExampleUnsetPathIsBlurred from './examples/ExampleUnsetPathIsBlurred';\r\nimport RuleIncludes from './rules/RuleIncludes';\r\nimport Home from './getting-started/Home';\r\n\r\nconst Routes = (props) => {\r\n    return (\r\n        <>\r\n            <NavSidebar\r\n                toggleDrawer={props.toggleDrawer}\r\n                menuIsHidden={props.menuIsHidden}\r\n                onMenuItemSelect={props.onMenuItemSelect}\r\n            />\r\n            <div className=\"generalDiv\" onClick={props.onOutsideClick}>\r\n                <Switch>\r\n                    <Route exact path=\"/getting-started/home\">\r\n                        <Home />\r\n                    </Route>\r\n                    <Route exact path=\"/getting-started/installation\">\r\n                        <Installation />\r\n                    </Route>\r\n                    <Route exact path=\"/getting-started/usage\">\r\n                        <Usage openSettingsDialog={props.openSettingsDialog} />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/required\">\r\n                        <RuleRequired />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/number\">\r\n                        <RuleNumber />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/length\">\r\n                        <RuleLength />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/list-size\">\r\n                        <RuleListSize />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/date\">\r\n                        <RuleDate />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/email\">\r\n                        <RuleEmail />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/url\">\r\n                        <RuleUrl />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/iban\">\r\n                        <RuleIban />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/equality\">\r\n                        <RuleEquality />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/includes\">\r\n                        <RuleIncludes />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/regex\">\r\n                        <RuleRegex />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/unique\">\r\n                        <RuleUnique />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/custom-on-hook\">\r\n                        <RuleCustomOnHook />\r\n                    </Route>\r\n                    <Route exact path=\"/rules/custom-on-provider\">\r\n                        <RuleCustomOnProvider />\r\n                    </Route>\r\n                    <Route exact path=\"/advanced/validate-lists\">\r\n                        <AdvancedValidateLists />\r\n                    </Route>\r\n                    <Route exact path=\"/advanced/hide-before-submit\">\r\n                        <AdvancedHideBeforeSubmit />\r\n                    </Route>\r\n                    <Route exact path=\"/advanced/show-after-blur\">\r\n                        <AdvancedShowAfterBlur />\r\n                    </Route>\r\n                    <Route exact path=\"/advanced/focus-to-error-after-submit\">\r\n                        <AdvancedFocusToErrorAfterSubmit />\r\n                    </Route>\r\n                    <Route exact path=\"/advanced/focus-to-error-on-list-after-submit\">\r\n                        <AdvancedFocusToErrorOnListAfterSubmit />\r\n                    </Route>\r\n                    <Route exact path=\"/advanced/validate-list-of-objects\">\r\n                        <AdvancedValidateListOfObjects />\r\n                    </Route>\r\n                    <Route exact path=\"/advanced/validate-complex-forms\">\r\n                        <AdvancedValidateComplexForms />\r\n                    </Route>\r\n                    <Route exact path=\"/customizations/custom-message\">\r\n                        <CustomMessage />\r\n                    </Route>\r\n                    <Route exact path=\"/customizations/translations\">\r\n                        <CustomTranslations />\r\n                    </Route>\r\n                    <Route exact path=\"/customizations/conditional-rules\">\r\n                        <CustomConditionalRules />\r\n                    </Route>\r\n                    <Route exact path=\"/customizations/apply-to-nulls\">\r\n                        <CustomApplyToNulls />\r\n                    </Route>\r\n                    <Route exact path=\"/customizations/custom-element-focus-handler\">\r\n                        <CustomElementFocusHandler />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/pure\">\r\n                        <ExamplePureUsage />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/mui\">\r\n                        <ExampleMuiUsage />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/prime-react\">\r\n                        <ExamplePrimeReact />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/react-bootstrap\">\r\n                        <ExampleReactBootstrap />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/set-form-data\">\r\n                        <ExampleSetFormData />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/set-path-value\">\r\n                        <ExampleSetPathValue />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/unset-path-value\">\r\n                        <ExampleUnsetPathValue />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/set-rules\">\r\n                        <ExampleSetRules />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/set-form-data-and-rules\">\r\n                        <ExampleSetFormDataAndRules />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/form-data\">\r\n                        <ExampleFormData />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/validation-error\">\r\n                        <ExampleValidationError />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/validation-error-original-result\">\r\n                        <ExampleValidationErrorOriginalResult />\r\n                    </Route>\r\n                    <Route exact path=\"/examples/unset-path-is-blurred\">\r\n                        <ExampleUnsetPathIsBlurred />\r\n                    </Route>\r\n                    <Route exact path=\"/api/react-validatable-form-provider\">\r\n                        <ApiReactValidatableFormProvider openSettingsDialog={props.openSettingsDialog} />\r\n                    </Route>\r\n                    <Route exact path=\"/api/use-validatable-form\">\r\n                        <ApiUseValidatableForm />\r\n                    </Route>\r\n                    <Route exact path=\"/api/rules\">\r\n                        <ApiRules />\r\n                    </Route>\r\n                    <Route exact path=\"/api/rule\">\r\n                        <ApiRule />\r\n                    </Route>\r\n                    <Route exact path=\"/api/path\">\r\n                        <ApiPath />\r\n                    </Route>\r\n                    <Route exact path=\"/\">\r\n                        <Homepage />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import Button from '@mui/material/Button';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport './Settings.css';\r\nimport { SettingsOutlined } from '@mui/icons-material';\r\n\r\nconst Settings = (props) => {\r\n    const { openSettingsDialog } = props;\r\n    const versionInfo = `Version: ${process.env.REACT_APP_VERSION}`;\r\n\r\n    return (\r\n        <div className={'settings-div'}>\r\n            <span className={'settingsTitle'}>\r\n                <Button variant=\"contained\" className=\"topButton\" onClick={() => openSettingsDialog()}>\r\n                    <SettingsOutlined />\r\n                </Button>\r\n            </span>\r\n\r\n            <Tooltip placement=\"bottom\" title=\"View on GitHub\">\r\n                <span className={'githubIcon'}>\r\n                    <a href={'https://github.com/obss/react-validatable-form'} target=\"_blank\" rel=\"noreferrer\">\r\n                        <img src={process.env.PUBLIC_URL + '/github.png'} alt=\"github_icon\" />\r\n                    </a>\r\n                </span>\r\n            </Tooltip>\r\n            <Tooltip placement=\"bottom\" title=\"View on npmjs\">\r\n                <span className={'npmIcon'}>\r\n                    <a href={'https://www.npmjs.com/package/react-validatable-form'} target=\"_blank\" rel=\"noreferrer\">\r\n                        <img src={process.env.PUBLIC_URL + '/npm.png'} alt=\"npm_icon\" />\r\n                    </a>\r\n                </span>\r\n            </Tooltip>\r\n            <Tooltip placement=\"bottom\" title=\"Current Version\">\r\n                <span className={'versionInfo'}>\r\n                    <a href={'https://www.npmjs.com/package/react-validatable-form'} target=\"_blank\" rel=\"noreferrer\">\r\n                        {versionInfo}\r\n                    </a>\r\n                </span>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;\r\n","import { Drawer } from '@mui/material';\r\nimport { NavSidebar } from './NavSidebar';\r\n\r\nconst MainDrawer = ({ open, toggleDrawer }) => {\r\n    return (\r\n        <Drawer\r\n            ModalProps={{\r\n                keepMounted: true,\r\n            }}\r\n            anchor={'left'}\r\n            open={open}\r\n            onClose={() => toggleDrawer(false)}\r\n        >\r\n            <NavSidebar toggleDrawer={toggleDrawer} />\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default MainDrawer;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { ReactValidatableFormProvider } from 'react-validatable-form';\r\nimport { AppBar, Box, Dialog, DialogTitle, Toolbar } from '@mui/material';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport './Main.css';\r\nimport BodyWrapper from './BodyWrapper';\r\nimport Routes from './Routes';\r\nimport ExampleUsageWrapper from './ExampleUsageWrapper';\r\nimport Settings from './Settings';\r\nimport { HashRouter, Link } from 'react-router-dom';\r\nimport MainDrawer from './MainDrawer';\r\n\r\nconst MyCustomRuleFunction = (ruleParams) => {\r\n    const { value } = ruleParams;\r\n\r\n    if (!value) {\r\n        return 'this field include is a required field';\r\n    }\r\n\r\n    if (!value.includes('a') && value.length < 5) {\r\n        return `text ${value} should either include letter 'a' or its length should be greater than 4`;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nconst customRules = {\r\n    myCustomRule: MyCustomRuleFunction,\r\n};\r\n\r\nconst defaultSettings = {\r\n    lang: 'en',\r\n    translationsEnabled: false,\r\n    customDateFormatterFunctionEnabled: false,\r\n    customDateWithTimeFormatterFunctionEnabled: false,\r\n    hideBeforeSubmit: false,\r\n    showAfterBlur: false,\r\n    focusToErrorAfterSubmit: false,\r\n    customElementFocusHandlerEnabled: false,\r\n};\r\n\r\nconst customTranslations = {\r\n    en: {\r\n        required: 'This field is really required',\r\n        'length.greaterThan': 'Believe me, this field should really have greater than ${comparisonValue} characters',\r\n        'length.equalTo': 'You should be careful because this field should have ${comparisonValue} characters',\r\n    },\r\n    de: {\r\n        required: 'Dieses Feld wird benötigt',\r\n    },\r\n};\r\n\r\nconst customDateFormatterFunction = (dateParam) => {\r\n    const strArray = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    const d = dateParam.getDate();\r\n    const m = strArray[dateParam.getMonth()];\r\n    const y = dateParam.getFullYear();\r\n    return '' + (d <= 9 ? '0' + d : d) + '-' + m + '-' + y;\r\n};\r\n\r\nconst customDateWithTimeFormatterFunction = (dateParam) => {\r\n    const strArray = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    const d = dateParam.getDate();\r\n    const m = strArray[dateParam.getMonth()];\r\n    const y = dateParam.getFullYear();\r\n    const h = dateParam.getHours();\r\n    const mi = dateParam.getMinutes();\r\n    return '' + (d <= 9 ? '0' + d : d) + '-' + m + '-' + y + ' ' + h + ':' + mi;\r\n};\r\n\r\nconst defaultLangOptions = ['en', 'tr'];\r\n\r\nconst Main = () => {\r\n    const isMobile = useMediaQuery('(max-width:1024px)');\r\n    const [currentSettings, setCurrentSettings] = useState(defaultSettings);\r\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState(false);\r\n    const [menuIsHidden, setMenuIsHidden] = useState(false);\r\n    const [anchor, setAnchor] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setMenuIsHidden(isMobile);\r\n    }, [isMobile]);\r\n\r\n    const handleOutsideClick = () => {\r\n        if (isMobile) {\r\n            setMenuIsHidden(true);\r\n        }\r\n    };\r\n\r\n    const handleOnMenuItemSelect = () => {\r\n        if (isMobile) {\r\n            setMenuIsHidden(true);\r\n        }\r\n    };\r\n\r\n    const openSettingsDialog = () => {\r\n        setSettingsDialogOpen(true);\r\n    };\r\n\r\n    const handleSettingChange = (key, value) => {\r\n        const newSettings = { ...currentSettings };\r\n        newSettings[key] = value;\r\n        if (key === 'translationsEnabled' && !value) {\r\n            if (currentSettings.lang === 'de') {\r\n                newSettings['lang'] = 'en';\r\n            }\r\n        }\r\n        setCurrentSettings(newSettings);\r\n    };\r\n\r\n    let translations = null;\r\n    if (currentSettings.translationsEnabled) {\r\n        translations = customTranslations;\r\n    }\r\n\r\n    let dateFormatterFunction = null;\r\n    if (currentSettings.customDateFormatterFunctionEnabled) {\r\n        dateFormatterFunction = customDateFormatterFunction;\r\n    }\r\n\r\n    let dateWithTimeFormatterFunction = null;\r\n    if (currentSettings.customDateWithTimeFormatterFunctionEnabled) {\r\n        dateWithTimeFormatterFunction = customDateWithTimeFormatterFunction;\r\n    }\r\n\r\n    const currentLangOptions = [...defaultLangOptions];\r\n    if (currentSettings.translationsEnabled) {\r\n        currentLangOptions.push('de');\r\n    }\r\n\r\n    let customElementFocusHandler = null;\r\n    if (currentSettings.customElementFocusHandlerEnabled) {\r\n        customElementFocusHandler = (elementId) => {\r\n            const element = document.getElementById(elementId);\r\n            if (!element) {\r\n                console.warn(`useValidatableForm warning. Dom element with id ${elementId} is not found to be focused`);\r\n            } else {\r\n                console.log(`I'm currently focusing Dom element with id ${elementId}`);\r\n                element.focus();\r\n            }\r\n        };\r\n    }\r\n\r\n    const dialogContent = (\r\n        <div className={'providerDialogContent'}>\r\n            <Autocomplete\r\n                value={currentSettings.lang}\r\n                onChange={(event, newValue) => {\r\n                    handleSettingChange('lang', newValue);\r\n                }}\r\n                options={currentLangOptions}\r\n                renderInput={(params) => <TextField {...params} label=\"lang\" />}\r\n                style={{ width: 200 }}\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={currentSettings.translationsEnabled}\r\n                        onChange={(e) => handleSettingChange('translationsEnabled', e.target.checked)}\r\n                    />\r\n                }\r\n                label=\"custom translations\"\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={currentSettings.customDateFormatterFunctionEnabled}\r\n                        onChange={(e) => handleSettingChange('customDateFormatterFunctionEnabled', e.target.checked)}\r\n                    />\r\n                }\r\n                label=\"custom dateFormatterFunction\"\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={currentSettings.customDateWithTimeFormatterFunctionEnabled}\r\n                        onChange={(e) =>\r\n                            handleSettingChange('customDateWithTimeFormatterFunctionEnabled', e.target.checked)\r\n                        }\r\n                    />\r\n                }\r\n                label=\"custom dateWithTimeFormatterFunction\"\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={currentSettings.hideBeforeSubmit}\r\n                        onChange={(e) => handleSettingChange('hideBeforeSubmit', e.target.checked)}\r\n                    />\r\n                }\r\n                label=\"hideBeforeSubmit\"\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={currentSettings.showAfterBlur}\r\n                        onChange={(e) => handleSettingChange('showAfterBlur', e.target.checked)}\r\n                    />\r\n                }\r\n                label=\"showAfterBlur\"\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={currentSettings.focusToErrorAfterSubmit}\r\n                        onChange={(e) => handleSettingChange('focusToErrorAfterSubmit', e.target.checked)}\r\n                    />\r\n                }\r\n                label=\"focusToErrorAfterSubmit\"\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={currentSettings.customElementFocusHandlerEnabled}\r\n                        onChange={(e) => handleSettingChange('customElementFocusHandlerEnabled', e.target.checked)}\r\n                    />\r\n                }\r\n                label=\"custom elementFocusHandler\"\r\n            />\r\n        </div>\r\n    );\r\n\r\n    const toggleDrawer = (open) => {\r\n        setAnchor(open);\r\n    };\r\n\r\n    const handleMenuButton = () => {\r\n        if (isMobile) {\r\n            toggleDrawer(!anchor);\r\n        } else {\r\n            setMenuIsHidden(!menuIsHidden);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <HashRouter>\r\n            <div className={'obssTriangle'}>\r\n                <a className={'triangleIcon'} href={'https://obss.com.tr/'} target={'_blank'} rel=\"noreferrer\">\r\n                    <img src={process.env.PUBLIC_URL + '/obss.png'} alt={'obss'} />\r\n                </a>\r\n            </div>\r\n            <Box flexGrow={1}>\r\n                <AppBar color={'transparent'} position={'relative'}>\r\n                    <Toolbar>\r\n                        <IconButton onClick={() => handleMenuButton()} className=\"menuButton\">\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Link to={'/'}>\r\n                            <img\r\n                                width={48}\r\n                                className={'menuLogo'}\r\n                                src={process.env.PUBLIC_URL + '/logo.png'}\r\n                                alt={'logo'}\r\n                            />\r\n                        </Link>\r\n                        <Box flexGrow={1} />\r\n                        <Settings openSettingsDialog={openSettingsDialog} />\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </Box>\r\n            <MainDrawer anchor={anchor} open={anchor} toggleDrawer={toggleDrawer} />\r\n            <Dialog open={settingsDialogOpen} onClose={() => setSettingsDialogOpen(false)}>\r\n                <DialogTitle>\r\n                    <ExampleUsageWrapper\r\n                        header=\"Edit ReactValidatableFormProvider Props\"\r\n                        codeUrl=\"components/Main.js\"\r\n                        wrapperClassName=\"modalHeaderWrapper\"\r\n                    />\r\n                </DialogTitle>\r\n                {dialogContent}\r\n            </Dialog>\r\n            <ReactValidatableFormProvider\r\n                lang={currentSettings.lang}\r\n                customRules={customRules}\r\n                translations={translations}\r\n                dateFormatterFunction={dateFormatterFunction}\r\n                dateWithTimeFormatterFunction={dateWithTimeFormatterFunction}\r\n                hideBeforeSubmit={currentSettings.hideBeforeSubmit}\r\n                showAfterBlur={currentSettings.showAfterBlur}\r\n                focusToErrorAfterSubmit={currentSettings.focusToErrorAfterSubmit}\r\n                elementFocusHandler={customElementFocusHandler}\r\n            >\r\n                <BodyWrapper>\r\n                    <div className=\"flex\">\r\n                        <Routes\r\n                            onMenuItemSelect={handleOnMenuItemSelect}\r\n                            openSettingsDialog={openSettingsDialog}\r\n                            menuIsHidden={menuIsHidden}\r\n                            onOutsideClick={handleOutsideClick}\r\n                            toggleDrawer={toggleDrawer}\r\n                        />\r\n                    </div>\r\n                </BodyWrapper>\r\n            </ReactValidatableFormProvider>\r\n        </HashRouter>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import { GTMProvider } from '@elgorditosalsero/react-gtm-hook';\r\nimport './App.css';\r\nimport Main from './components/Main';\r\n\r\nfunction App() {\r\n    const gtmParams = { id: process.env.REACT_APP_GOOGLE_TAG_MANAGER_ID };\r\n    let appJsx = <Main />;\r\n    if (process.env.NODE_ENV === 'production') {\r\n        appJsx = (\r\n            <GTMProvider state={gtmParams}>\r\n                <Main />\r\n            </GTMProvider>\r\n        );\r\n    }\r\n    return appJsx;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './styles/sidenavigation.css';\r\nimport App from './App';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primereact/resources/themes/saga-blue/theme.css';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n            <App />\r\n        </LocalizationProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}